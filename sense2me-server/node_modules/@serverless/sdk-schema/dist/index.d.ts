import _m0 from 'protobufjs/minimal';
import Long from 'long';

/** Generic tagset intended to describe incoming or outgoing HTTP requests */
interface HttpTags {
    /** The method of the HTTP Request */
    method: string;
    /** The protocol of the HTTP Request */
    protocol: string;
    /** The host of the HTTP Request */
    host: string;
    /** The path of the HTTP Request */
    path: string;
    /** Names of the query parameters */
    queryParameterNames: string[];
    /** Request header names */
    requestHeaderNames: string[];
    /**
     * The Response Status Code.
     * @validation_exact_number
     */
    statusCode?: number | undefined;
    /** Eventual request error code */
    errorCode?: string | undefined;
}
declare const HttpTags: {
    encode(message: HttpTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HttpTags;
    fromJSON(object: any): HttpTags;
    toJSON(message: HttpTags): unknown;
    create<I extends {
        method?: string | undefined;
        protocol?: string | undefined;
        host?: string | undefined;
        path?: string | undefined;
        queryParameterNames?: string[] | undefined;
        requestHeaderNames?: string[] | undefined;
        statusCode?: number | undefined;
        errorCode?: string | undefined;
    } & {
        method?: string | undefined;
        protocol?: string | undefined;
        host?: string | undefined;
        path?: string | undefined;
        queryParameterNames?: (string[] & string[] & { [K in Exclude<keyof I["queryParameterNames"], keyof string[]>]: never; }) | undefined;
        requestHeaderNames?: (string[] & string[] & { [K_1 in Exclude<keyof I["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
        statusCode?: number | undefined;
        errorCode?: string | undefined;
    } & { [K_2 in Exclude<keyof I, keyof HttpTags>]: never; }>(base?: I | undefined): HttpTags;
    fromPartial<I_1 extends {
        method?: string | undefined;
        protocol?: string | undefined;
        host?: string | undefined;
        path?: string | undefined;
        queryParameterNames?: string[] | undefined;
        requestHeaderNames?: string[] | undefined;
        statusCode?: number | undefined;
        errorCode?: string | undefined;
    } & {
        method?: string | undefined;
        protocol?: string | undefined;
        host?: string | undefined;
        path?: string | undefined;
        queryParameterNames?: (string[] & string[] & { [K_3 in Exclude<keyof I_1["queryParameterNames"], keyof string[]>]: never; }) | undefined;
        requestHeaderNames?: (string[] & string[] & { [K_4 in Exclude<keyof I_1["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
        statusCode?: number | undefined;
        errorCode?: string | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof HttpTags>]: never; }>(object: I_1): HttpTags;
};

declare enum NoticeTags_NoticeType {
    /** NOTICE_TYPE_UNSPECIFIED - Notice type not set */
    NOTICE_TYPE_UNSPECIFIED = 0,
    /**
     * NOTICE_TYPE_SDK_INTERNAL - Signals SDK noteworthy event
     * Event that's not relevant to the user but can be important instruction for the Console
     * on how to process monitoring data of given case
     */
    NOTICE_TYPE_SDK_INTERNAL = 1,
    UNRECOGNIZED = -1
}
declare function noticeTags_NoticeTypeFromJSON(object: any): NoticeTags_NoticeType;
declare function noticeTags_NoticeTypeToJSON(object: NoticeTags_NoticeType): string;
interface NoticeTags {
    /** Notice Message */
    message: string;
    type?: NoticeTags_NoticeType | undefined;
}
declare const NoticeTags: {
    encode(message: NoticeTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NoticeTags;
    fromJSON(object: any): NoticeTags;
    toJSON(message: NoticeTags): unknown;
    create<I extends {
        message?: string | undefined;
        type?: NoticeTags_NoticeType | undefined;
    } & {
        message?: string | undefined;
        type?: NoticeTags_NoticeType | undefined;
    } & { [K in Exclude<keyof I, keyof NoticeTags>]: never; }>(base?: I | undefined): NoticeTags;
    fromPartial<I_1 extends {
        message?: string | undefined;
        type?: NoticeTags_NoticeType | undefined;
    } & {
        message?: string | undefined;
        type?: NoticeTags_NoticeType | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof NoticeTags>]: never; }>(object: I_1): NoticeTags;
};

declare enum WarningTags_WarningType {
    /** WARNING_TYPE_UNSPECIFIED - Warning type not set */
    WARNING_TYPE_UNSPECIFIED = 0,
    /** WARNING_TYPE_USER - Warning explicitly reported by user */
    WARNING_TYPE_USER = 1,
    /** WARNING_TYPE_SDK_USER - Warning reported internally by the SDK that signal potential misusage on user side */
    WARNING_TYPE_SDK_USER = 2,
    /** WARNING_TYPE_SDK_INTERNAL - Warning reported internally by the SDK that signal non fatal SDK issue */
    WARNING_TYPE_SDK_INTERNAL = 3,
    UNRECOGNIZED = -1
}
declare function warningTags_WarningTypeFromJSON(object: any): WarningTags_WarningType;
declare function warningTags_WarningTypeToJSON(object: WarningTags_WarningType): string;
interface WarningTags {
    /** The Warning Message */
    message: string;
    /** Stack trace listing where the warning was reported */
    stacktrace?: string | undefined;
    type?: WarningTags_WarningType | undefined;
}
declare const WarningTags: {
    encode(message: WarningTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WarningTags;
    fromJSON(object: any): WarningTags;
    toJSON(message: WarningTags): unknown;
    create<I extends {
        message?: string | undefined;
        stacktrace?: string | undefined;
        type?: WarningTags_WarningType | undefined;
    } & {
        message?: string | undefined;
        stacktrace?: string | undefined;
        type?: WarningTags_WarningType | undefined;
    } & { [K in Exclude<keyof I, keyof WarningTags>]: never; }>(base?: I | undefined): WarningTags;
    fromPartial<I_1 extends {
        message?: string | undefined;
        stacktrace?: string | undefined;
        type?: WarningTags_WarningType | undefined;
    } & {
        message?: string | undefined;
        stacktrace?: string | undefined;
        type?: WarningTags_WarningType | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof WarningTags>]: never; }>(object: I_1): WarningTags;
};

declare enum ErrorTags_ErrorType {
    /** ERROR_TYPE_UNSPECIFIED - No ErrorType was provided. This should never be the case and if it is received ingest will ignore it. */
    ERROR_TYPE_UNSPECIFIED = 0,
    /** ERROR_TYPE_UNCAUGHT - An unexpected error that caused the application to fail */
    ERROR_TYPE_UNCAUGHT = 1,
    /**
     * ERROR_TYPE_CAUGHT_USER - An error that was reported by user explictly via the Serverless SDK or console.error call
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ERROR_TYPE_CAUGHT_USER = 2,
    /**
     * ERROR_TYPE_CAUGHT_SDK_USER - An error that was reported by the Serverless SDK internally that reports user error
     * (misuage of the SDK)
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ERROR_TYPE_CAUGHT_SDK_USER = 3,
    /**
     * ERROR_TYPE_CAUGHT_SDK_INTERNAL - An error that was reported by the Serverless SDK internally that reports
     * internal SDK error
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ERROR_TYPE_CAUGHT_SDK_INTERNAL = 4,
    UNRECOGNIZED = -1
}
declare function errorTags_ErrorTypeFromJSON(object: any): ErrorTags_ErrorType;
declare function errorTags_ErrorTypeToJSON(object: ErrorTags_ErrorType): string;
interface ErrorTags {
    /** The Error Name */
    name: string;
    /** The Error Message - Depending on runtime this is defined or not. */
    message?: string | undefined;
    /** The Error stacktrace if applicable */
    stacktrace?: string | undefined;
    type: ErrorTags_ErrorType;
}
declare const ErrorTags: {
    encode(message: ErrorTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ErrorTags;
    fromJSON(object: any): ErrorTags;
    toJSON(message: ErrorTags): unknown;
    create<I extends {
        name?: string | undefined;
        message?: string | undefined;
        stacktrace?: string | undefined;
        type?: ErrorTags_ErrorType | undefined;
    } & {
        name?: string | undefined;
        message?: string | undefined;
        stacktrace?: string | undefined;
        type?: ErrorTags_ErrorType | undefined;
    } & { [K in Exclude<keyof I, keyof ErrorTags>]: never; }>(base?: I | undefined): ErrorTags;
    fromPartial<I_1 extends {
        name?: string | undefined;
        message?: string | undefined;
        stacktrace?: string | undefined;
        type?: ErrorTags_ErrorType | undefined;
    } & {
        name?: string | undefined;
        message?: string | undefined;
        stacktrace?: string | undefined;
        type?: ErrorTags_ErrorType | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof ErrorTags>]: never; }>(object: I_1): ErrorTags;
};

/**
 * A Lambda function invocation can have one of the following
 * outcomes upon completion.
 */
declare enum AwsLambdaTags_Outcome {
    /** OUTCOME_UNSPECIFIED - No outcome was registered. Either information on the outcome was not disclosed (which should never be the case), or the function invocation has not been finalized yet */
    OUTCOME_UNSPECIFIED = 0,
    /** OUTCOME_SUCCESS - Function handler returned successfully */
    OUTCOME_SUCCESS = 1,
    /** OUTCOME_ERROR_INITIALIZATION - Function crashed at initialization */
    OUTCOME_ERROR_INITIALIZATION = 2,
    /** OUTCOME_ERROR_UNHANDLED - Function crashed in an unhandled way at invocation (a result of either uncaught exception or unhandled rejection) */
    OUTCOME_ERROR_UNHANDLED = 3,
    /** OUTCOME_ERROR_TIMEOUT - Function timed out */
    OUTCOME_ERROR_TIMEOUT = 4,
    /** OUTCOME_ERROR_HANDLED - Function handler resolved with an error (either error was passed to lambda callback, or async handler resolved with error rejection) */
    OUTCOME_ERROR_HANDLED = 5,
    UNRECOGNIZED = -1
}
declare function awsLambdaTags_OutcomeFromJSON(object: any): AwsLambdaTags_Outcome;
declare function awsLambdaTags_OutcomeToJSON(object: AwsLambdaTags_Outcome): string;
declare enum AwsLambdaTags_ResponseMode {
    /** RESPONSE_MODE_UNSPECIFIED - Mode not confirmed */
    RESPONSE_MODE_UNSPECIFIED = 0,
    /** RESPONSE_MODE_BUFFERED - Regular buffered response */
    RESPONSE_MODE_BUFFERED = 1,
    /** RESPONSE_MODE_RESPONSE_STREAM - Stream response */
    RESPONSE_MODE_RESPONSE_STREAM = 2,
    UNRECOGNIZED = -1
}
declare function awsLambdaTags_ResponseModeFromJSON(object: any): AwsLambdaTags_ResponseMode;
declare function awsLambdaTags_ResponseModeToJSON(object: AwsLambdaTags_ResponseMode): string;
interface AwsTags {
    /** The root AWS Lambda Span tags */
    lambda?: AwsLambdaTags | undefined;
    /**
     * The AWS SDK Tags. These are only added when instrumented code
     * makes a call to one of the AWS SDK functions
     */
    sdk?: AwsSdkTags | undefined;
    /** Account Id is added to all schemas originating from aws during ingest as part of our data enrichment process */
    accountId?: string | undefined;
    /** Region is added to all schemas originating from aws during ingest as part of our data enrichment process */
    region?: string | undefined;
    /** RequestId is added to all schemas originating from aws lambda during ingest as part of our data enrichment process */
    requestId?: string | undefined;
    /** ResourceName is added to all schemas originating from aws lambda during ingest as part of our data enrichment process */
    resourceName?: string | undefined;
    /**
     * The monotonically increasing sequence id for a LogEvent originating from aws lambda.
     * This is used to determine the ordering of messages in a given stream of logs.
     * If this is a LogEvent coming from Cloudwatch Logs, it will be provided
     * otherwise it is the responsibility of the log producer to generate
     * a sequence id.
     */
    sequenceId?: string | undefined;
    /** The Cloudwatch Log Group name for logs originating from aws lambda. */
    logGroup?: string | undefined;
    /** The Cloudwatch Log Group Stream id for logs originating from aws lambda. */
    logStream?: string | undefined;
}
declare const AwsTags: {
    encode(message: AwsTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsTags;
    fromJSON(object: any): AwsTags;
    toJSON(message: AwsTags): unknown;
    create<I extends {
        lambda?: {
            arch?: string | undefined;
            isColdstart?: boolean | undefined;
            eventType?: string | undefined;
            eventSource?: string | undefined;
            logGroup?: string | undefined;
            logStreamName?: string | undefined;
            maxMemory?: number | undefined;
            name?: string | undefined;
            requestId?: string | undefined;
            version?: string | undefined;
            accountId?: string | undefined;
            outcome?: AwsLambdaTags_Outcome | undefined;
            errorExceptionMessage?: string | undefined;
            errorExceptionStacktrace?: string | undefined;
            duration?: number | undefined;
            requestBody?: string | undefined;
            responseBody?: string | undefined;
            logsStartTimeUnix?: string | number | Long | undefined;
            logsEndTimeUnix?: string | number | Long | undefined;
            responseMode?: AwsLambdaTags_ResponseMode | undefined;
            sqs?: {
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            sns?: {
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            apiGateway?: {
                accountId?: string | undefined;
                apiId?: string | undefined;
                apiStage?: string | undefined;
                request?: {
                    id?: string | undefined;
                    timeEpoch?: string | number | Long | undefined;
                    pathParameterNames?: string[] | undefined;
                } | undefined;
            } | undefined;
            httpRouter?: {
                path?: string | undefined;
            } | undefined;
            initialization?: {
                initializationDuration?: number | undefined;
            } | undefined;
            invocation?: {
                invocationDuration?: number | undefined;
            } | undefined;
            runtime?: {
                identifier?: string | undefined;
                version?: string | undefined;
                arn?: string | undefined;
            } | undefined;
        } | undefined;
        sdk?: {
            region?: string | undefined;
            signatureVersion?: string | undefined;
            service?: string | undefined;
            operation?: string | undefined;
            requestId?: string | undefined;
            error?: string | undefined;
            dynamodb?: {
                tableName?: string | undefined;
                projection?: string | undefined;
                scanForward?: boolean | undefined;
                attributesToGet?: string[] | undefined;
                consistentRead?: boolean | undefined;
                indexName?: string | undefined;
                limit?: number | undefined;
                select?: string | undefined;
                segment?: number | undefined;
                totalSegments?: string | number | Long | undefined;
                filter?: string | undefined;
                keyCondition?: string | undefined;
                exclusiveStartKey?: string | undefined;
                attributeValues?: string | undefined;
                count?: string | number | Long | undefined;
                scannedCount?: string | number | Long | undefined;
            } | undefined;
            sqs?: {
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            sns?: {
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
        } | undefined;
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        resourceName?: string | undefined;
        sequenceId?: string | undefined;
        logGroup?: string | undefined;
        logStream?: string | undefined;
    } & {
        lambda?: ({
            arch?: string | undefined;
            isColdstart?: boolean | undefined;
            eventType?: string | undefined;
            eventSource?: string | undefined;
            logGroup?: string | undefined;
            logStreamName?: string | undefined;
            maxMemory?: number | undefined;
            name?: string | undefined;
            requestId?: string | undefined;
            version?: string | undefined;
            accountId?: string | undefined;
            outcome?: AwsLambdaTags_Outcome | undefined;
            errorExceptionMessage?: string | undefined;
            errorExceptionStacktrace?: string | undefined;
            duration?: number | undefined;
            requestBody?: string | undefined;
            responseBody?: string | undefined;
            logsStartTimeUnix?: string | number | Long | undefined;
            logsEndTimeUnix?: string | number | Long | undefined;
            responseMode?: AwsLambdaTags_ResponseMode | undefined;
            sqs?: {
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            sns?: {
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            apiGateway?: {
                accountId?: string | undefined;
                apiId?: string | undefined;
                apiStage?: string | undefined;
                request?: {
                    id?: string | undefined;
                    timeEpoch?: string | number | Long | undefined;
                    pathParameterNames?: string[] | undefined;
                } | undefined;
            } | undefined;
            httpRouter?: {
                path?: string | undefined;
            } | undefined;
            initialization?: {
                initializationDuration?: number | undefined;
            } | undefined;
            invocation?: {
                invocationDuration?: number | undefined;
            } | undefined;
            runtime?: {
                identifier?: string | undefined;
                version?: string | undefined;
                arn?: string | undefined;
            } | undefined;
        } & {
            arch?: string | undefined;
            isColdstart?: boolean | undefined;
            eventType?: string | undefined;
            eventSource?: string | undefined;
            logGroup?: string | undefined;
            logStreamName?: string | undefined;
            maxMemory?: number | undefined;
            name?: string | undefined;
            requestId?: string | undefined;
            version?: string | undefined;
            accountId?: string | undefined;
            outcome?: AwsLambdaTags_Outcome | undefined;
            errorExceptionMessage?: string | undefined;
            errorExceptionStacktrace?: string | undefined;
            duration?: number | undefined;
            requestBody?: string | undefined;
            responseBody?: string | undefined;
            logsStartTimeUnix?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
            logsEndTimeUnix?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_1 in Exclude<keyof I["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
            responseMode?: AwsLambdaTags_ResponseMode | undefined;
            sqs?: ({
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } & {
                queueName?: string | undefined;
                messageIds?: (string[] & string[] & { [K_2 in Exclude<keyof I["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
            } & { [K_3 in Exclude<keyof I["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
            sns?: ({
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } & {
                topicName?: string | undefined;
                messageIds?: (string[] & string[] & { [K_4 in Exclude<keyof I["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
            } & { [K_5 in Exclude<keyof I["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_6 in Exclude<keyof I["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_7 in Exclude<keyof I["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_8 in Exclude<keyof I["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
            apiGateway?: ({
                accountId?: string | undefined;
                apiId?: string | undefined;
                apiStage?: string | undefined;
                request?: {
                    id?: string | undefined;
                    timeEpoch?: string | number | Long | undefined;
                    pathParameterNames?: string[] | undefined;
                } | undefined;
            } & {
                accountId?: string | undefined;
                apiId?: string | undefined;
                apiStage?: string | undefined;
                request?: ({
                    id?: string | undefined;
                    timeEpoch?: string | number | Long | undefined;
                    pathParameterNames?: string[] | undefined;
                } & {
                    id?: string | undefined;
                    timeEpoch?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_9 in Exclude<keyof I["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                    pathParameterNames?: (string[] & string[] & { [K_10 in Exclude<keyof I["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                } & { [K_11 in Exclude<keyof I["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
            } & { [K_12 in Exclude<keyof I["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
            httpRouter?: ({
                path?: string | undefined;
            } & {
                path?: string | undefined;
            } & { [K_13 in Exclude<keyof I["lambda"]["httpRouter"], "path">]: never; }) | undefined;
            initialization?: ({
                initializationDuration?: number | undefined;
            } & {
                initializationDuration?: number | undefined;
            } & { [K_14 in Exclude<keyof I["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
            invocation?: ({
                invocationDuration?: number | undefined;
            } & {
                invocationDuration?: number | undefined;
            } & { [K_15 in Exclude<keyof I["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
            runtime?: ({
                identifier?: string | undefined;
                version?: string | undefined;
                arn?: string | undefined;
            } & {
                identifier?: string | undefined;
                version?: string | undefined;
                arn?: string | undefined;
            } & { [K_16 in Exclude<keyof I["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
        } & { [K_17 in Exclude<keyof I["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
        sdk?: ({
            region?: string | undefined;
            signatureVersion?: string | undefined;
            service?: string | undefined;
            operation?: string | undefined;
            requestId?: string | undefined;
            error?: string | undefined;
            dynamodb?: {
                tableName?: string | undefined;
                projection?: string | undefined;
                scanForward?: boolean | undefined;
                attributesToGet?: string[] | undefined;
                consistentRead?: boolean | undefined;
                indexName?: string | undefined;
                limit?: number | undefined;
                select?: string | undefined;
                segment?: number | undefined;
                totalSegments?: string | number | Long | undefined;
                filter?: string | undefined;
                keyCondition?: string | undefined;
                exclusiveStartKey?: string | undefined;
                attributeValues?: string | undefined;
                count?: string | number | Long | undefined;
                scannedCount?: string | number | Long | undefined;
            } | undefined;
            sqs?: {
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            sns?: {
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
        } & {
            region?: string | undefined;
            signatureVersion?: string | undefined;
            service?: string | undefined;
            operation?: string | undefined;
            requestId?: string | undefined;
            error?: string | undefined;
            dynamodb?: ({
                tableName?: string | undefined;
                projection?: string | undefined;
                scanForward?: boolean | undefined;
                attributesToGet?: string[] | undefined;
                consistentRead?: boolean | undefined;
                indexName?: string | undefined;
                limit?: number | undefined;
                select?: string | undefined;
                segment?: number | undefined;
                totalSegments?: string | number | Long | undefined;
                filter?: string | undefined;
                keyCondition?: string | undefined;
                exclusiveStartKey?: string | undefined;
                attributeValues?: string | undefined;
                count?: string | number | Long | undefined;
                scannedCount?: string | number | Long | undefined;
            } & {
                tableName?: string | undefined;
                projection?: string | undefined;
                scanForward?: boolean | undefined;
                attributesToGet?: (string[] & string[] & { [K_18 in Exclude<keyof I["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                consistentRead?: boolean | undefined;
                indexName?: string | undefined;
                limit?: number | undefined;
                select?: string | undefined;
                segment?: number | undefined;
                totalSegments?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_19 in Exclude<keyof I["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                filter?: string | undefined;
                keyCondition?: string | undefined;
                exclusiveStartKey?: string | undefined;
                attributeValues?: string | undefined;
                count?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_20 in Exclude<keyof I["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                scannedCount?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_21 in Exclude<keyof I["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
            } & { [K_22 in Exclude<keyof I["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
            sqs?: ({
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } & {
                queueName?: string | undefined;
                messageIds?: (string[] & string[] & { [K_23 in Exclude<keyof I["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
            } & { [K_24 in Exclude<keyof I["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
            sns?: ({
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } & {
                topicName?: string | undefined;
                messageIds?: (string[] & string[] & { [K_25 in Exclude<keyof I["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
            } & { [K_26 in Exclude<keyof I["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
        } & { [K_27 in Exclude<keyof I["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        resourceName?: string | undefined;
        sequenceId?: string | undefined;
        logGroup?: string | undefined;
        logStream?: string | undefined;
    } & { [K_28 in Exclude<keyof I, keyof AwsTags>]: never; }>(base?: I | undefined): AwsTags;
    fromPartial<I_1 extends {
        lambda?: {
            arch?: string | undefined;
            isColdstart?: boolean | undefined;
            eventType?: string | undefined;
            eventSource?: string | undefined;
            logGroup?: string | undefined;
            logStreamName?: string | undefined;
            maxMemory?: number | undefined;
            name?: string | undefined;
            requestId?: string | undefined;
            version?: string | undefined;
            accountId?: string | undefined;
            outcome?: AwsLambdaTags_Outcome | undefined;
            errorExceptionMessage?: string | undefined;
            errorExceptionStacktrace?: string | undefined;
            duration?: number | undefined;
            requestBody?: string | undefined;
            responseBody?: string | undefined;
            logsStartTimeUnix?: string | number | Long | undefined;
            logsEndTimeUnix?: string | number | Long | undefined;
            responseMode?: AwsLambdaTags_ResponseMode | undefined;
            sqs?: {
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            sns?: {
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            apiGateway?: {
                accountId?: string | undefined;
                apiId?: string | undefined;
                apiStage?: string | undefined;
                request?: {
                    id?: string | undefined;
                    timeEpoch?: string | number | Long | undefined;
                    pathParameterNames?: string[] | undefined;
                } | undefined;
            } | undefined;
            httpRouter?: {
                path?: string | undefined;
            } | undefined;
            initialization?: {
                initializationDuration?: number | undefined;
            } | undefined;
            invocation?: {
                invocationDuration?: number | undefined;
            } | undefined;
            runtime?: {
                identifier?: string | undefined;
                version?: string | undefined;
                arn?: string | undefined;
            } | undefined;
        } | undefined;
        sdk?: {
            region?: string | undefined;
            signatureVersion?: string | undefined;
            service?: string | undefined;
            operation?: string | undefined;
            requestId?: string | undefined;
            error?: string | undefined;
            dynamodb?: {
                tableName?: string | undefined;
                projection?: string | undefined;
                scanForward?: boolean | undefined;
                attributesToGet?: string[] | undefined;
                consistentRead?: boolean | undefined;
                indexName?: string | undefined;
                limit?: number | undefined;
                select?: string | undefined;
                segment?: number | undefined;
                totalSegments?: string | number | Long | undefined;
                filter?: string | undefined;
                keyCondition?: string | undefined;
                exclusiveStartKey?: string | undefined;
                attributeValues?: string | undefined;
                count?: string | number | Long | undefined;
                scannedCount?: string | number | Long | undefined;
            } | undefined;
            sqs?: {
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            sns?: {
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
        } | undefined;
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        resourceName?: string | undefined;
        sequenceId?: string | undefined;
        logGroup?: string | undefined;
        logStream?: string | undefined;
    } & {
        lambda?: ({
            arch?: string | undefined;
            isColdstart?: boolean | undefined;
            eventType?: string | undefined;
            eventSource?: string | undefined;
            logGroup?: string | undefined;
            logStreamName?: string | undefined;
            maxMemory?: number | undefined;
            name?: string | undefined;
            requestId?: string | undefined;
            version?: string | undefined;
            accountId?: string | undefined;
            outcome?: AwsLambdaTags_Outcome | undefined;
            errorExceptionMessage?: string | undefined;
            errorExceptionStacktrace?: string | undefined;
            duration?: number | undefined;
            requestBody?: string | undefined;
            responseBody?: string | undefined;
            logsStartTimeUnix?: string | number | Long | undefined;
            logsEndTimeUnix?: string | number | Long | undefined;
            responseMode?: AwsLambdaTags_ResponseMode | undefined;
            sqs?: {
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            sns?: {
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            apiGateway?: {
                accountId?: string | undefined;
                apiId?: string | undefined;
                apiStage?: string | undefined;
                request?: {
                    id?: string | undefined;
                    timeEpoch?: string | number | Long | undefined;
                    pathParameterNames?: string[] | undefined;
                } | undefined;
            } | undefined;
            httpRouter?: {
                path?: string | undefined;
            } | undefined;
            initialization?: {
                initializationDuration?: number | undefined;
            } | undefined;
            invocation?: {
                invocationDuration?: number | undefined;
            } | undefined;
            runtime?: {
                identifier?: string | undefined;
                version?: string | undefined;
                arn?: string | undefined;
            } | undefined;
        } & {
            arch?: string | undefined;
            isColdstart?: boolean | undefined;
            eventType?: string | undefined;
            eventSource?: string | undefined;
            logGroup?: string | undefined;
            logStreamName?: string | undefined;
            maxMemory?: number | undefined;
            name?: string | undefined;
            requestId?: string | undefined;
            version?: string | undefined;
            accountId?: string | undefined;
            outcome?: AwsLambdaTags_Outcome | undefined;
            errorExceptionMessage?: string | undefined;
            errorExceptionStacktrace?: string | undefined;
            duration?: number | undefined;
            requestBody?: string | undefined;
            responseBody?: string | undefined;
            logsStartTimeUnix?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_29 in Exclude<keyof I_1["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
            logsEndTimeUnix?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_30 in Exclude<keyof I_1["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
            responseMode?: AwsLambdaTags_ResponseMode | undefined;
            sqs?: ({
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } & {
                queueName?: string | undefined;
                messageIds?: (string[] & string[] & { [K_31 in Exclude<keyof I_1["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
            } & { [K_32 in Exclude<keyof I_1["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
            sns?: ({
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } & {
                topicName?: string | undefined;
                messageIds?: (string[] & string[] & { [K_33 in Exclude<keyof I_1["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
            } & { [K_34 in Exclude<keyof I_1["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_35 in Exclude<keyof I_1["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_36 in Exclude<keyof I_1["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_37 in Exclude<keyof I_1["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
            apiGateway?: ({
                accountId?: string | undefined;
                apiId?: string | undefined;
                apiStage?: string | undefined;
                request?: {
                    id?: string | undefined;
                    timeEpoch?: string | number | Long | undefined;
                    pathParameterNames?: string[] | undefined;
                } | undefined;
            } & {
                accountId?: string | undefined;
                apiId?: string | undefined;
                apiStage?: string | undefined;
                request?: ({
                    id?: string | undefined;
                    timeEpoch?: string | number | Long | undefined;
                    pathParameterNames?: string[] | undefined;
                } & {
                    id?: string | undefined;
                    timeEpoch?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_38 in Exclude<keyof I_1["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                    pathParameterNames?: (string[] & string[] & { [K_39 in Exclude<keyof I_1["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                } & { [K_40 in Exclude<keyof I_1["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
            } & { [K_41 in Exclude<keyof I_1["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
            httpRouter?: ({
                path?: string | undefined;
            } & {
                path?: string | undefined;
            } & { [K_42 in Exclude<keyof I_1["lambda"]["httpRouter"], "path">]: never; }) | undefined;
            initialization?: ({
                initializationDuration?: number | undefined;
            } & {
                initializationDuration?: number | undefined;
            } & { [K_43 in Exclude<keyof I_1["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
            invocation?: ({
                invocationDuration?: number | undefined;
            } & {
                invocationDuration?: number | undefined;
            } & { [K_44 in Exclude<keyof I_1["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
            runtime?: ({
                identifier?: string | undefined;
                version?: string | undefined;
                arn?: string | undefined;
            } & {
                identifier?: string | undefined;
                version?: string | undefined;
                arn?: string | undefined;
            } & { [K_45 in Exclude<keyof I_1["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
        } & { [K_46 in Exclude<keyof I_1["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
        sdk?: ({
            region?: string | undefined;
            signatureVersion?: string | undefined;
            service?: string | undefined;
            operation?: string | undefined;
            requestId?: string | undefined;
            error?: string | undefined;
            dynamodb?: {
                tableName?: string | undefined;
                projection?: string | undefined;
                scanForward?: boolean | undefined;
                attributesToGet?: string[] | undefined;
                consistentRead?: boolean | undefined;
                indexName?: string | undefined;
                limit?: number | undefined;
                select?: string | undefined;
                segment?: number | undefined;
                totalSegments?: string | number | Long | undefined;
                filter?: string | undefined;
                keyCondition?: string | undefined;
                exclusiveStartKey?: string | undefined;
                attributeValues?: string | undefined;
                count?: string | number | Long | undefined;
                scannedCount?: string | number | Long | undefined;
            } | undefined;
            sqs?: {
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
            sns?: {
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } | undefined;
        } & {
            region?: string | undefined;
            signatureVersion?: string | undefined;
            service?: string | undefined;
            operation?: string | undefined;
            requestId?: string | undefined;
            error?: string | undefined;
            dynamodb?: ({
                tableName?: string | undefined;
                projection?: string | undefined;
                scanForward?: boolean | undefined;
                attributesToGet?: string[] | undefined;
                consistentRead?: boolean | undefined;
                indexName?: string | undefined;
                limit?: number | undefined;
                select?: string | undefined;
                segment?: number | undefined;
                totalSegments?: string | number | Long | undefined;
                filter?: string | undefined;
                keyCondition?: string | undefined;
                exclusiveStartKey?: string | undefined;
                attributeValues?: string | undefined;
                count?: string | number | Long | undefined;
                scannedCount?: string | number | Long | undefined;
            } & {
                tableName?: string | undefined;
                projection?: string | undefined;
                scanForward?: boolean | undefined;
                attributesToGet?: (string[] & string[] & { [K_47 in Exclude<keyof I_1["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                consistentRead?: boolean | undefined;
                indexName?: string | undefined;
                limit?: number | undefined;
                select?: string | undefined;
                segment?: number | undefined;
                totalSegments?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_48 in Exclude<keyof I_1["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                filter?: string | undefined;
                keyCondition?: string | undefined;
                exclusiveStartKey?: string | undefined;
                attributeValues?: string | undefined;
                count?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_49 in Exclude<keyof I_1["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                scannedCount?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_50 in Exclude<keyof I_1["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
            } & { [K_51 in Exclude<keyof I_1["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
            sqs?: ({
                queueName?: string | undefined;
                messageIds?: string[] | undefined;
            } & {
                queueName?: string | undefined;
                messageIds?: (string[] & string[] & { [K_52 in Exclude<keyof I_1["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
            } & { [K_53 in Exclude<keyof I_1["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
            sns?: ({
                topicName?: string | undefined;
                messageIds?: string[] | undefined;
            } & {
                topicName?: string | undefined;
                messageIds?: (string[] & string[] & { [K_54 in Exclude<keyof I_1["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
            } & { [K_55 in Exclude<keyof I_1["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
        } & { [K_56 in Exclude<keyof I_1["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        resourceName?: string | undefined;
        sequenceId?: string | undefined;
        logGroup?: string | undefined;
        logStream?: string | undefined;
    } & { [K_57 in Exclude<keyof I_1, keyof AwsTags>]: never; }>(object: I_1): AwsTags;
};
interface AwsApiGatewayTags {
    /** The AWS Account ID of the API GW. */
    accountId: string;
    /** The unique id used for the API GW. */
    apiId: string;
    /** The stage of the API GW endpoint that was called. */
    apiStage: string;
    request: AwsApiGatewayTags_AwsApiGatewayRequestTags | undefined;
}
declare const AwsApiGatewayTags: {
    encode(message: AwsApiGatewayTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsApiGatewayTags;
    fromJSON(object: any): AwsApiGatewayTags;
    toJSON(message: AwsApiGatewayTags): unknown;
    create<I extends {
        accountId?: string | undefined;
        apiId?: string | undefined;
        apiStage?: string | undefined;
        request?: {
            id?: string | undefined;
            timeEpoch?: string | number | Long | undefined;
            pathParameterNames?: string[] | undefined;
        } | undefined;
    } & {
        accountId?: string | undefined;
        apiId?: string | undefined;
        apiStage?: string | undefined;
        request?: ({
            id?: string | undefined;
            timeEpoch?: string | number | Long | undefined;
            pathParameterNames?: string[] | undefined;
        } & {
            id?: string | undefined;
            timeEpoch?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
            pathParameterNames?: (string[] & string[] & { [K_1 in Exclude<keyof I["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, keyof AwsApiGatewayTags>]: never; }>(base?: I | undefined): AwsApiGatewayTags;
    fromPartial<I_1 extends {
        accountId?: string | undefined;
        apiId?: string | undefined;
        apiStage?: string | undefined;
        request?: {
            id?: string | undefined;
            timeEpoch?: string | number | Long | undefined;
            pathParameterNames?: string[] | undefined;
        } | undefined;
    } & {
        accountId?: string | undefined;
        apiId?: string | undefined;
        apiStage?: string | undefined;
        request?: ({
            id?: string | undefined;
            timeEpoch?: string | number | Long | undefined;
            pathParameterNames?: string[] | undefined;
        } & {
            id?: string | undefined;
            timeEpoch?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_4 in Exclude<keyof I_1["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
            pathParameterNames?: (string[] & string[] & { [K_5 in Exclude<keyof I_1["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I_1["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, keyof AwsApiGatewayTags>]: never; }>(object: I_1): AwsApiGatewayTags;
};
interface AwsApiGatewayTags_AwsApiGatewayRequestTags {
    /** The unique API GW Request ID. */
    id: string;
    /** The request time in milliseconds from epoch. */
    timeEpoch: Long;
    /** JSON string containing Request Path Parameters */
    pathParameterNames: string[];
}
declare const AwsApiGatewayTags_AwsApiGatewayRequestTags: {
    encode(message: AwsApiGatewayTags_AwsApiGatewayRequestTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsApiGatewayTags_AwsApiGatewayRequestTags;
    fromJSON(object: any): AwsApiGatewayTags_AwsApiGatewayRequestTags;
    toJSON(message: AwsApiGatewayTags_AwsApiGatewayRequestTags): unknown;
    create<I extends {
        id?: string | undefined;
        timeEpoch?: string | number | Long | undefined;
        pathParameterNames?: string[] | undefined;
    } & {
        id?: string | undefined;
        timeEpoch?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["timeEpoch"], keyof Long>]: never; }) | undefined;
        pathParameterNames?: (string[] & string[] & { [K_1 in Exclude<keyof I["pathParameterNames"], keyof string[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }>(base?: I | undefined): AwsApiGatewayTags_AwsApiGatewayRequestTags;
    fromPartial<I_1 extends {
        id?: string | undefined;
        timeEpoch?: string | number | Long | undefined;
        pathParameterNames?: string[] | undefined;
    } & {
        id?: string | undefined;
        timeEpoch?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_3 in Exclude<keyof I_1["timeEpoch"], keyof Long>]: never; }) | undefined;
        pathParameterNames?: (string[] & string[] & { [K_4 in Exclude<keyof I_1["pathParameterNames"], keyof string[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }>(object: I_1): AwsApiGatewayTags_AwsApiGatewayRequestTags;
};
interface AwsLambdaTags {
    /** The architecture of the Lambda function, currently either amd64 or arm64. */
    arch: string;
    /** Was the invocation a cold start? */
    isColdstart: boolean;
    /** The event type for the invocation. */
    eventType?: string | undefined;
    /** The event source for the invocation. */
    eventSource?: string | undefined;
    /** The Log Group for the Lambda Function. */
    logGroup?: string | undefined;
    /** The Log Stream for the invocation. */
    logStreamName?: string | undefined;
    /** The Max Memory that is configured for the Lambda Function. */
    maxMemory?: number | undefined;
    /** The Lambda Function name. */
    name: string;
    /** The Request ID for the invocation. */
    requestId: string;
    /** The Lambda Function version. */
    version: string;
    /** The AWS Account ID of the Lambda Function */
    accountId?: string | undefined;
    /** The Outcome of the Lambda invocation */
    outcome: AwsLambdaTags_Outcome;
    /** Optional error exception message. */
    errorExceptionMessage?: string | undefined;
    /** Optional error exception stacktrace. */
    errorExceptionStacktrace?: string | undefined;
    /**
     * The billed duration of the invocation in milliseconds. This will not be available
     * when instrumented, this will be upserted into this tag set after the report log from Cloudwatch is available.
     */
    duration?: number | undefined;
    /** Request body */
    requestBody?: string | undefined;
    /** Response body */
    responseBody?: string | undefined;
    /** The Unix timestamp in milliseconds of the START log event of the invocation. */
    logsStartTimeUnix?: Long | undefined;
    /** The Unix timestamp in milliseconds of the REPORT log event of the invocation. */
    logsEndTimeUnix?: Long | undefined;
    /** The event source for the invocation. */
    responseMode?: AwsLambdaTags_ResponseMode | undefined;
    /** Will be set if the function is handling a SQS event */
    sqs?: AwsSqsEventTags | undefined;
    /** Will be set if the function is handling a SNS event */
    sns?: AwsSnsEventTags | undefined;
    /** Will be set if the function is handling HTTP requests via any method, API GW, Function URLs, etc. */
    http?: HttpTags | undefined;
    /** Will be set if the function is handling HTTP requests via AWS API GW */
    apiGateway?: AwsApiGatewayTags | undefined;
    /** Will be set if function is handling HTTP requests and there's routing functionality setup */
    httpRouter?: HttpRouterTags | undefined;
    /** The root AWS Lambda Span tags. */
    initialization?: AwsLambdaInitializationTags | undefined;
    /** The AWS Lambda Invocation tags. */
    invocation?: AwsLambdaInvocationTags | undefined;
    /** The AWS Lambda Runtime tags. */
    runtime?: AwsLambdaRuntimeTags | undefined;
}
declare const AwsLambdaTags: {
    encode(message: AwsLambdaTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsLambdaTags;
    fromJSON(object: any): AwsLambdaTags;
    toJSON(message: AwsLambdaTags): unknown;
    create<I extends {
        arch?: string | undefined;
        isColdstart?: boolean | undefined;
        eventType?: string | undefined;
        eventSource?: string | undefined;
        logGroup?: string | undefined;
        logStreamName?: string | undefined;
        maxMemory?: number | undefined;
        name?: string | undefined;
        requestId?: string | undefined;
        version?: string | undefined;
        accountId?: string | undefined;
        outcome?: AwsLambdaTags_Outcome | undefined;
        errorExceptionMessage?: string | undefined;
        errorExceptionStacktrace?: string | undefined;
        duration?: number | undefined;
        requestBody?: string | undefined;
        responseBody?: string | undefined;
        logsStartTimeUnix?: string | number | Long | undefined;
        logsEndTimeUnix?: string | number | Long | undefined;
        responseMode?: AwsLambdaTags_ResponseMode | undefined;
        sqs?: {
            queueName?: string | undefined;
            messageIds?: string[] | undefined;
        } | undefined;
        sns?: {
            topicName?: string | undefined;
            messageIds?: string[] | undefined;
        } | undefined;
        http?: {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } | undefined;
        apiGateway?: {
            accountId?: string | undefined;
            apiId?: string | undefined;
            apiStage?: string | undefined;
            request?: {
                id?: string | undefined;
                timeEpoch?: string | number | Long | undefined;
                pathParameterNames?: string[] | undefined;
            } | undefined;
        } | undefined;
        httpRouter?: {
            path?: string | undefined;
        } | undefined;
        initialization?: {
            initializationDuration?: number | undefined;
        } | undefined;
        invocation?: {
            invocationDuration?: number | undefined;
        } | undefined;
        runtime?: {
            identifier?: string | undefined;
            version?: string | undefined;
            arn?: string | undefined;
        } | undefined;
    } & {
        arch?: string | undefined;
        isColdstart?: boolean | undefined;
        eventType?: string | undefined;
        eventSource?: string | undefined;
        logGroup?: string | undefined;
        logStreamName?: string | undefined;
        maxMemory?: number | undefined;
        name?: string | undefined;
        requestId?: string | undefined;
        version?: string | undefined;
        accountId?: string | undefined;
        outcome?: AwsLambdaTags_Outcome | undefined;
        errorExceptionMessage?: string | undefined;
        errorExceptionStacktrace?: string | undefined;
        duration?: number | undefined;
        requestBody?: string | undefined;
        responseBody?: string | undefined;
        logsStartTimeUnix?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
        logsEndTimeUnix?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
        responseMode?: AwsLambdaTags_ResponseMode | undefined;
        sqs?: ({
            queueName?: string | undefined;
            messageIds?: string[] | undefined;
        } & {
            queueName?: string | undefined;
            messageIds?: (string[] & string[] & { [K_2 in Exclude<keyof I["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
        sns?: ({
            topicName?: string | undefined;
            messageIds?: string[] | undefined;
        } & {
            topicName?: string | undefined;
            messageIds?: (string[] & string[] & { [K_4 in Exclude<keyof I["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
        } & { [K_5 in Exclude<keyof I["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
        http?: ({
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: (string[] & string[] & { [K_6 in Exclude<keyof I["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
            requestHeaderNames?: (string[] & string[] & { [K_7 in Exclude<keyof I["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & { [K_8 in Exclude<keyof I["http"], keyof HttpTags>]: never; }) | undefined;
        apiGateway?: ({
            accountId?: string | undefined;
            apiId?: string | undefined;
            apiStage?: string | undefined;
            request?: {
                id?: string | undefined;
                timeEpoch?: string | number | Long | undefined;
                pathParameterNames?: string[] | undefined;
            } | undefined;
        } & {
            accountId?: string | undefined;
            apiId?: string | undefined;
            apiStage?: string | undefined;
            request?: ({
                id?: string | undefined;
                timeEpoch?: string | number | Long | undefined;
                pathParameterNames?: string[] | undefined;
            } & {
                id?: string | undefined;
                timeEpoch?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_9 in Exclude<keyof I["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                pathParameterNames?: (string[] & string[] & { [K_10 in Exclude<keyof I["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
            } & { [K_11 in Exclude<keyof I["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
        } & { [K_12 in Exclude<keyof I["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
        httpRouter?: ({
            path?: string | undefined;
        } & {
            path?: string | undefined;
        } & { [K_13 in Exclude<keyof I["httpRouter"], "path">]: never; }) | undefined;
        initialization?: ({
            initializationDuration?: number | undefined;
        } & {
            initializationDuration?: number | undefined;
        } & { [K_14 in Exclude<keyof I["initialization"], "initializationDuration">]: never; }) | undefined;
        invocation?: ({
            invocationDuration?: number | undefined;
        } & {
            invocationDuration?: number | undefined;
        } & { [K_15 in Exclude<keyof I["invocation"], "invocationDuration">]: never; }) | undefined;
        runtime?: ({
            identifier?: string | undefined;
            version?: string | undefined;
            arn?: string | undefined;
        } & {
            identifier?: string | undefined;
            version?: string | undefined;
            arn?: string | undefined;
        } & { [K_16 in Exclude<keyof I["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
    } & { [K_17 in Exclude<keyof I, keyof AwsLambdaTags>]: never; }>(base?: I | undefined): AwsLambdaTags;
    fromPartial<I_1 extends {
        arch?: string | undefined;
        isColdstart?: boolean | undefined;
        eventType?: string | undefined;
        eventSource?: string | undefined;
        logGroup?: string | undefined;
        logStreamName?: string | undefined;
        maxMemory?: number | undefined;
        name?: string | undefined;
        requestId?: string | undefined;
        version?: string | undefined;
        accountId?: string | undefined;
        outcome?: AwsLambdaTags_Outcome | undefined;
        errorExceptionMessage?: string | undefined;
        errorExceptionStacktrace?: string | undefined;
        duration?: number | undefined;
        requestBody?: string | undefined;
        responseBody?: string | undefined;
        logsStartTimeUnix?: string | number | Long | undefined;
        logsEndTimeUnix?: string | number | Long | undefined;
        responseMode?: AwsLambdaTags_ResponseMode | undefined;
        sqs?: {
            queueName?: string | undefined;
            messageIds?: string[] | undefined;
        } | undefined;
        sns?: {
            topicName?: string | undefined;
            messageIds?: string[] | undefined;
        } | undefined;
        http?: {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } | undefined;
        apiGateway?: {
            accountId?: string | undefined;
            apiId?: string | undefined;
            apiStage?: string | undefined;
            request?: {
                id?: string | undefined;
                timeEpoch?: string | number | Long | undefined;
                pathParameterNames?: string[] | undefined;
            } | undefined;
        } | undefined;
        httpRouter?: {
            path?: string | undefined;
        } | undefined;
        initialization?: {
            initializationDuration?: number | undefined;
        } | undefined;
        invocation?: {
            invocationDuration?: number | undefined;
        } | undefined;
        runtime?: {
            identifier?: string | undefined;
            version?: string | undefined;
            arn?: string | undefined;
        } | undefined;
    } & {
        arch?: string | undefined;
        isColdstart?: boolean | undefined;
        eventType?: string | undefined;
        eventSource?: string | undefined;
        logGroup?: string | undefined;
        logStreamName?: string | undefined;
        maxMemory?: number | undefined;
        name?: string | undefined;
        requestId?: string | undefined;
        version?: string | undefined;
        accountId?: string | undefined;
        outcome?: AwsLambdaTags_Outcome | undefined;
        errorExceptionMessage?: string | undefined;
        errorExceptionStacktrace?: string | undefined;
        duration?: number | undefined;
        requestBody?: string | undefined;
        responseBody?: string | undefined;
        logsStartTimeUnix?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_18 in Exclude<keyof I_1["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
        logsEndTimeUnix?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_19 in Exclude<keyof I_1["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
        responseMode?: AwsLambdaTags_ResponseMode | undefined;
        sqs?: ({
            queueName?: string | undefined;
            messageIds?: string[] | undefined;
        } & {
            queueName?: string | undefined;
            messageIds?: (string[] & string[] & { [K_20 in Exclude<keyof I_1["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
        } & { [K_21 in Exclude<keyof I_1["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
        sns?: ({
            topicName?: string | undefined;
            messageIds?: string[] | undefined;
        } & {
            topicName?: string | undefined;
            messageIds?: (string[] & string[] & { [K_22 in Exclude<keyof I_1["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
        } & { [K_23 in Exclude<keyof I_1["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
        http?: ({
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: (string[] & string[] & { [K_24 in Exclude<keyof I_1["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
            requestHeaderNames?: (string[] & string[] & { [K_25 in Exclude<keyof I_1["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & { [K_26 in Exclude<keyof I_1["http"], keyof HttpTags>]: never; }) | undefined;
        apiGateway?: ({
            accountId?: string | undefined;
            apiId?: string | undefined;
            apiStage?: string | undefined;
            request?: {
                id?: string | undefined;
                timeEpoch?: string | number | Long | undefined;
                pathParameterNames?: string[] | undefined;
            } | undefined;
        } & {
            accountId?: string | undefined;
            apiId?: string | undefined;
            apiStage?: string | undefined;
            request?: ({
                id?: string | undefined;
                timeEpoch?: string | number | Long | undefined;
                pathParameterNames?: string[] | undefined;
            } & {
                id?: string | undefined;
                timeEpoch?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_27 in Exclude<keyof I_1["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                pathParameterNames?: (string[] & string[] & { [K_28 in Exclude<keyof I_1["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
            } & { [K_29 in Exclude<keyof I_1["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
        } & { [K_30 in Exclude<keyof I_1["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
        httpRouter?: ({
            path?: string | undefined;
        } & {
            path?: string | undefined;
        } & { [K_31 in Exclude<keyof I_1["httpRouter"], "path">]: never; }) | undefined;
        initialization?: ({
            initializationDuration?: number | undefined;
        } & {
            initializationDuration?: number | undefined;
        } & { [K_32 in Exclude<keyof I_1["initialization"], "initializationDuration">]: never; }) | undefined;
        invocation?: ({
            invocationDuration?: number | undefined;
        } & {
            invocationDuration?: number | undefined;
        } & { [K_33 in Exclude<keyof I_1["invocation"], "invocationDuration">]: never; }) | undefined;
        runtime?: ({
            identifier?: string | undefined;
            version?: string | undefined;
            arn?: string | undefined;
        } & {
            identifier?: string | undefined;
            version?: string | undefined;
            arn?: string | undefined;
        } & { [K_34 in Exclude<keyof I_1["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
    } & { [K_35 in Exclude<keyof I_1, keyof AwsLambdaTags>]: never; }>(object: I_1): AwsLambdaTags;
};
/**
 * Describe routing of incoming HTTP requests.
 * Reflects configuration of a router used to route the request
 * It can be Express.js, or API Gateway if Express.js is not detected to be used
 */
interface HttpRouterTags {
    /** The HTTP Path defined by the route handler (either express or API Gateway) */
    path: string;
}
declare const HttpRouterTags: {
    encode(message: HttpRouterTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HttpRouterTags;
    fromJSON(object: any): HttpRouterTags;
    toJSON(message: HttpRouterTags): unknown;
    create<I extends {
        path?: string | undefined;
    } & {
        path?: string | undefined;
    } & { [K in Exclude<keyof I, "path">]: never; }>(base?: I | undefined): HttpRouterTags;
    fromPartial<I_1 extends {
        path?: string | undefined;
    } & {
        path?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "path">]: never; }>(object: I_1): HttpRouterTags;
};
interface AwsSqsEventTags {
    /** Taken from the eventSourceARN */
    queueName: string;
    /** Introspected from the events records */
    messageIds: string[];
}
declare const AwsSqsEventTags: {
    encode(message: AwsSqsEventTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsSqsEventTags;
    fromJSON(object: any): AwsSqsEventTags;
    toJSON(message: AwsSqsEventTags): unknown;
    create<I extends {
        queueName?: string | undefined;
        messageIds?: string[] | undefined;
    } & {
        queueName?: string | undefined;
        messageIds?: (string[] & string[] & { [K in Exclude<keyof I["messageIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof AwsSqsEventTags>]: never; }>(base?: I | undefined): AwsSqsEventTags;
    fromPartial<I_1 extends {
        queueName?: string | undefined;
        messageIds?: string[] | undefined;
    } & {
        queueName?: string | undefined;
        messageIds?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["messageIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof AwsSqsEventTags>]: never; }>(object: I_1): AwsSqsEventTags;
};
interface AwsSnsEventTags {
    /** Taken from the TopicARN */
    topicName: string;
    /** Introspected from the events records */
    messageIds: string[];
}
declare const AwsSnsEventTags: {
    encode(message: AwsSnsEventTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsSnsEventTags;
    fromJSON(object: any): AwsSnsEventTags;
    toJSON(message: AwsSnsEventTags): unknown;
    create<I extends {
        topicName?: string | undefined;
        messageIds?: string[] | undefined;
    } & {
        topicName?: string | undefined;
        messageIds?: (string[] & string[] & { [K in Exclude<keyof I["messageIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof AwsSnsEventTags>]: never; }>(base?: I | undefined): AwsSnsEventTags;
    fromPartial<I_1 extends {
        topicName?: string | undefined;
        messageIds?: string[] | undefined;
    } & {
        topicName?: string | undefined;
        messageIds?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["messageIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof AwsSnsEventTags>]: never; }>(object: I_1): AwsSnsEventTags;
};
/** Describes the AWS Lambda runtime details */
interface AwsLambdaRuntimeTags {
    /** Runtime identifier */
    identifier: string;
    /** Runtime version */
    version: string;
    /** Runtime ARN */
    arn: string;
}
declare const AwsLambdaRuntimeTags: {
    encode(message: AwsLambdaRuntimeTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsLambdaRuntimeTags;
    fromJSON(object: any): AwsLambdaRuntimeTags;
    toJSON(message: AwsLambdaRuntimeTags): unknown;
    create<I extends {
        identifier?: string | undefined;
        version?: string | undefined;
        arn?: string | undefined;
    } & {
        identifier?: string | undefined;
        version?: string | undefined;
        arn?: string | undefined;
    } & { [K in Exclude<keyof I, keyof AwsLambdaRuntimeTags>]: never; }>(base?: I | undefined): AwsLambdaRuntimeTags;
    fromPartial<I_1 extends {
        identifier?: string | undefined;
        version?: string | undefined;
        arn?: string | undefined;
    } & {
        identifier?: string | undefined;
        version?: string | undefined;
        arn?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof AwsLambdaRuntimeTags>]: never; }>(object: I_1): AwsLambdaRuntimeTags;
};
interface AwsLambdaInitializationTags {
    /**
     * The Initialization Duration of the Lambda Function. This is one part of the billed duration.
     * Maps to the Cloudwatch Logs Report "Init Duration"
     */
    initializationDuration: number;
}
declare const AwsLambdaInitializationTags: {
    encode(message: AwsLambdaInitializationTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsLambdaInitializationTags;
    fromJSON(object: any): AwsLambdaInitializationTags;
    toJSON(message: AwsLambdaInitializationTags): unknown;
    create<I extends {
        initializationDuration?: number | undefined;
    } & {
        initializationDuration?: number | undefined;
    } & { [K in Exclude<keyof I, "initializationDuration">]: never; }>(base?: I | undefined): AwsLambdaInitializationTags;
    fromPartial<I_1 extends {
        initializationDuration?: number | undefined;
    } & {
        initializationDuration?: number | undefined;
    } & { [K_1 in Exclude<keyof I_1, "initializationDuration">]: never; }>(object: I_1): AwsLambdaInitializationTags;
};
interface AwsLambdaInvocationTags {
    /**
     * The Invocation Duration of the Lambda Function. This is one part of the billed duration.
     * Maps to the Cloudwatch Logs Report "Duration"
     */
    invocationDuration: number;
}
declare const AwsLambdaInvocationTags: {
    encode(message: AwsLambdaInvocationTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsLambdaInvocationTags;
    fromJSON(object: any): AwsLambdaInvocationTags;
    toJSON(message: AwsLambdaInvocationTags): unknown;
    create<I extends {
        invocationDuration?: number | undefined;
    } & {
        invocationDuration?: number | undefined;
    } & { [K in Exclude<keyof I, "invocationDuration">]: never; }>(base?: I | undefined): AwsLambdaInvocationTags;
    fromPartial<I_1 extends {
        invocationDuration?: number | undefined;
    } & {
        invocationDuration?: number | undefined;
    } & { [K_1 in Exclude<keyof I_1, "invocationDuration">]: never; }>(object: I_1): AwsLambdaInvocationTags;
};
interface AwsSdkTags {
    /** The AWS Region this SDK call is being made against. */
    region?: string | undefined;
    /** AWS Authentication signature version of the request. */
    signatureVersion?: string | undefined;
    /** The name of the service to which a request is made. */
    service: string;
    /** The name of the operation corresponding to the request. */
    operation: string;
    /** The unique ID of the request. */
    requestId?: string | undefined;
    /** An optional error returned from the AWS APIs. */
    error?: string | undefined;
    dynamodb?: AwsSdkDynamodbTags | undefined;
    sqs?: AwsSdkSqsTags | undefined;
    sns?: AwsSdkSnsTags | undefined;
}
declare const AwsSdkTags: {
    encode(message: AwsSdkTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsSdkTags;
    fromJSON(object: any): AwsSdkTags;
    toJSON(message: AwsSdkTags): unknown;
    create<I extends {
        region?: string | undefined;
        signatureVersion?: string | undefined;
        service?: string | undefined;
        operation?: string | undefined;
        requestId?: string | undefined;
        error?: string | undefined;
        dynamodb?: {
            tableName?: string | undefined;
            projection?: string | undefined;
            scanForward?: boolean | undefined;
            attributesToGet?: string[] | undefined;
            consistentRead?: boolean | undefined;
            indexName?: string | undefined;
            limit?: number | undefined;
            select?: string | undefined;
            segment?: number | undefined;
            totalSegments?: string | number | Long | undefined;
            filter?: string | undefined;
            keyCondition?: string | undefined;
            exclusiveStartKey?: string | undefined;
            attributeValues?: string | undefined;
            count?: string | number | Long | undefined;
            scannedCount?: string | number | Long | undefined;
        } | undefined;
        sqs?: {
            queueName?: string | undefined;
            messageIds?: string[] | undefined;
        } | undefined;
        sns?: {
            topicName?: string | undefined;
            messageIds?: string[] | undefined;
        } | undefined;
    } & {
        region?: string | undefined;
        signatureVersion?: string | undefined;
        service?: string | undefined;
        operation?: string | undefined;
        requestId?: string | undefined;
        error?: string | undefined;
        dynamodb?: ({
            tableName?: string | undefined;
            projection?: string | undefined;
            scanForward?: boolean | undefined;
            attributesToGet?: string[] | undefined;
            consistentRead?: boolean | undefined;
            indexName?: string | undefined;
            limit?: number | undefined;
            select?: string | undefined;
            segment?: number | undefined;
            totalSegments?: string | number | Long | undefined;
            filter?: string | undefined;
            keyCondition?: string | undefined;
            exclusiveStartKey?: string | undefined;
            attributeValues?: string | undefined;
            count?: string | number | Long | undefined;
            scannedCount?: string | number | Long | undefined;
        } & {
            tableName?: string | undefined;
            projection?: string | undefined;
            scanForward?: boolean | undefined;
            attributesToGet?: (string[] & string[] & { [K in Exclude<keyof I["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
            consistentRead?: boolean | undefined;
            indexName?: string | undefined;
            limit?: number | undefined;
            select?: string | undefined;
            segment?: number | undefined;
            totalSegments?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_1 in Exclude<keyof I["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
            filter?: string | undefined;
            keyCondition?: string | undefined;
            exclusiveStartKey?: string | undefined;
            attributeValues?: string | undefined;
            count?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_2 in Exclude<keyof I["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
            scannedCount?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_3 in Exclude<keyof I["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
        sqs?: ({
            queueName?: string | undefined;
            messageIds?: string[] | undefined;
        } & {
            queueName?: string | undefined;
            messageIds?: (string[] & string[] & { [K_5 in Exclude<keyof I["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
        sns?: ({
            topicName?: string | undefined;
            messageIds?: string[] | undefined;
        } & {
            topicName?: string | undefined;
            messageIds?: (string[] & string[] & { [K_7 in Exclude<keyof I["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
        } & { [K_8 in Exclude<keyof I["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I, keyof AwsSdkTags>]: never; }>(base?: I | undefined): AwsSdkTags;
    fromPartial<I_1 extends {
        region?: string | undefined;
        signatureVersion?: string | undefined;
        service?: string | undefined;
        operation?: string | undefined;
        requestId?: string | undefined;
        error?: string | undefined;
        dynamodb?: {
            tableName?: string | undefined;
            projection?: string | undefined;
            scanForward?: boolean | undefined;
            attributesToGet?: string[] | undefined;
            consistentRead?: boolean | undefined;
            indexName?: string | undefined;
            limit?: number | undefined;
            select?: string | undefined;
            segment?: number | undefined;
            totalSegments?: string | number | Long | undefined;
            filter?: string | undefined;
            keyCondition?: string | undefined;
            exclusiveStartKey?: string | undefined;
            attributeValues?: string | undefined;
            count?: string | number | Long | undefined;
            scannedCount?: string | number | Long | undefined;
        } | undefined;
        sqs?: {
            queueName?: string | undefined;
            messageIds?: string[] | undefined;
        } | undefined;
        sns?: {
            topicName?: string | undefined;
            messageIds?: string[] | undefined;
        } | undefined;
    } & {
        region?: string | undefined;
        signatureVersion?: string | undefined;
        service?: string | undefined;
        operation?: string | undefined;
        requestId?: string | undefined;
        error?: string | undefined;
        dynamodb?: ({
            tableName?: string | undefined;
            projection?: string | undefined;
            scanForward?: boolean | undefined;
            attributesToGet?: string[] | undefined;
            consistentRead?: boolean | undefined;
            indexName?: string | undefined;
            limit?: number | undefined;
            select?: string | undefined;
            segment?: number | undefined;
            totalSegments?: string | number | Long | undefined;
            filter?: string | undefined;
            keyCondition?: string | undefined;
            exclusiveStartKey?: string | undefined;
            attributeValues?: string | undefined;
            count?: string | number | Long | undefined;
            scannedCount?: string | number | Long | undefined;
        } & {
            tableName?: string | undefined;
            projection?: string | undefined;
            scanForward?: boolean | undefined;
            attributesToGet?: (string[] & string[] & { [K_10 in Exclude<keyof I_1["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
            consistentRead?: boolean | undefined;
            indexName?: string | undefined;
            limit?: number | undefined;
            select?: string | undefined;
            segment?: number | undefined;
            totalSegments?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_11 in Exclude<keyof I_1["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
            filter?: string | undefined;
            keyCondition?: string | undefined;
            exclusiveStartKey?: string | undefined;
            attributeValues?: string | undefined;
            count?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_12 in Exclude<keyof I_1["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
            scannedCount?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_13 in Exclude<keyof I_1["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
        } & { [K_14 in Exclude<keyof I_1["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
        sqs?: ({
            queueName?: string | undefined;
            messageIds?: string[] | undefined;
        } & {
            queueName?: string | undefined;
            messageIds?: (string[] & string[] & { [K_15 in Exclude<keyof I_1["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
        } & { [K_16 in Exclude<keyof I_1["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
        sns?: ({
            topicName?: string | undefined;
            messageIds?: string[] | undefined;
        } & {
            topicName?: string | undefined;
            messageIds?: (string[] & string[] & { [K_17 in Exclude<keyof I_1["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
        } & { [K_18 in Exclude<keyof I_1["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
    } & { [K_19 in Exclude<keyof I_1, keyof AwsSdkTags>]: never; }>(object: I_1): AwsSdkTags;
};
interface AwsSdkDynamodbTags {
    /** The DynamoDB table name */
    tableName?: string | undefined;
    /** The value of the ProjectionExpression request parameter. */
    projection?: string | undefined;
    /** The value of the ScanIndexForward request parameter. */
    scanForward?: boolean | undefined;
    /** The value of the AttributesToGet request parameter. */
    attributesToGet: string[];
    /** The value of the ConsistentRead request parameter. */
    consistentRead?: boolean | undefined;
    /** The value of the IndexName request parameter. */
    indexName?: string | undefined;
    /** The value of the Limit request parameter. */
    limit?: number | undefined;
    /** The value of the Select request parameter. */
    select?: string | undefined;
    /** The value of the Segment request parameter. */
    segment?: number | undefined;
    /** The value of the TotalSegments request parameter. */
    totalSegments?: Long | undefined;
    /** The value of the FilterExpression request parameter. */
    filter?: string | undefined;
    /** The value of the KeyConditionExpression request parameter. */
    keyCondition?: string | undefined;
    /** JSON string of the ExclusiveStartKey request parameter. */
    exclusiveStartKey?: string | undefined;
    /** JSON string of the ExpressionAttributeValues request parameter. */
    attributeValues?: string | undefined;
    /** The value of the Count response parameter. */
    count?: Long | undefined;
    /** The value of the ScannedCount response parameter. */
    scannedCount?: Long | undefined;
}
declare const AwsSdkDynamodbTags: {
    encode(message: AwsSdkDynamodbTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsSdkDynamodbTags;
    fromJSON(object: any): AwsSdkDynamodbTags;
    toJSON(message: AwsSdkDynamodbTags): unknown;
    create<I extends {
        tableName?: string | undefined;
        projection?: string | undefined;
        scanForward?: boolean | undefined;
        attributesToGet?: string[] | undefined;
        consistentRead?: boolean | undefined;
        indexName?: string | undefined;
        limit?: number | undefined;
        select?: string | undefined;
        segment?: number | undefined;
        totalSegments?: string | number | Long | undefined;
        filter?: string | undefined;
        keyCondition?: string | undefined;
        exclusiveStartKey?: string | undefined;
        attributeValues?: string | undefined;
        count?: string | number | Long | undefined;
        scannedCount?: string | number | Long | undefined;
    } & {
        tableName?: string | undefined;
        projection?: string | undefined;
        scanForward?: boolean | undefined;
        attributesToGet?: (string[] & string[] & { [K in Exclude<keyof I["attributesToGet"], keyof string[]>]: never; }) | undefined;
        consistentRead?: boolean | undefined;
        indexName?: string | undefined;
        limit?: number | undefined;
        select?: string | undefined;
        segment?: number | undefined;
        totalSegments?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["totalSegments"], keyof Long>]: never; }) | undefined;
        filter?: string | undefined;
        keyCondition?: string | undefined;
        exclusiveStartKey?: string | undefined;
        attributeValues?: string | undefined;
        count?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I["count"], keyof Long>]: never; }) | undefined;
        scannedCount?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_3 in Exclude<keyof I["scannedCount"], keyof Long>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof AwsSdkDynamodbTags>]: never; }>(base?: I | undefined): AwsSdkDynamodbTags;
    fromPartial<I_1 extends {
        tableName?: string | undefined;
        projection?: string | undefined;
        scanForward?: boolean | undefined;
        attributesToGet?: string[] | undefined;
        consistentRead?: boolean | undefined;
        indexName?: string | undefined;
        limit?: number | undefined;
        select?: string | undefined;
        segment?: number | undefined;
        totalSegments?: string | number | Long | undefined;
        filter?: string | undefined;
        keyCondition?: string | undefined;
        exclusiveStartKey?: string | undefined;
        attributeValues?: string | undefined;
        count?: string | number | Long | undefined;
        scannedCount?: string | number | Long | undefined;
    } & {
        tableName?: string | undefined;
        projection?: string | undefined;
        scanForward?: boolean | undefined;
        attributesToGet?: (string[] & string[] & { [K_5 in Exclude<keyof I_1["attributesToGet"], keyof string[]>]: never; }) | undefined;
        consistentRead?: boolean | undefined;
        indexName?: string | undefined;
        limit?: number | undefined;
        select?: string | undefined;
        segment?: number | undefined;
        totalSegments?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_6 in Exclude<keyof I_1["totalSegments"], keyof Long>]: never; }) | undefined;
        filter?: string | undefined;
        keyCondition?: string | undefined;
        exclusiveStartKey?: string | undefined;
        attributeValues?: string | undefined;
        count?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_7 in Exclude<keyof I_1["count"], keyof Long>]: never; }) | undefined;
        scannedCount?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_8 in Exclude<keyof I_1["scannedCount"], keyof Long>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I_1, keyof AwsSdkDynamodbTags>]: never; }>(object: I_1): AwsSdkDynamodbTags;
};
interface AwsSdkSqsTags {
    /** The SQS queue name */
    queueName?: string | undefined;
    /** The message IDs provided in the SDK operation response. */
    messageIds: string[];
}
declare const AwsSdkSqsTags: {
    encode(message: AwsSdkSqsTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsSdkSqsTags;
    fromJSON(object: any): AwsSdkSqsTags;
    toJSON(message: AwsSdkSqsTags): unknown;
    create<I extends {
        queueName?: string | undefined;
        messageIds?: string[] | undefined;
    } & {
        queueName?: string | undefined;
        messageIds?: (string[] & string[] & { [K in Exclude<keyof I["messageIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof AwsSdkSqsTags>]: never; }>(base?: I | undefined): AwsSdkSqsTags;
    fromPartial<I_1 extends {
        queueName?: string | undefined;
        messageIds?: string[] | undefined;
    } & {
        queueName?: string | undefined;
        messageIds?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["messageIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof AwsSdkSqsTags>]: never; }>(object: I_1): AwsSdkSqsTags;
};
interface AwsSdkSnsTags {
    /** The SNS Topic name taken from the TopicArn request parameter. */
    topicName?: string | undefined;
    /** The message IDs provided in the SDK operation response. */
    messageIds: string[];
}
declare const AwsSdkSnsTags: {
    encode(message: AwsSdkSnsTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwsSdkSnsTags;
    fromJSON(object: any): AwsSdkSnsTags;
    toJSON(message: AwsSdkSnsTags): unknown;
    create<I extends {
        topicName?: string | undefined;
        messageIds?: string[] | undefined;
    } & {
        topicName?: string | undefined;
        messageIds?: (string[] & string[] & { [K in Exclude<keyof I["messageIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof AwsSdkSnsTags>]: never; }>(base?: I | undefined): AwsSdkSnsTags;
    fromPartial<I_1 extends {
        topicName?: string | undefined;
        messageIds?: string[] | undefined;
    } & {
        topicName?: string | undefined;
        messageIds?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["messageIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof AwsSdkSnsTags>]: never; }>(object: I_1): AwsSdkSnsTags;
};

/** @validation_root */
interface Tags {
    /** These tags are used an AWS resource/sdk is the producer of the span */
    aws?: AwsTags | undefined;
    /** These tags are used when an http library is making an http request */
    http?: HttpTags | undefined;
    /** These tags are used when an http library is making a https request */
    https?: HttpTags | undefined;
    /** These sdk tags are added at ingest time so we know where the data was generated from */
    sdk?: SdkTags | undefined;
    /**
     * Environment is added to all schemas during ingest as part of our data enrichment process
     * @validation_top_level
     */
    environment?: string | undefined;
    /**
     * Namespace is added to all schemas during ingest as part of our data enrichment process
     * @validation_top_level
     */
    namespace?: string | undefined;
    /**
     * OrgId is added to all schemas during ingest as part of our data enrichment process
     * @validation_top_level
     * @validation_single_string
     */
    orgId?: string | undefined;
    /** These tags are used when an error has occured and is reported on the event. */
    error?: ErrorTags | undefined;
    /** These tags are used when a warning has occured and is reported on the event. */
    warning?: WarningTags | undefined;
    /** These tags are used when noteworthy situation occurs and is reported on the event. */
    notice?: NoticeTags | undefined;
}
declare const Tags: {
    encode(message: Tags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Tags;
    fromJSON(object: any): Tags;
    toJSON(message: Tags): unknown;
    create<I extends {
        aws?: {
            lambda?: {
                arch?: string | undefined;
                isColdstart?: boolean | undefined;
                eventType?: string | undefined;
                eventSource?: string | undefined;
                logGroup?: string | undefined;
                logStreamName?: string | undefined;
                maxMemory?: number | undefined;
                name?: string | undefined;
                requestId?: string | undefined;
                version?: string | undefined;
                accountId?: string | undefined;
                outcome?: AwsLambdaTags_Outcome | undefined;
                errorExceptionMessage?: string | undefined;
                errorExceptionStacktrace?: string | undefined;
                duration?: number | undefined;
                requestBody?: string | undefined;
                responseBody?: string | undefined;
                logsStartTimeUnix?: string | number | Long | undefined;
                logsEndTimeUnix?: string | number | Long | undefined;
                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                apiGateway?: {
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: {
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } | undefined;
                } | undefined;
                httpRouter?: {
                    path?: string | undefined;
                } | undefined;
                initialization?: {
                    initializationDuration?: number | undefined;
                } | undefined;
                invocation?: {
                    invocationDuration?: number | undefined;
                } | undefined;
                runtime?: {
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } | undefined;
            } | undefined;
            sdk?: {
                region?: string | undefined;
                signatureVersion?: string | undefined;
                service?: string | undefined;
                operation?: string | undefined;
                requestId?: string | undefined;
                error?: string | undefined;
                dynamodb?: {
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: string[] | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | Long | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | Long | undefined;
                    scannedCount?: string | number | Long | undefined;
                } | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
            } | undefined;
            accountId?: string | undefined;
            region?: string | undefined;
            requestId?: string | undefined;
            resourceName?: string | undefined;
            sequenceId?: string | undefined;
            logGroup?: string | undefined;
            logStream?: string | undefined;
        } | undefined;
        http?: {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } | undefined;
        https?: {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } | undefined;
        sdk?: {
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } | undefined;
        environment?: string | undefined;
        namespace?: string | undefined;
        orgId?: string | undefined;
        error?: {
            name?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: ErrorTags_ErrorType | undefined;
        } | undefined;
        warning?: {
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: WarningTags_WarningType | undefined;
        } | undefined;
        notice?: {
            message?: string | undefined;
            type?: NoticeTags_NoticeType | undefined;
        } | undefined;
    } & {
        aws?: ({
            lambda?: {
                arch?: string | undefined;
                isColdstart?: boolean | undefined;
                eventType?: string | undefined;
                eventSource?: string | undefined;
                logGroup?: string | undefined;
                logStreamName?: string | undefined;
                maxMemory?: number | undefined;
                name?: string | undefined;
                requestId?: string | undefined;
                version?: string | undefined;
                accountId?: string | undefined;
                outcome?: AwsLambdaTags_Outcome | undefined;
                errorExceptionMessage?: string | undefined;
                errorExceptionStacktrace?: string | undefined;
                duration?: number | undefined;
                requestBody?: string | undefined;
                responseBody?: string | undefined;
                logsStartTimeUnix?: string | number | Long | undefined;
                logsEndTimeUnix?: string | number | Long | undefined;
                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                apiGateway?: {
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: {
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } | undefined;
                } | undefined;
                httpRouter?: {
                    path?: string | undefined;
                } | undefined;
                initialization?: {
                    initializationDuration?: number | undefined;
                } | undefined;
                invocation?: {
                    invocationDuration?: number | undefined;
                } | undefined;
                runtime?: {
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } | undefined;
            } | undefined;
            sdk?: {
                region?: string | undefined;
                signatureVersion?: string | undefined;
                service?: string | undefined;
                operation?: string | undefined;
                requestId?: string | undefined;
                error?: string | undefined;
                dynamodb?: {
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: string[] | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | Long | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | Long | undefined;
                    scannedCount?: string | number | Long | undefined;
                } | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
            } | undefined;
            accountId?: string | undefined;
            region?: string | undefined;
            requestId?: string | undefined;
            resourceName?: string | undefined;
            sequenceId?: string | undefined;
            logGroup?: string | undefined;
            logStream?: string | undefined;
        } & {
            lambda?: ({
                arch?: string | undefined;
                isColdstart?: boolean | undefined;
                eventType?: string | undefined;
                eventSource?: string | undefined;
                logGroup?: string | undefined;
                logStreamName?: string | undefined;
                maxMemory?: number | undefined;
                name?: string | undefined;
                requestId?: string | undefined;
                version?: string | undefined;
                accountId?: string | undefined;
                outcome?: AwsLambdaTags_Outcome | undefined;
                errorExceptionMessage?: string | undefined;
                errorExceptionStacktrace?: string | undefined;
                duration?: number | undefined;
                requestBody?: string | undefined;
                responseBody?: string | undefined;
                logsStartTimeUnix?: string | number | Long | undefined;
                logsEndTimeUnix?: string | number | Long | undefined;
                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                apiGateway?: {
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: {
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } | undefined;
                } | undefined;
                httpRouter?: {
                    path?: string | undefined;
                } | undefined;
                initialization?: {
                    initializationDuration?: number | undefined;
                } | undefined;
                invocation?: {
                    invocationDuration?: number | undefined;
                } | undefined;
                runtime?: {
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } | undefined;
            } & {
                arch?: string | undefined;
                isColdstart?: boolean | undefined;
                eventType?: string | undefined;
                eventSource?: string | undefined;
                logGroup?: string | undefined;
                logStreamName?: string | undefined;
                maxMemory?: number | undefined;
                name?: string | undefined;
                requestId?: string | undefined;
                version?: string | undefined;
                accountId?: string | undefined;
                outcome?: AwsLambdaTags_Outcome | undefined;
                errorExceptionMessage?: string | undefined;
                errorExceptionStacktrace?: string | undefined;
                duration?: number | undefined;
                requestBody?: string | undefined;
                responseBody?: string | undefined;
                logsStartTimeUnix?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K in Exclude<keyof I["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                logsEndTimeUnix?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_1 in Exclude<keyof I["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                sqs?: ({
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } & {
                    queueName?: string | undefined;
                    messageIds?: (string[] & string[] & { [K_2 in Exclude<keyof I["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                } & { [K_3 in Exclude<keyof I["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                sns?: ({
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } & {
                    topicName?: string | undefined;
                    messageIds?: (string[] & string[] & { [K_4 in Exclude<keyof I["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                } & { [K_5 in Exclude<keyof I["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_6 in Exclude<keyof I["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_7 in Exclude<keyof I["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_8 in Exclude<keyof I["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                apiGateway?: ({
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: {
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } | undefined;
                } & {
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: ({
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } & {
                        id?: string | undefined;
                        timeEpoch?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_9 in Exclude<keyof I["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                        pathParameterNames?: (string[] & string[] & { [K_10 in Exclude<keyof I["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                    } & { [K_11 in Exclude<keyof I["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                } & { [K_12 in Exclude<keyof I["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                httpRouter?: ({
                    path?: string | undefined;
                } & {
                    path?: string | undefined;
                } & { [K_13 in Exclude<keyof I["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                initialization?: ({
                    initializationDuration?: number | undefined;
                } & {
                    initializationDuration?: number | undefined;
                } & { [K_14 in Exclude<keyof I["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                invocation?: ({
                    invocationDuration?: number | undefined;
                } & {
                    invocationDuration?: number | undefined;
                } & { [K_15 in Exclude<keyof I["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                runtime?: ({
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } & {
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } & { [K_16 in Exclude<keyof I["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
            } & { [K_17 in Exclude<keyof I["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
            sdk?: ({
                region?: string | undefined;
                signatureVersion?: string | undefined;
                service?: string | undefined;
                operation?: string | undefined;
                requestId?: string | undefined;
                error?: string | undefined;
                dynamodb?: {
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: string[] | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | Long | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | Long | undefined;
                    scannedCount?: string | number | Long | undefined;
                } | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
            } & {
                region?: string | undefined;
                signatureVersion?: string | undefined;
                service?: string | undefined;
                operation?: string | undefined;
                requestId?: string | undefined;
                error?: string | undefined;
                dynamodb?: ({
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: string[] | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | Long | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | Long | undefined;
                    scannedCount?: string | number | Long | undefined;
                } & {
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: (string[] & string[] & { [K_18 in Exclude<keyof I["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_19 in Exclude<keyof I["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_20 in Exclude<keyof I["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                    scannedCount?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_21 in Exclude<keyof I["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                } & { [K_22 in Exclude<keyof I["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                sqs?: ({
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } & {
                    queueName?: string | undefined;
                    messageIds?: (string[] & string[] & { [K_23 in Exclude<keyof I["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                } & { [K_24 in Exclude<keyof I["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                sns?: ({
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } & {
                    topicName?: string | undefined;
                    messageIds?: (string[] & string[] & { [K_25 in Exclude<keyof I["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                } & { [K_26 in Exclude<keyof I["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
            } & { [K_27 in Exclude<keyof I["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
            accountId?: string | undefined;
            region?: string | undefined;
            requestId?: string | undefined;
            resourceName?: string | undefined;
            sequenceId?: string | undefined;
            logGroup?: string | undefined;
            logStream?: string | undefined;
        } & { [K_28 in Exclude<keyof I["aws"], keyof AwsTags>]: never; }) | undefined;
        http?: ({
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: (string[] & string[] & { [K_29 in Exclude<keyof I["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
            requestHeaderNames?: (string[] & string[] & { [K_30 in Exclude<keyof I["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & { [K_31 in Exclude<keyof I["http"], keyof HttpTags>]: never; }) | undefined;
        https?: ({
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: (string[] & string[] & { [K_32 in Exclude<keyof I["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
            requestHeaderNames?: (string[] & string[] & { [K_33 in Exclude<keyof I["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & { [K_34 in Exclude<keyof I["https"], keyof HttpTags>]: never; }) | undefined;
        sdk?: ({
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } & {
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } & { [K_35 in Exclude<keyof I["sdk"], keyof SdkTags>]: never; }) | undefined;
        environment?: string | undefined;
        namespace?: string | undefined;
        orgId?: string | undefined;
        error?: ({
            name?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: ErrorTags_ErrorType | undefined;
        } & {
            name?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: ErrorTags_ErrorType | undefined;
        } & { [K_36 in Exclude<keyof I["error"], keyof ErrorTags>]: never; }) | undefined;
        warning?: ({
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: WarningTags_WarningType | undefined;
        } & {
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: WarningTags_WarningType | undefined;
        } & { [K_37 in Exclude<keyof I["warning"], keyof WarningTags>]: never; }) | undefined;
        notice?: ({
            message?: string | undefined;
            type?: NoticeTags_NoticeType | undefined;
        } & {
            message?: string | undefined;
            type?: NoticeTags_NoticeType | undefined;
        } & { [K_38 in Exclude<keyof I["notice"], keyof NoticeTags>]: never; }) | undefined;
    } & { [K_39 in Exclude<keyof I, keyof Tags>]: never; }>(base?: I | undefined): Tags;
    fromPartial<I_1 extends {
        aws?: {
            lambda?: {
                arch?: string | undefined;
                isColdstart?: boolean | undefined;
                eventType?: string | undefined;
                eventSource?: string | undefined;
                logGroup?: string | undefined;
                logStreamName?: string | undefined;
                maxMemory?: number | undefined;
                name?: string | undefined;
                requestId?: string | undefined;
                version?: string | undefined;
                accountId?: string | undefined;
                outcome?: AwsLambdaTags_Outcome | undefined;
                errorExceptionMessage?: string | undefined;
                errorExceptionStacktrace?: string | undefined;
                duration?: number | undefined;
                requestBody?: string | undefined;
                responseBody?: string | undefined;
                logsStartTimeUnix?: string | number | Long | undefined;
                logsEndTimeUnix?: string | number | Long | undefined;
                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                apiGateway?: {
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: {
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } | undefined;
                } | undefined;
                httpRouter?: {
                    path?: string | undefined;
                } | undefined;
                initialization?: {
                    initializationDuration?: number | undefined;
                } | undefined;
                invocation?: {
                    invocationDuration?: number | undefined;
                } | undefined;
                runtime?: {
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } | undefined;
            } | undefined;
            sdk?: {
                region?: string | undefined;
                signatureVersion?: string | undefined;
                service?: string | undefined;
                operation?: string | undefined;
                requestId?: string | undefined;
                error?: string | undefined;
                dynamodb?: {
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: string[] | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | Long | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | Long | undefined;
                    scannedCount?: string | number | Long | undefined;
                } | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
            } | undefined;
            accountId?: string | undefined;
            region?: string | undefined;
            requestId?: string | undefined;
            resourceName?: string | undefined;
            sequenceId?: string | undefined;
            logGroup?: string | undefined;
            logStream?: string | undefined;
        } | undefined;
        http?: {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } | undefined;
        https?: {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } | undefined;
        sdk?: {
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } | undefined;
        environment?: string | undefined;
        namespace?: string | undefined;
        orgId?: string | undefined;
        error?: {
            name?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: ErrorTags_ErrorType | undefined;
        } | undefined;
        warning?: {
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: WarningTags_WarningType | undefined;
        } | undefined;
        notice?: {
            message?: string | undefined;
            type?: NoticeTags_NoticeType | undefined;
        } | undefined;
    } & {
        aws?: ({
            lambda?: {
                arch?: string | undefined;
                isColdstart?: boolean | undefined;
                eventType?: string | undefined;
                eventSource?: string | undefined;
                logGroup?: string | undefined;
                logStreamName?: string | undefined;
                maxMemory?: number | undefined;
                name?: string | undefined;
                requestId?: string | undefined;
                version?: string | undefined;
                accountId?: string | undefined;
                outcome?: AwsLambdaTags_Outcome | undefined;
                errorExceptionMessage?: string | undefined;
                errorExceptionStacktrace?: string | undefined;
                duration?: number | undefined;
                requestBody?: string | undefined;
                responseBody?: string | undefined;
                logsStartTimeUnix?: string | number | Long | undefined;
                logsEndTimeUnix?: string | number | Long | undefined;
                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                apiGateway?: {
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: {
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } | undefined;
                } | undefined;
                httpRouter?: {
                    path?: string | undefined;
                } | undefined;
                initialization?: {
                    initializationDuration?: number | undefined;
                } | undefined;
                invocation?: {
                    invocationDuration?: number | undefined;
                } | undefined;
                runtime?: {
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } | undefined;
            } | undefined;
            sdk?: {
                region?: string | undefined;
                signatureVersion?: string | undefined;
                service?: string | undefined;
                operation?: string | undefined;
                requestId?: string | undefined;
                error?: string | undefined;
                dynamodb?: {
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: string[] | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | Long | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | Long | undefined;
                    scannedCount?: string | number | Long | undefined;
                } | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
            } | undefined;
            accountId?: string | undefined;
            region?: string | undefined;
            requestId?: string | undefined;
            resourceName?: string | undefined;
            sequenceId?: string | undefined;
            logGroup?: string | undefined;
            logStream?: string | undefined;
        } & {
            lambda?: ({
                arch?: string | undefined;
                isColdstart?: boolean | undefined;
                eventType?: string | undefined;
                eventSource?: string | undefined;
                logGroup?: string | undefined;
                logStreamName?: string | undefined;
                maxMemory?: number | undefined;
                name?: string | undefined;
                requestId?: string | undefined;
                version?: string | undefined;
                accountId?: string | undefined;
                outcome?: AwsLambdaTags_Outcome | undefined;
                errorExceptionMessage?: string | undefined;
                errorExceptionStacktrace?: string | undefined;
                duration?: number | undefined;
                requestBody?: string | undefined;
                responseBody?: string | undefined;
                logsStartTimeUnix?: string | number | Long | undefined;
                logsEndTimeUnix?: string | number | Long | undefined;
                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                apiGateway?: {
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: {
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } | undefined;
                } | undefined;
                httpRouter?: {
                    path?: string | undefined;
                } | undefined;
                initialization?: {
                    initializationDuration?: number | undefined;
                } | undefined;
                invocation?: {
                    invocationDuration?: number | undefined;
                } | undefined;
                runtime?: {
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } | undefined;
            } & {
                arch?: string | undefined;
                isColdstart?: boolean | undefined;
                eventType?: string | undefined;
                eventSource?: string | undefined;
                logGroup?: string | undefined;
                logStreamName?: string | undefined;
                maxMemory?: number | undefined;
                name?: string | undefined;
                requestId?: string | undefined;
                version?: string | undefined;
                accountId?: string | undefined;
                outcome?: AwsLambdaTags_Outcome | undefined;
                errorExceptionMessage?: string | undefined;
                errorExceptionStacktrace?: string | undefined;
                duration?: number | undefined;
                requestBody?: string | undefined;
                responseBody?: string | undefined;
                logsStartTimeUnix?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_40 in Exclude<keyof I_1["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                logsEndTimeUnix?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_41 in Exclude<keyof I_1["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                sqs?: ({
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } & {
                    queueName?: string | undefined;
                    messageIds?: (string[] & string[] & { [K_42 in Exclude<keyof I_1["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                } & { [K_43 in Exclude<keyof I_1["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                sns?: ({
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } & {
                    topicName?: string | undefined;
                    messageIds?: (string[] & string[] & { [K_44 in Exclude<keyof I_1["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                } & { [K_45 in Exclude<keyof I_1["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_46 in Exclude<keyof I_1["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_47 in Exclude<keyof I_1["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_48 in Exclude<keyof I_1["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                apiGateway?: ({
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: {
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } | undefined;
                } & {
                    accountId?: string | undefined;
                    apiId?: string | undefined;
                    apiStage?: string | undefined;
                    request?: ({
                        id?: string | undefined;
                        timeEpoch?: string | number | Long | undefined;
                        pathParameterNames?: string[] | undefined;
                    } & {
                        id?: string | undefined;
                        timeEpoch?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_49 in Exclude<keyof I_1["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                        pathParameterNames?: (string[] & string[] & { [K_50 in Exclude<keyof I_1["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                    } & { [K_51 in Exclude<keyof I_1["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                } & { [K_52 in Exclude<keyof I_1["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                httpRouter?: ({
                    path?: string | undefined;
                } & {
                    path?: string | undefined;
                } & { [K_53 in Exclude<keyof I_1["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                initialization?: ({
                    initializationDuration?: number | undefined;
                } & {
                    initializationDuration?: number | undefined;
                } & { [K_54 in Exclude<keyof I_1["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                invocation?: ({
                    invocationDuration?: number | undefined;
                } & {
                    invocationDuration?: number | undefined;
                } & { [K_55 in Exclude<keyof I_1["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                runtime?: ({
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } & {
                    identifier?: string | undefined;
                    version?: string | undefined;
                    arn?: string | undefined;
                } & { [K_56 in Exclude<keyof I_1["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
            } & { [K_57 in Exclude<keyof I_1["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
            sdk?: ({
                region?: string | undefined;
                signatureVersion?: string | undefined;
                service?: string | undefined;
                operation?: string | undefined;
                requestId?: string | undefined;
                error?: string | undefined;
                dynamodb?: {
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: string[] | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | Long | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | Long | undefined;
                    scannedCount?: string | number | Long | undefined;
                } | undefined;
                sqs?: {
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
                sns?: {
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } | undefined;
            } & {
                region?: string | undefined;
                signatureVersion?: string | undefined;
                service?: string | undefined;
                operation?: string | undefined;
                requestId?: string | undefined;
                error?: string | undefined;
                dynamodb?: ({
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: string[] | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | Long | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | Long | undefined;
                    scannedCount?: string | number | Long | undefined;
                } & {
                    tableName?: string | undefined;
                    projection?: string | undefined;
                    scanForward?: boolean | undefined;
                    attributesToGet?: (string[] & string[] & { [K_58 in Exclude<keyof I_1["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                    consistentRead?: boolean | undefined;
                    indexName?: string | undefined;
                    limit?: number | undefined;
                    select?: string | undefined;
                    segment?: number | undefined;
                    totalSegments?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_59 in Exclude<keyof I_1["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                    filter?: string | undefined;
                    keyCondition?: string | undefined;
                    exclusiveStartKey?: string | undefined;
                    attributeValues?: string | undefined;
                    count?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_60 in Exclude<keyof I_1["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                    scannedCount?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_61 in Exclude<keyof I_1["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                } & { [K_62 in Exclude<keyof I_1["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                sqs?: ({
                    queueName?: string | undefined;
                    messageIds?: string[] | undefined;
                } & {
                    queueName?: string | undefined;
                    messageIds?: (string[] & string[] & { [K_63 in Exclude<keyof I_1["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                } & { [K_64 in Exclude<keyof I_1["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                sns?: ({
                    topicName?: string | undefined;
                    messageIds?: string[] | undefined;
                } & {
                    topicName?: string | undefined;
                    messageIds?: (string[] & string[] & { [K_65 in Exclude<keyof I_1["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                } & { [K_66 in Exclude<keyof I_1["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
            } & { [K_67 in Exclude<keyof I_1["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
            accountId?: string | undefined;
            region?: string | undefined;
            requestId?: string | undefined;
            resourceName?: string | undefined;
            sequenceId?: string | undefined;
            logGroup?: string | undefined;
            logStream?: string | undefined;
        } & { [K_68 in Exclude<keyof I_1["aws"], keyof AwsTags>]: never; }) | undefined;
        http?: ({
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: (string[] & string[] & { [K_69 in Exclude<keyof I_1["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
            requestHeaderNames?: (string[] & string[] & { [K_70 in Exclude<keyof I_1["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & { [K_71 in Exclude<keyof I_1["http"], keyof HttpTags>]: never; }) | undefined;
        https?: ({
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: string[] | undefined;
            requestHeaderNames?: string[] | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & {
            method?: string | undefined;
            protocol?: string | undefined;
            host?: string | undefined;
            path?: string | undefined;
            queryParameterNames?: (string[] & string[] & { [K_72 in Exclude<keyof I_1["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
            requestHeaderNames?: (string[] & string[] & { [K_73 in Exclude<keyof I_1["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
            statusCode?: number | undefined;
            errorCode?: string | undefined;
        } & { [K_74 in Exclude<keyof I_1["https"], keyof HttpTags>]: never; }) | undefined;
        sdk?: ({
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } & {
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } & { [K_75 in Exclude<keyof I_1["sdk"], keyof SdkTags>]: never; }) | undefined;
        environment?: string | undefined;
        namespace?: string | undefined;
        orgId?: string | undefined;
        error?: ({
            name?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: ErrorTags_ErrorType | undefined;
        } & {
            name?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: ErrorTags_ErrorType | undefined;
        } & { [K_76 in Exclude<keyof I_1["error"], keyof ErrorTags>]: never; }) | undefined;
        warning?: ({
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: WarningTags_WarningType | undefined;
        } & {
            message?: string | undefined;
            stacktrace?: string | undefined;
            type?: WarningTags_WarningType | undefined;
        } & { [K_77 in Exclude<keyof I_1["warning"], keyof WarningTags>]: never; }) | undefined;
        notice?: ({
            message?: string | undefined;
            type?: NoticeTags_NoticeType | undefined;
        } & {
            message?: string | undefined;
            type?: NoticeTags_NoticeType | undefined;
        } & { [K_78 in Exclude<keyof I_1["notice"], keyof NoticeTags>]: never; }) | undefined;
    } & { [K_79 in Exclude<keyof I_1, keyof Tags>]: never; }>(object: I_1): Tags;
};
interface SlsTags {
    /** A Serverless Platform OrgId. */
    orgId: string;
    /** The platform that was instrumented. Currently Lambda is the only supported platform. */
    platform?: string | undefined;
    /** The service that was instrumented. For Lambda this will be the function name by default. */
    service: string;
    /** The region that instrumentation was performed in. This is used to determine which Serverless Ingest API to use. */
    region?: string | undefined;
    sdk: SdkTags | undefined;
    /**
     * An optional environment that can be attached. If there is an applicable
     * environment tag this will be attached in a data enrichment process during
     * ingestion.
     */
    environment?: string | undefined;
    /**
     * An optional namespace that can be attached. If there is an applicable
     * namespace tag this will be attached in a data enrichment process during
     * ingestion.
     */
    namespace?: string | undefined;
}
declare const SlsTags: {
    encode(message: SlsTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SlsTags;
    fromJSON(object: any): SlsTags;
    toJSON(message: SlsTags): unknown;
    create<I extends {
        orgId?: string | undefined;
        platform?: string | undefined;
        service?: string | undefined;
        region?: string | undefined;
        sdk?: {
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } | undefined;
        environment?: string | undefined;
        namespace?: string | undefined;
    } & {
        orgId?: string | undefined;
        platform?: string | undefined;
        service?: string | undefined;
        region?: string | undefined;
        sdk?: ({
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } & {
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } & { [K in Exclude<keyof I["sdk"], keyof SdkTags>]: never; }) | undefined;
        environment?: string | undefined;
        namespace?: string | undefined;
    } & { [K_1 in Exclude<keyof I, keyof SlsTags>]: never; }>(base?: I | undefined): SlsTags;
    fromPartial<I_1 extends {
        orgId?: string | undefined;
        platform?: string | undefined;
        service?: string | undefined;
        region?: string | undefined;
        sdk?: {
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } | undefined;
        environment?: string | undefined;
        namespace?: string | undefined;
    } & {
        orgId?: string | undefined;
        platform?: string | undefined;
        service?: string | undefined;
        region?: string | undefined;
        sdk?: ({
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } & {
            name?: string | undefined;
            version?: string | undefined;
            runtime?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["sdk"], keyof SdkTags>]: never; }) | undefined;
        environment?: string | undefined;
        namespace?: string | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof SlsTags>]: never; }>(object: I_1): SlsTags;
};
interface SdkTags {
    /** The Name of the Serverless SDK used to instrument. */
    name: string;
    /** The version of the Serverless SDK used to instrument. */
    version: string;
    /** SDK runtime (e.g. nodejs) */
    runtime?: string | undefined;
}
declare const SdkTags: {
    encode(message: SdkTags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SdkTags;
    fromJSON(object: any): SdkTags;
    toJSON(message: SdkTags): unknown;
    create<I extends {
        name?: string | undefined;
        version?: string | undefined;
        runtime?: string | undefined;
    } & {
        name?: string | undefined;
        version?: string | undefined;
        runtime?: string | undefined;
    } & { [K in Exclude<keyof I, keyof SdkTags>]: never; }>(base?: I | undefined): SdkTags;
    fromPartial<I_1 extends {
        name?: string | undefined;
        version?: string | undefined;
        runtime?: string | undefined;
    } & {
        name?: string | undefined;
        version?: string | undefined;
        runtime?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof SdkTags>]: never; }>(object: I_1): SdkTags;
};

/**
 * A LogPayload is a message that will contain any number of
 * LogEvents plus the global tags required by our Serverless Ingest Platform.
 */
interface LogPayload {
    slsTags: SlsTags | undefined;
    /**
     * A list of LogEvents to be ingested. Ingest does not impose a limit on the
     * number of LogEvents in a single payload. It is the responsibility of
     * the LogEvents' producers to limit the size of payloads based on their
     * own requirements.
     */
    logEvents: LogEvent[];
}
declare const LogPayload: {
    encode(message: LogPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogPayload;
    fromJSON(object: any): LogPayload;
    toJSON(message: LogPayload): unknown;
    create<I extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        logEvents?: {
            timestamp?: string | number | Long | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        }[] | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K in Exclude<keyof I["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_1 in Exclude<keyof I["slsTags"], keyof SlsTags>]: never; }) | undefined;
        logEvents?: ({
            timestamp?: string | number | Long | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        }[] & ({
            timestamp?: string | number | Long | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        } & {
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_2 in Exclude<keyof I["logEvents"][number]["timestamp"], keyof Long>]: never; }) | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_3 in Exclude<keyof I["logEvents"][number]["severityNumber"], keyof Long>]: never; }) | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_4 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_5 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_6 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_7 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_8 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_9 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_10 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_11 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_12 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_13 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_14 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_15 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_16 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_17 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_18 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_19 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_20 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_21 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_22 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_23 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_24 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_25 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_26 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_27 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_28 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_29 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_30 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_31 in Exclude<keyof I["logEvents"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_32 in Exclude<keyof I["logEvents"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_33 in Exclude<keyof I["logEvents"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_34 in Exclude<keyof I["logEvents"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_35 in Exclude<keyof I["logEvents"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_36 in Exclude<keyof I["logEvents"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_37 in Exclude<keyof I["logEvents"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_38 in Exclude<keyof I["logEvents"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_39 in Exclude<keyof I["logEvents"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_40 in Exclude<keyof I["logEvents"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_41 in Exclude<keyof I["logEvents"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_42 in Exclude<keyof I["logEvents"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_43 in Exclude<keyof I["logEvents"][number]["tags"], keyof Tags>]: never; }) | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        } & { [K_44 in Exclude<keyof I["logEvents"][number], keyof LogEvent>]: never; })[] & { [K_45 in Exclude<keyof I["logEvents"], keyof {
            timestamp?: string | number | Long | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_46 in Exclude<keyof I, keyof LogPayload>]: never; }>(base?: I | undefined): LogPayload;
    fromPartial<I_1 extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        logEvents?: {
            timestamp?: string | number | Long | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        }[] | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_47 in Exclude<keyof I_1["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_48 in Exclude<keyof I_1["slsTags"], keyof SlsTags>]: never; }) | undefined;
        logEvents?: ({
            timestamp?: string | number | Long | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        }[] & ({
            timestamp?: string | number | Long | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        } & {
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_49 in Exclude<keyof I_1["logEvents"][number]["timestamp"], keyof Long>]: never; }) | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_50 in Exclude<keyof I_1["logEvents"][number]["severityNumber"], keyof Long>]: never; }) | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_51 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_52 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_53 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_54 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_55 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_56 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_57 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_58 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_59 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_60 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_61 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_62 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_63 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_64 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_65 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_66 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_67 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_68 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_69 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_70 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_71 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_72 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_73 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_74 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_75 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_76 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_77 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_78 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_79 in Exclude<keyof I_1["logEvents"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_80 in Exclude<keyof I_1["logEvents"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_81 in Exclude<keyof I_1["logEvents"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_82 in Exclude<keyof I_1["logEvents"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_83 in Exclude<keyof I_1["logEvents"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_84 in Exclude<keyof I_1["logEvents"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_85 in Exclude<keyof I_1["logEvents"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_86 in Exclude<keyof I_1["logEvents"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_87 in Exclude<keyof I_1["logEvents"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_88 in Exclude<keyof I_1["logEvents"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_89 in Exclude<keyof I_1["logEvents"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_90 in Exclude<keyof I_1["logEvents"][number]["tags"], keyof Tags>]: never; }) | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        } & { [K_91 in Exclude<keyof I_1["logEvents"][number], keyof LogEvent>]: never; })[] & { [K_92 in Exclude<keyof I_1["logEvents"], keyof {
            timestamp?: string | number | Long | undefined;
            traceId?: string | undefined;
            body?: string | undefined;
            severityText?: string | undefined;
            severityNumber?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_93 in Exclude<keyof I_1, keyof LogPayload>]: never; }>(object: I_1): LogPayload;
};
interface LogEvent {
    /** The timestamp of when the LogEvent was created. */
    timestamp: Long;
    /**
     * The Trace Id that the log's are linked to.
     * When ingesting LogEvents, ingest will attempt to infer
     * the request_id from the payload and attach it. If it is not
     * able to, then it will attempt to reconcile later.
     */
    traceId?: string | undefined;
    /** The LogEvent's body. */
    body: string;
    /** The calculated severity text value for a log */
    severityText: string;
    /** The calculated severity text value for a log */
    severityNumber: Long;
    /** A message containing any number of Tagsets */
    tags?: Tags | undefined;
    /**
     * Is historical is addedd via ingestion so that we can tell the differnce between
     * historical payloads and live streamed payloads
     */
    isHistorical?: boolean | undefined;
    /** Type is used to determine the kind of document that is being send via a livestream */
    type?: string | undefined;
}
declare const LogEvent: {
    encode(message: LogEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogEvent;
    fromJSON(object: any): LogEvent;
    toJSON(message: LogEvent): unknown;
    create<I extends {
        timestamp?: string | number | Long | undefined;
        traceId?: string | undefined;
        body?: string | undefined;
        severityText?: string | undefined;
        severityNumber?: string | number | Long | undefined;
        tags?: {
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
    } & {
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["timestamp"], keyof Long>]: never; }) | undefined;
        traceId?: string | undefined;
        body?: string | undefined;
        severityText?: string | undefined;
        severityNumber?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["severityNumber"], keyof Long>]: never; }) | undefined;
        tags?: ({
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } & {
            aws?: ({
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & {
                lambda?: ({
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } & {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_2 in Exclude<keyof I["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                    logsEndTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_3 in Exclude<keyof I["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_4 in Exclude<keyof I["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_5 in Exclude<keyof I["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_6 in Exclude<keyof I["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_7 in Exclude<keyof I["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_8 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_9 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_10 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                    apiGateway?: ({
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } & {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: ({
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } & {
                            id?: string | undefined;
                            timeEpoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_11 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                            pathParameterNames?: (string[] & string[] & { [K_12 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                        } & { [K_13 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                    } & { [K_14 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                    httpRouter?: ({
                        path?: string | undefined;
                    } & {
                        path?: string | undefined;
                    } & { [K_15 in Exclude<keyof I["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                    initialization?: ({
                        initializationDuration?: number | undefined;
                    } & {
                        initializationDuration?: number | undefined;
                    } & { [K_16 in Exclude<keyof I["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                    invocation?: ({
                        invocationDuration?: number | undefined;
                    } & {
                        invocationDuration?: number | undefined;
                    } & { [K_17 in Exclude<keyof I["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                    runtime?: ({
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & { [K_18 in Exclude<keyof I["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                } & { [K_19 in Exclude<keyof I["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                sdk?: ({
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } & {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: ({
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } & {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: (string[] & string[] & { [K_20 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_21 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_22 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                        scannedCount?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_23 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                    } & { [K_24 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_25 in Exclude<keyof I["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_26 in Exclude<keyof I["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_27 in Exclude<keyof I["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_28 in Exclude<keyof I["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                } & { [K_29 in Exclude<keyof I["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & { [K_30 in Exclude<keyof I["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_31 in Exclude<keyof I["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_32 in Exclude<keyof I["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_33 in Exclude<keyof I["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
            https?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_34 in Exclude<keyof I["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_35 in Exclude<keyof I["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_36 in Exclude<keyof I["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_37 in Exclude<keyof I["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: ({
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & { [K_38 in Exclude<keyof I["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
            warning?: ({
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & { [K_39 in Exclude<keyof I["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
            notice?: ({
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & { [K_40 in Exclude<keyof I["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
        } & { [K_41 in Exclude<keyof I["tags"], keyof Tags>]: never; }) | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
    } & { [K_42 in Exclude<keyof I, keyof LogEvent>]: never; }>(base?: I | undefined): LogEvent;
    fromPartial<I_1 extends {
        timestamp?: string | number | Long | undefined;
        traceId?: string | undefined;
        body?: string | undefined;
        severityText?: string | undefined;
        severityNumber?: string | number | Long | undefined;
        tags?: {
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
    } & {
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_43 in Exclude<keyof I_1["timestamp"], keyof Long>]: never; }) | undefined;
        traceId?: string | undefined;
        body?: string | undefined;
        severityText?: string | undefined;
        severityNumber?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_44 in Exclude<keyof I_1["severityNumber"], keyof Long>]: never; }) | undefined;
        tags?: ({
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } & {
            aws?: ({
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & {
                lambda?: ({
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } & {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_45 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                    logsEndTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_46 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_47 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_48 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_49 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_50 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_51 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_52 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_53 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                    apiGateway?: ({
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } & {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: ({
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } & {
                            id?: string | undefined;
                            timeEpoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_54 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                            pathParameterNames?: (string[] & string[] & { [K_55 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                        } & { [K_56 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                    } & { [K_57 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                    httpRouter?: ({
                        path?: string | undefined;
                    } & {
                        path?: string | undefined;
                    } & { [K_58 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                    initialization?: ({
                        initializationDuration?: number | undefined;
                    } & {
                        initializationDuration?: number | undefined;
                    } & { [K_59 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                    invocation?: ({
                        invocationDuration?: number | undefined;
                    } & {
                        invocationDuration?: number | undefined;
                    } & { [K_60 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                    runtime?: ({
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & { [K_61 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                } & { [K_62 in Exclude<keyof I_1["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                sdk?: ({
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } & {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: ({
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } & {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: (string[] & string[] & { [K_63 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_64 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_65 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                        scannedCount?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_66 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                    } & { [K_67 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_68 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_69 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_70 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_71 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                } & { [K_72 in Exclude<keyof I_1["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & { [K_73 in Exclude<keyof I_1["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_74 in Exclude<keyof I_1["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_75 in Exclude<keyof I_1["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_76 in Exclude<keyof I_1["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
            https?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_77 in Exclude<keyof I_1["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_78 in Exclude<keyof I_1["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_79 in Exclude<keyof I_1["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_80 in Exclude<keyof I_1["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: ({
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & { [K_81 in Exclude<keyof I_1["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
            warning?: ({
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & { [K_82 in Exclude<keyof I_1["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
            notice?: ({
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & { [K_83 in Exclude<keyof I_1["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
        } & { [K_84 in Exclude<keyof I_1["tags"], keyof Tags>]: never; }) | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
    } & { [K_85 in Exclude<keyof I_1, keyof LogEvent>]: never; }>(object: I_1): LogEvent;
};

/**
 * An EventPayload is a message that will contain any number
 * of Events plus the global tags required by our Serverless Ingest Platform.
 */
interface EventPayload {
    slsTags: SlsTags | undefined;
    /**
     * A list of Events to be ingested. Ingest does not impose a limit on the
     * number of Events in a single payload. It is the responsibility of the
     * Event producer to limit the size of payloads based on their own requirements.
     */
    events: Event[];
}
declare const EventPayload: {
    encode(message: EventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPayload;
    fromJSON(object: any): EventPayload;
    toJSON(message: EventPayload): unknown;
    create<I extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        events?: {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K in Exclude<keyof I["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_1 in Exclude<keyof I["slsTags"], keyof SlsTags>]: never; }) | undefined;
        events?: ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[] & ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        } & {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_2 in Exclude<keyof I["events"][number]["timestampUnixNano"], keyof Long>]: never; }) | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_3 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_4 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_5 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_6 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_7 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_8 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_9 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_10 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_11 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_12 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_13 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_14 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_15 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_16 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_17 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_18 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_19 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_20 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_21 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_22 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_23 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_24 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_25 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_26 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_27 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_28 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_29 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_30 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_31 in Exclude<keyof I["events"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_32 in Exclude<keyof I["events"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_33 in Exclude<keyof I["events"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_34 in Exclude<keyof I["events"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_35 in Exclude<keyof I["events"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_36 in Exclude<keyof I["events"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_37 in Exclude<keyof I["events"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_38 in Exclude<keyof I["events"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_39 in Exclude<keyof I["events"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_40 in Exclude<keyof I["events"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_41 in Exclude<keyof I["events"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_42 in Exclude<keyof I["events"][number]["tags"], keyof Tags>]: never; }) | undefined;
        } & { [K_43 in Exclude<keyof I["events"][number], keyof Event>]: never; })[] & { [K_44 in Exclude<keyof I["events"], keyof {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_45 in Exclude<keyof I, keyof EventPayload>]: never; }>(base?: I | undefined): EventPayload;
    fromPartial<I_1 extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        events?: {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_46 in Exclude<keyof I_1["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_47 in Exclude<keyof I_1["slsTags"], keyof SlsTags>]: never; }) | undefined;
        events?: ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[] & ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        } & {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_48 in Exclude<keyof I_1["events"][number]["timestampUnixNano"], keyof Long>]: never; }) | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_49 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_50 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_51 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_52 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_53 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_54 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_55 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_56 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_57 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_58 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_59 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_60 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_61 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_62 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_63 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_64 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_65 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_66 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_67 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_68 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_69 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_70 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_71 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_72 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_73 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_74 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_75 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_76 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_77 in Exclude<keyof I_1["events"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_78 in Exclude<keyof I_1["events"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_79 in Exclude<keyof I_1["events"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_80 in Exclude<keyof I_1["events"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_81 in Exclude<keyof I_1["events"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_82 in Exclude<keyof I_1["events"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_83 in Exclude<keyof I_1["events"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_84 in Exclude<keyof I_1["events"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_85 in Exclude<keyof I_1["events"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_86 in Exclude<keyof I_1["events"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_87 in Exclude<keyof I_1["events"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_88 in Exclude<keyof I_1["events"][number]["tags"], keyof Tags>]: never; }) | undefined;
        } & { [K_89 in Exclude<keyof I_1["events"][number], keyof Event>]: never; })[] & { [K_90 in Exclude<keyof I_1["events"], keyof {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_91 in Exclude<keyof I_1, keyof EventPayload>]: never; }>(object: I_1): EventPayload;
};
interface Event {
    /** The Event ID, this will be a random 8-byte ID encoded as a length 16 lowercase hex string. */
    id: Uint8Array;
    /**
     * The Trace ID, this will be a random 16-byte ID encoded as a length 32 lowercase hex string.
     * The Trace ID is what is used to group all spans for specific trace together.
     */
    traceId: Uint8Array;
    /**
     * An optional Span ID to be used to create to show the span context that the event was generated in.
     * In practical terms, every span except the root span will have a parent span ID.
     */
    spanId?: Uint8Array | undefined;
    /** The timestamp of when the Event happened in nanoseconds from EPOCH. */
    timestampUnixNano: Long;
    /** The name that is used internal in the Serverless platform to identify the event. */
    eventName: string;
    /**
     * The optional customTags that can be attached to an event when published.
     * This is expected to be a JSON object in string format.
     */
    customTags?: string | undefined;
    /** The optional custom fingerprint that will override our default fingerprinting approach */
    customFingerprint?: string | undefined;
    /** A message containing any number of Tagsets. */
    tags: Tags | undefined;
}
declare const Event: {
    encode(message: Event, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Event;
    fromJSON(object: any): Event;
    toJSON(message: Event): unknown;
    create<I extends {
        id?: Uint8Array | undefined;
        traceId?: Uint8Array | undefined;
        spanId?: Uint8Array | undefined;
        timestampUnixNano?: string | number | Long | undefined;
        eventName?: string | undefined;
        customTags?: string | undefined;
        customFingerprint?: string | undefined;
        tags?: {
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } | undefined;
    } & {
        id?: Uint8Array | undefined;
        traceId?: Uint8Array | undefined;
        spanId?: Uint8Array | undefined;
        timestampUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["timestampUnixNano"], keyof Long>]: never; }) | undefined;
        eventName?: string | undefined;
        customTags?: string | undefined;
        customFingerprint?: string | undefined;
        tags?: ({
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } & {
            aws?: ({
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & {
                lambda?: ({
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } & {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_1 in Exclude<keyof I["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                    logsEndTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_2 in Exclude<keyof I["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_3 in Exclude<keyof I["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_4 in Exclude<keyof I["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_5 in Exclude<keyof I["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_6 in Exclude<keyof I["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_7 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_8 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_9 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                    apiGateway?: ({
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } & {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: ({
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } & {
                            id?: string | undefined;
                            timeEpoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_10 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                            pathParameterNames?: (string[] & string[] & { [K_11 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                        } & { [K_12 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                    } & { [K_13 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                    httpRouter?: ({
                        path?: string | undefined;
                    } & {
                        path?: string | undefined;
                    } & { [K_14 in Exclude<keyof I["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                    initialization?: ({
                        initializationDuration?: number | undefined;
                    } & {
                        initializationDuration?: number | undefined;
                    } & { [K_15 in Exclude<keyof I["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                    invocation?: ({
                        invocationDuration?: number | undefined;
                    } & {
                        invocationDuration?: number | undefined;
                    } & { [K_16 in Exclude<keyof I["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                    runtime?: ({
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & { [K_17 in Exclude<keyof I["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                } & { [K_18 in Exclude<keyof I["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                sdk?: ({
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } & {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: ({
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } & {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: (string[] & string[] & { [K_19 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_20 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_21 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                        scannedCount?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_22 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                    } & { [K_23 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_24 in Exclude<keyof I["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_25 in Exclude<keyof I["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_26 in Exclude<keyof I["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_27 in Exclude<keyof I["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                } & { [K_28 in Exclude<keyof I["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & { [K_29 in Exclude<keyof I["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_30 in Exclude<keyof I["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_31 in Exclude<keyof I["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_32 in Exclude<keyof I["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
            https?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_33 in Exclude<keyof I["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_34 in Exclude<keyof I["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_35 in Exclude<keyof I["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_36 in Exclude<keyof I["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: ({
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & { [K_37 in Exclude<keyof I["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
            warning?: ({
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & { [K_38 in Exclude<keyof I["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
            notice?: ({
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & { [K_39 in Exclude<keyof I["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
        } & { [K_40 in Exclude<keyof I["tags"], keyof Tags>]: never; }) | undefined;
    } & { [K_41 in Exclude<keyof I, keyof Event>]: never; }>(base?: I | undefined): Event;
    fromPartial<I_1 extends {
        id?: Uint8Array | undefined;
        traceId?: Uint8Array | undefined;
        spanId?: Uint8Array | undefined;
        timestampUnixNano?: string | number | Long | undefined;
        eventName?: string | undefined;
        customTags?: string | undefined;
        customFingerprint?: string | undefined;
        tags?: {
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } | undefined;
    } & {
        id?: Uint8Array | undefined;
        traceId?: Uint8Array | undefined;
        spanId?: Uint8Array | undefined;
        timestampUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_42 in Exclude<keyof I_1["timestampUnixNano"], keyof Long>]: never; }) | undefined;
        eventName?: string | undefined;
        customTags?: string | undefined;
        customFingerprint?: string | undefined;
        tags?: ({
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } & {
            aws?: ({
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & {
                lambda?: ({
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } & {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_43 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                    logsEndTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_44 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_45 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_46 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_47 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_48 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_49 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_50 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_51 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                    apiGateway?: ({
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } & {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: ({
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } & {
                            id?: string | undefined;
                            timeEpoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_52 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                            pathParameterNames?: (string[] & string[] & { [K_53 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                        } & { [K_54 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                    } & { [K_55 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                    httpRouter?: ({
                        path?: string | undefined;
                    } & {
                        path?: string | undefined;
                    } & { [K_56 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                    initialization?: ({
                        initializationDuration?: number | undefined;
                    } & {
                        initializationDuration?: number | undefined;
                    } & { [K_57 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                    invocation?: ({
                        invocationDuration?: number | undefined;
                    } & {
                        invocationDuration?: number | undefined;
                    } & { [K_58 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                    runtime?: ({
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & { [K_59 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                } & { [K_60 in Exclude<keyof I_1["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                sdk?: ({
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } & {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: ({
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } & {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: (string[] & string[] & { [K_61 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_62 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_63 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                        scannedCount?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_64 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                    } & { [K_65 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_66 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_67 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_68 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_69 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                } & { [K_70 in Exclude<keyof I_1["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & { [K_71 in Exclude<keyof I_1["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_72 in Exclude<keyof I_1["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_73 in Exclude<keyof I_1["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_74 in Exclude<keyof I_1["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
            https?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_75 in Exclude<keyof I_1["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_76 in Exclude<keyof I_1["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_77 in Exclude<keyof I_1["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_78 in Exclude<keyof I_1["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: ({
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & { [K_79 in Exclude<keyof I_1["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
            warning?: ({
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & { [K_80 in Exclude<keyof I_1["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
            notice?: ({
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & { [K_81 in Exclude<keyof I_1["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
        } & { [K_82 in Exclude<keyof I_1["tags"], keyof Tags>]: never; }) | undefined;
    } & { [K_83 in Exclude<keyof I_1, keyof Event>]: never; }>(object: I_1): Event;
};

/**
 * TracePayload is a message that will contain any number
 * of Spans plus the global tags required by our Serverless Ingest
 * Platform. A TracePayload DOES NOT necessarily mean that it is a
 * complete Trace. It may contain only a subset of Spans that
 * will make up the complete Trace.
 */
interface TracePayload {
    slsTags: SlsTags | undefined;
    /**
     * A list of Spans to be ingest. Ingest does not impose a limit on the
     * number of Spans in a single payload. It is the responsibility of the
     * Span producers to limit the size of payloads based on their own requirements.
     */
    spans: Span[];
    /**
     * A list of Events to be ingested. Ingest does not impose a limit on the
     * number of Events in a single payload. It is the responsibility of the
     * Event producers to limit the size of paylaods based on their own requirements.
     */
    events: Event[];
    /**
     * The optional custom trace tags to be set by the user
     * This is expected to be a JSON object in string format.
     */
    customTags?: string | undefined;
    /**
     * Whether the trace payload represents sampled out invocation and in result contains just
     * core spans and no events
     */
    isSampledOut?: boolean | undefined;
}
declare const TracePayload: {
    encode(message: TracePayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TracePayload;
    fromJSON(object: any): TracePayload;
    toJSON(message: TracePayload): unknown;
    create<I extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        spans?: {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | Long | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        }[] | undefined;
        events?: {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[] | undefined;
        customTags?: string | undefined;
        isSampledOut?: boolean | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K in Exclude<keyof I["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_1 in Exclude<keyof I["slsTags"], keyof SlsTags>]: never; }) | undefined;
        spans?: ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | Long | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        }[] & ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | Long | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        } & {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_2 in Exclude<keyof I["spans"][number]["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
            endTimeUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_3 in Exclude<keyof I["spans"][number]["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_4 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_5 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_6 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_7 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_8 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_9 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_10 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_11 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_12 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_13 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_14 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_15 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_16 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_17 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_18 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_19 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_20 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_21 in Exclude<keyof I["spans"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_22 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_23 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_24 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_25 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_26 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_27 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_28 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_29 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_30 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_31 in Exclude<keyof I["spans"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_32 in Exclude<keyof I["spans"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_33 in Exclude<keyof I["spans"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_34 in Exclude<keyof I["spans"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_35 in Exclude<keyof I["spans"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_36 in Exclude<keyof I["spans"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_37 in Exclude<keyof I["spans"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_38 in Exclude<keyof I["spans"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_39 in Exclude<keyof I["spans"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_40 in Exclude<keyof I["spans"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_41 in Exclude<keyof I["spans"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_42 in Exclude<keyof I["spans"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_43 in Exclude<keyof I["spans"][number]["tags"], keyof Tags>]: never; }) | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_44 in Exclude<keyof I["spans"][number]["timestamp"], keyof Long>]: never; }) | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        } & { [K_45 in Exclude<keyof I["spans"][number], keyof Span>]: never; })[] & { [K_46 in Exclude<keyof I["spans"], keyof {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | Long | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        }[]>]: never; }) | undefined;
        events?: ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[] & ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        } & {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_47 in Exclude<keyof I["events"][number]["timestampUnixNano"], keyof Long>]: never; }) | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_48 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_49 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_50 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_51 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_52 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_53 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_54 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_55 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_56 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_57 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_58 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_59 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_60 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_61 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_62 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_63 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_64 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_65 in Exclude<keyof I["events"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_66 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_67 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_68 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_69 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_70 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_71 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_72 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_73 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_74 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_75 in Exclude<keyof I["events"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_76 in Exclude<keyof I["events"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_77 in Exclude<keyof I["events"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_78 in Exclude<keyof I["events"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_79 in Exclude<keyof I["events"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_80 in Exclude<keyof I["events"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_81 in Exclude<keyof I["events"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_82 in Exclude<keyof I["events"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_83 in Exclude<keyof I["events"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_84 in Exclude<keyof I["events"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_85 in Exclude<keyof I["events"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_86 in Exclude<keyof I["events"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_87 in Exclude<keyof I["events"][number]["tags"], keyof Tags>]: never; }) | undefined;
        } & { [K_88 in Exclude<keyof I["events"][number], keyof Event>]: never; })[] & { [K_89 in Exclude<keyof I["events"], keyof {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        customTags?: string | undefined;
        isSampledOut?: boolean | undefined;
    } & { [K_90 in Exclude<keyof I, keyof TracePayload>]: never; }>(base?: I | undefined): TracePayload;
    fromPartial<I_1 extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        spans?: {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | Long | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        }[] | undefined;
        events?: {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[] | undefined;
        customTags?: string | undefined;
        isSampledOut?: boolean | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_91 in Exclude<keyof I_1["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_92 in Exclude<keyof I_1["slsTags"], keyof SlsTags>]: never; }) | undefined;
        spans?: ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | Long | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        }[] & ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | Long | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        } & {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_93 in Exclude<keyof I_1["spans"][number]["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
            endTimeUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_94 in Exclude<keyof I_1["spans"][number]["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_95 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_96 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_97 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_98 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_99 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_100 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_101 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_102 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_103 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_104 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_105 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_106 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_107 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_108 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_109 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_110 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_111 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_112 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_113 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_114 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_115 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_116 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_117 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_118 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_119 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_120 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_121 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_122 in Exclude<keyof I_1["spans"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_123 in Exclude<keyof I_1["spans"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_124 in Exclude<keyof I_1["spans"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_125 in Exclude<keyof I_1["spans"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_126 in Exclude<keyof I_1["spans"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_127 in Exclude<keyof I_1["spans"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_128 in Exclude<keyof I_1["spans"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_129 in Exclude<keyof I_1["spans"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_130 in Exclude<keyof I_1["spans"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_131 in Exclude<keyof I_1["spans"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_132 in Exclude<keyof I_1["spans"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_133 in Exclude<keyof I_1["spans"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_134 in Exclude<keyof I_1["spans"][number]["tags"], keyof Tags>]: never; }) | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_135 in Exclude<keyof I_1["spans"][number]["timestamp"], keyof Long>]: never; }) | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        } & { [K_136 in Exclude<keyof I_1["spans"][number], keyof Span>]: never; })[] & { [K_137 in Exclude<keyof I_1["spans"], keyof {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            parentSpanId?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            input?: string | undefined;
            output?: string | undefined;
            timestamp?: string | number | Long | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            customTags?: string | undefined;
        }[]>]: never; }) | undefined;
        events?: ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[] & ({
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        } & {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_138 in Exclude<keyof I_1["events"][number]["timestampUnixNano"], keyof Long>]: never; }) | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_139 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_140 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_141 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_142 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_143 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_144 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_145 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_146 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_147 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_148 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_149 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_150 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_151 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_152 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_153 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_154 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_155 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_156 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_157 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_158 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_159 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_160 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_161 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_162 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_163 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_164 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_165 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_166 in Exclude<keyof I_1["events"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_167 in Exclude<keyof I_1["events"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_168 in Exclude<keyof I_1["events"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_169 in Exclude<keyof I_1["events"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_170 in Exclude<keyof I_1["events"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_171 in Exclude<keyof I_1["events"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_172 in Exclude<keyof I_1["events"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_173 in Exclude<keyof I_1["events"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_174 in Exclude<keyof I_1["events"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_175 in Exclude<keyof I_1["events"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_176 in Exclude<keyof I_1["events"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_177 in Exclude<keyof I_1["events"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_178 in Exclude<keyof I_1["events"][number]["tags"], keyof Tags>]: never; }) | undefined;
        } & { [K_179 in Exclude<keyof I_1["events"][number], keyof Event>]: never; })[] & { [K_180 in Exclude<keyof I_1["events"], keyof {
            id?: Uint8Array | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            timestampUnixNano?: string | number | Long | undefined;
            eventName?: string | undefined;
            customTags?: string | undefined;
            customFingerprint?: string | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        customTags?: string | undefined;
        isSampledOut?: boolean | undefined;
    } & { [K_181 in Exclude<keyof I_1, keyof TracePayload>]: never; }>(object: I_1): TracePayload;
};
interface Span {
    /** The Span ID, this will be a random 8-byte ID encoded as a length 16 lowercase hex string. */
    id: Uint8Array;
    /**
     * The Trace ID, this will be a random 16-byte ID encoded as a length 32 lowercase hex string.
     * The Trace ID is what is used to group all spans for specific trace together.
     */
    traceId: Uint8Array;
    /**
     * An optional Parent Span ID to be used to create a trace's Span Dependency graph.
     * In practical terms, every span except the root span will have a parent span ID.
     */
    parentSpanId?: Uint8Array | undefined;
    /**
     * The name of the span describes the type of span that is being produced.
     * currently have a limited set of span names
     *
     * - aws.lambda: Spans the full invocation duration of a lambda function
     * - aws.lambda.invocation: Spans the cold-start duration of a lambda function
     */
    name: string;
    /** The start time of the span in nanoseconds from EPOCH. */
    startTimeUnixNano: Long;
    /**
     * The end time of the span in nanoseconds from EPOCH.
     * An important invariant to keep in mind is that the root span will always have
     * the latest end time.
     */
    endTimeUnixNano: Long;
    /** A message containing any number of Tagsets */
    tags: Tags | undefined;
    /** Eventual input body (e.g. HTTP request body) */
    input?: string | undefined;
    /** Eventual output body (e.g. HTTP response body) */
    output?: string | undefined;
    /** The timestamp that is created in ingestion as the search key */
    timestamp?: Long | undefined;
    /**
     * Is historical is addedd via ingestion so that we can tell the differnce between
     * historical payloads and live streamed payloads
     */
    isHistorical?: boolean | undefined;
    /** Type is used to determine the kind of document that is being send via a livestream */
    type?: string | undefined;
    /**
     * The optional custom tags to be set by the user
     * This is expected to be a JSON object in string format.
     */
    customTags?: string | undefined;
}
declare const Span: {
    encode(message: Span, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Span;
    fromJSON(object: any): Span;
    toJSON(message: Span): unknown;
    create<I extends {
        id?: Uint8Array | undefined;
        traceId?: Uint8Array | undefined;
        parentSpanId?: Uint8Array | undefined;
        name?: string | undefined;
        startTimeUnixNano?: string | number | Long | undefined;
        endTimeUnixNano?: string | number | Long | undefined;
        tags?: {
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } | undefined;
        input?: string | undefined;
        output?: string | undefined;
        timestamp?: string | number | Long | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
        customTags?: string | undefined;
    } & {
        id?: Uint8Array | undefined;
        traceId?: Uint8Array | undefined;
        parentSpanId?: Uint8Array | undefined;
        name?: string | undefined;
        startTimeUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
        endTimeUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
        tags?: ({
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } & {
            aws?: ({
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & {
                lambda?: ({
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } & {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_2 in Exclude<keyof I["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                    logsEndTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_3 in Exclude<keyof I["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_4 in Exclude<keyof I["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_5 in Exclude<keyof I["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_6 in Exclude<keyof I["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_7 in Exclude<keyof I["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_8 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_9 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_10 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                    apiGateway?: ({
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } & {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: ({
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } & {
                            id?: string | undefined;
                            timeEpoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_11 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                            pathParameterNames?: (string[] & string[] & { [K_12 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                        } & { [K_13 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                    } & { [K_14 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                    httpRouter?: ({
                        path?: string | undefined;
                    } & {
                        path?: string | undefined;
                    } & { [K_15 in Exclude<keyof I["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                    initialization?: ({
                        initializationDuration?: number | undefined;
                    } & {
                        initializationDuration?: number | undefined;
                    } & { [K_16 in Exclude<keyof I["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                    invocation?: ({
                        invocationDuration?: number | undefined;
                    } & {
                        invocationDuration?: number | undefined;
                    } & { [K_17 in Exclude<keyof I["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                    runtime?: ({
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & { [K_18 in Exclude<keyof I["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                } & { [K_19 in Exclude<keyof I["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                sdk?: ({
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } & {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: ({
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } & {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: (string[] & string[] & { [K_20 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_21 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_22 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                        scannedCount?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_23 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                    } & { [K_24 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_25 in Exclude<keyof I["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_26 in Exclude<keyof I["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_27 in Exclude<keyof I["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_28 in Exclude<keyof I["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                } & { [K_29 in Exclude<keyof I["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & { [K_30 in Exclude<keyof I["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_31 in Exclude<keyof I["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_32 in Exclude<keyof I["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_33 in Exclude<keyof I["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
            https?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_34 in Exclude<keyof I["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_35 in Exclude<keyof I["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_36 in Exclude<keyof I["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_37 in Exclude<keyof I["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: ({
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & { [K_38 in Exclude<keyof I["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
            warning?: ({
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & { [K_39 in Exclude<keyof I["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
            notice?: ({
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & { [K_40 in Exclude<keyof I["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
        } & { [K_41 in Exclude<keyof I["tags"], keyof Tags>]: never; }) | undefined;
        input?: string | undefined;
        output?: string | undefined;
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_42 in Exclude<keyof I["timestamp"], keyof Long>]: never; }) | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
        customTags?: string | undefined;
    } & { [K_43 in Exclude<keyof I, keyof Span>]: never; }>(base?: I | undefined): Span;
    fromPartial<I_1 extends {
        id?: Uint8Array | undefined;
        traceId?: Uint8Array | undefined;
        parentSpanId?: Uint8Array | undefined;
        name?: string | undefined;
        startTimeUnixNano?: string | number | Long | undefined;
        endTimeUnixNano?: string | number | Long | undefined;
        tags?: {
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } | undefined;
        input?: string | undefined;
        output?: string | undefined;
        timestamp?: string | number | Long | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
        customTags?: string | undefined;
    } & {
        id?: Uint8Array | undefined;
        traceId?: Uint8Array | undefined;
        parentSpanId?: Uint8Array | undefined;
        name?: string | undefined;
        startTimeUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_44 in Exclude<keyof I_1["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
        endTimeUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_45 in Exclude<keyof I_1["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
        tags?: ({
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } & {
            aws?: ({
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & {
                lambda?: ({
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } & {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_46 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                    logsEndTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_47 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_48 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_49 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_50 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_51 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_52 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_53 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_54 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                    apiGateway?: ({
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } & {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: ({
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } & {
                            id?: string | undefined;
                            timeEpoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_55 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                            pathParameterNames?: (string[] & string[] & { [K_56 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                        } & { [K_57 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                    } & { [K_58 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                    httpRouter?: ({
                        path?: string | undefined;
                    } & {
                        path?: string | undefined;
                    } & { [K_59 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                    initialization?: ({
                        initializationDuration?: number | undefined;
                    } & {
                        initializationDuration?: number | undefined;
                    } & { [K_60 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                    invocation?: ({
                        invocationDuration?: number | undefined;
                    } & {
                        invocationDuration?: number | undefined;
                    } & { [K_61 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                    runtime?: ({
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & { [K_62 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                } & { [K_63 in Exclude<keyof I_1["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                sdk?: ({
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } & {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: ({
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } & {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: (string[] & string[] & { [K_64 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_65 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_66 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                        scannedCount?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_67 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                    } & { [K_68 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_69 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_70 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_71 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_72 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                } & { [K_73 in Exclude<keyof I_1["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & { [K_74 in Exclude<keyof I_1["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_75 in Exclude<keyof I_1["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_76 in Exclude<keyof I_1["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_77 in Exclude<keyof I_1["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
            https?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_78 in Exclude<keyof I_1["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_79 in Exclude<keyof I_1["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_80 in Exclude<keyof I_1["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_81 in Exclude<keyof I_1["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: ({
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & { [K_82 in Exclude<keyof I_1["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
            warning?: ({
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & { [K_83 in Exclude<keyof I_1["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
            notice?: ({
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & { [K_84 in Exclude<keyof I_1["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
        } & { [K_85 in Exclude<keyof I_1["tags"], keyof Tags>]: never; }) | undefined;
        input?: string | undefined;
        output?: string | undefined;
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_86 in Exclude<keyof I_1["timestamp"], keyof Long>]: never; }) | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
        customTags?: string | undefined;
    } & { [K_87 in Exclude<keyof I_1, keyof Span>]: never; }>(object: I_1): Span;
};

declare enum RequestResponse_Origin {
    /** ORIGIN_UNSPECIFIED - Not disclosed (not applicable as property is required) */
    ORIGIN_UNSPECIFIED = 0,
    /** ORIGIN_REQUEST - Function request event */
    ORIGIN_REQUEST = 1,
    /** ORIGIN_RESPONSE - Function handler response */
    ORIGIN_RESPONSE = 2,
    UNRECOGNIZED = -1
}
declare function requestResponse_OriginFromJSON(object: any): RequestResponse_Origin;
declare function requestResponse_OriginToJSON(object: RequestResponse_Origin): string;
/**
 * RequestResponse is the AWS Lambda Event and Response Data.
 * In the Serverless Platform there will be two of these payloads
 * One for Event payload and then one for the payload returned at the end of
 * the function invocation.
 */
interface RequestResponse {
    /** The Global Serverless Platform Tags */
    slsTags: SlsTags | undefined;
    /** The trace Id of the invocation */
    traceId?: Uint8Array | undefined;
    /** The span id of the root Lambda Span that request data is attached to on ingest. */
    spanId?: Uint8Array | undefined;
    /** The Lambda Request Id. */
    requestId?: string | undefined;
    /**
     * JSON string of the request or the response body
     * In case of response may be omited if lambda resolved with no value
     */
    body?: string | undefined;
    /** Type of body */
    origin: RequestResponse_Origin;
    /** A message containing any number of Tagsets */
    tags?: Tags | undefined;
    /**
     * Is historical is addedd via ingestion so that we can tell the differnce between
     * historical payloads and live streamed payloads
     */
    isHistorical?: boolean | undefined;
    /** Type is used to determine the kind of document that is being send via a livestream */
    type?: string | undefined;
    /** The timestamp of when the req/res data was generated. */
    timestamp?: Long | undefined;
}
declare const RequestResponse: {
    encode(message: RequestResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RequestResponse;
    fromJSON(object: any): RequestResponse;
    toJSON(message: RequestResponse): unknown;
    create<I extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        traceId?: Uint8Array | undefined;
        spanId?: Uint8Array | undefined;
        requestId?: string | undefined;
        body?: string | undefined;
        origin?: RequestResponse_Origin | undefined;
        tags?: {
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
        timestamp?: string | number | Long | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K in Exclude<keyof I["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_1 in Exclude<keyof I["slsTags"], keyof SlsTags>]: never; }) | undefined;
        traceId?: Uint8Array | undefined;
        spanId?: Uint8Array | undefined;
        requestId?: string | undefined;
        body?: string | undefined;
        origin?: RequestResponse_Origin | undefined;
        tags?: ({
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } & {
            aws?: ({
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & {
                lambda?: ({
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } & {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_2 in Exclude<keyof I["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                    logsEndTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_3 in Exclude<keyof I["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_4 in Exclude<keyof I["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_5 in Exclude<keyof I["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_6 in Exclude<keyof I["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_7 in Exclude<keyof I["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_8 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_9 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_10 in Exclude<keyof I["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                    apiGateway?: ({
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } & {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: ({
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } & {
                            id?: string | undefined;
                            timeEpoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_11 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                            pathParameterNames?: (string[] & string[] & { [K_12 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                        } & { [K_13 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                    } & { [K_14 in Exclude<keyof I["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                    httpRouter?: ({
                        path?: string | undefined;
                    } & {
                        path?: string | undefined;
                    } & { [K_15 in Exclude<keyof I["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                    initialization?: ({
                        initializationDuration?: number | undefined;
                    } & {
                        initializationDuration?: number | undefined;
                    } & { [K_16 in Exclude<keyof I["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                    invocation?: ({
                        invocationDuration?: number | undefined;
                    } & {
                        invocationDuration?: number | undefined;
                    } & { [K_17 in Exclude<keyof I["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                    runtime?: ({
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & { [K_18 in Exclude<keyof I["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                } & { [K_19 in Exclude<keyof I["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                sdk?: ({
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } & {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: ({
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } & {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: (string[] & string[] & { [K_20 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_21 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_22 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                        scannedCount?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_23 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                    } & { [K_24 in Exclude<keyof I["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_25 in Exclude<keyof I["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_26 in Exclude<keyof I["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_27 in Exclude<keyof I["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_28 in Exclude<keyof I["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                } & { [K_29 in Exclude<keyof I["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & { [K_30 in Exclude<keyof I["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_31 in Exclude<keyof I["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_32 in Exclude<keyof I["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_33 in Exclude<keyof I["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
            https?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_34 in Exclude<keyof I["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_35 in Exclude<keyof I["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_36 in Exclude<keyof I["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_37 in Exclude<keyof I["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: ({
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & { [K_38 in Exclude<keyof I["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
            warning?: ({
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & { [K_39 in Exclude<keyof I["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
            notice?: ({
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & { [K_40 in Exclude<keyof I["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
        } & { [K_41 in Exclude<keyof I["tags"], keyof Tags>]: never; }) | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_42 in Exclude<keyof I["timestamp"], keyof Long>]: never; }) | undefined;
    } & { [K_43 in Exclude<keyof I, keyof RequestResponse>]: never; }>(base?: I | undefined): RequestResponse;
    fromPartial<I_1 extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        traceId?: Uint8Array | undefined;
        spanId?: Uint8Array | undefined;
        requestId?: string | undefined;
        body?: string | undefined;
        origin?: RequestResponse_Origin | undefined;
        tags?: {
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
        timestamp?: string | number | Long | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_44 in Exclude<keyof I_1["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_45 in Exclude<keyof I_1["slsTags"], keyof SlsTags>]: never; }) | undefined;
        traceId?: Uint8Array | undefined;
        spanId?: Uint8Array | undefined;
        requestId?: string | undefined;
        body?: string | undefined;
        origin?: RequestResponse_Origin | undefined;
        tags?: ({
            aws?: {
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } | undefined;
            http?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            https?: {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } | undefined;
            warning?: {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } | undefined;
            notice?: {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } | undefined;
        } & {
            aws?: ({
                lambda?: {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } | undefined;
                sdk?: {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & {
                lambda?: ({
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | Long | undefined;
                    logsEndTimeUnix?: string | number | Long | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    apiGateway?: {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    httpRouter?: {
                        path?: string | undefined;
                    } | undefined;
                    initialization?: {
                        initializationDuration?: number | undefined;
                    } | undefined;
                    invocation?: {
                        invocationDuration?: number | undefined;
                    } | undefined;
                    runtime?: {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } | undefined;
                } & {
                    arch?: string | undefined;
                    isColdstart?: boolean | undefined;
                    eventType?: string | undefined;
                    eventSource?: string | undefined;
                    logGroup?: string | undefined;
                    logStreamName?: string | undefined;
                    maxMemory?: number | undefined;
                    name?: string | undefined;
                    requestId?: string | undefined;
                    version?: string | undefined;
                    accountId?: string | undefined;
                    outcome?: AwsLambdaTags_Outcome | undefined;
                    errorExceptionMessage?: string | undefined;
                    errorExceptionStacktrace?: string | undefined;
                    duration?: number | undefined;
                    requestBody?: string | undefined;
                    responseBody?: string | undefined;
                    logsStartTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_46 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                    logsEndTimeUnix?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_47 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                    responseMode?: AwsLambdaTags_ResponseMode | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_48 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_49 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_50 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_51 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_52 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_53 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_54 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                    apiGateway?: ({
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: {
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } | undefined;
                    } & {
                        accountId?: string | undefined;
                        apiId?: string | undefined;
                        apiStage?: string | undefined;
                        request?: ({
                            id?: string | undefined;
                            timeEpoch?: string | number | Long | undefined;
                            pathParameterNames?: string[] | undefined;
                        } & {
                            id?: string | undefined;
                            timeEpoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_55 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                            pathParameterNames?: (string[] & string[] & { [K_56 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                        } & { [K_57 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                    } & { [K_58 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                    httpRouter?: ({
                        path?: string | undefined;
                    } & {
                        path?: string | undefined;
                    } & { [K_59 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                    initialization?: ({
                        initializationDuration?: number | undefined;
                    } & {
                        initializationDuration?: number | undefined;
                    } & { [K_60 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                    invocation?: ({
                        invocationDuration?: number | undefined;
                    } & {
                        invocationDuration?: number | undefined;
                    } & { [K_61 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                    runtime?: ({
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & {
                        identifier?: string | undefined;
                        version?: string | undefined;
                        arn?: string | undefined;
                    } & { [K_62 in Exclude<keyof I_1["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                } & { [K_63 in Exclude<keyof I_1["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                sdk?: ({
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } | undefined;
                    sqs?: {
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                    sns?: {
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } | undefined;
                } & {
                    region?: string | undefined;
                    signatureVersion?: string | undefined;
                    service?: string | undefined;
                    operation?: string | undefined;
                    requestId?: string | undefined;
                    error?: string | undefined;
                    dynamodb?: ({
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: string[] | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | Long | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | Long | undefined;
                        scannedCount?: string | number | Long | undefined;
                    } & {
                        tableName?: string | undefined;
                        projection?: string | undefined;
                        scanForward?: boolean | undefined;
                        attributesToGet?: (string[] & string[] & { [K_64 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                        consistentRead?: boolean | undefined;
                        indexName?: string | undefined;
                        limit?: number | undefined;
                        select?: string | undefined;
                        segment?: number | undefined;
                        totalSegments?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_65 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                        filter?: string | undefined;
                        keyCondition?: string | undefined;
                        exclusiveStartKey?: string | undefined;
                        attributeValues?: string | undefined;
                        count?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_66 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                        scannedCount?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_67 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                    } & { [K_68 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                    sqs?: ({
                        queueName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        queueName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_69 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_70 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                    sns?: ({
                        topicName?: string | undefined;
                        messageIds?: string[] | undefined;
                    } & {
                        topicName?: string | undefined;
                        messageIds?: (string[] & string[] & { [K_71 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                    } & { [K_72 in Exclude<keyof I_1["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                } & { [K_73 in Exclude<keyof I_1["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                accountId?: string | undefined;
                region?: string | undefined;
                requestId?: string | undefined;
                resourceName?: string | undefined;
                sequenceId?: string | undefined;
                logGroup?: string | undefined;
                logStream?: string | undefined;
            } & { [K_74 in Exclude<keyof I_1["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
            http?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_75 in Exclude<keyof I_1["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_76 in Exclude<keyof I_1["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_77 in Exclude<keyof I_1["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
            https?: ({
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: string[] | undefined;
                requestHeaderNames?: string[] | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & {
                method?: string | undefined;
                protocol?: string | undefined;
                host?: string | undefined;
                path?: string | undefined;
                queryParameterNames?: (string[] & string[] & { [K_78 in Exclude<keyof I_1["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                requestHeaderNames?: (string[] & string[] & { [K_79 in Exclude<keyof I_1["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                statusCode?: number | undefined;
                errorCode?: string | undefined;
            } & { [K_80 in Exclude<keyof I_1["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_81 in Exclude<keyof I_1["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
            orgId?: string | undefined;
            error?: ({
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & {
                name?: string | undefined;
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: ErrorTags_ErrorType | undefined;
            } & { [K_82 in Exclude<keyof I_1["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
            warning?: ({
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & {
                message?: string | undefined;
                stacktrace?: string | undefined;
                type?: WarningTags_WarningType | undefined;
            } & { [K_83 in Exclude<keyof I_1["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
            notice?: ({
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & {
                message?: string | undefined;
                type?: NoticeTags_NoticeType | undefined;
            } & { [K_84 in Exclude<keyof I_1["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
        } & { [K_85 in Exclude<keyof I_1["tags"], keyof Tags>]: never; }) | undefined;
        isHistorical?: boolean | undefined;
        type?: string | undefined;
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_86 in Exclude<keyof I_1["timestamp"], keyof Long>]: never; }) | undefined;
    } & { [K_87 in Exclude<keyof I_1, keyof RequestResponse>]: never; }>(object: I_1): RequestResponse;
};

/**
 * A DevMode Payload is a message that will contain reqRes data or span data
 * that is forwarded to ingest via the internal extension
 */
interface DevModePayload {
    /** The AWS Account ID where this payload originated from */
    accountId: string;
    /** The AWS Region where this payload originated from */
    region: string;
    /** The lambda request id where this payload originated from */
    requestId: string;
    /** Extracted Lambda Telemetry API data */
    telemetry?: LambdaTelemetry | undefined;
    payload?: {
        $case: "trace";
        trace: TracePayload;
    } | {
        $case: "requestResponse";
        requestResponse: RequestResponse;
    };
}
declare const DevModePayload: {
    encode(message: DevModePayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevModePayload;
    fromJSON(object: any): DevModePayload;
    toJSON(message: DevModePayload): unknown;
    create<I extends {
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        telemetry?: {
            initDurationMs?: number | undefined;
            runtimeDurationMs?: number | undefined;
            runtimeResponseLatencyMs?: number | undefined;
        } | undefined;
        payload?: ({
            trace?: {
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                spans?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[] | undefined;
                events?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[] | undefined;
                customTags?: string | undefined;
                isSampledOut?: boolean | undefined;
            } | undefined;
        } & {
            $case: "trace";
        }) | ({
            requestResponse?: {
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                requestId?: string | undefined;
                body?: string | undefined;
                origin?: RequestResponse_Origin | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                timestamp?: string | number | Long | undefined;
            } | undefined;
        } & {
            $case: "requestResponse";
        }) | undefined;
    } & {
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        telemetry?: ({
            initDurationMs?: number | undefined;
            runtimeDurationMs?: number | undefined;
            runtimeResponseLatencyMs?: number | undefined;
        } & {
            initDurationMs?: number | undefined;
            runtimeDurationMs?: number | undefined;
            runtimeResponseLatencyMs?: number | undefined;
        } & { [K in Exclude<keyof I["telemetry"], keyof LambdaTelemetry>]: never; }) | undefined;
        payload?: ({
            trace?: {
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                spans?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[] | undefined;
                events?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[] | undefined;
                customTags?: string | undefined;
                isSampledOut?: boolean | undefined;
            } | undefined;
        } & {
            $case: "trace";
        } & {
            trace?: ({
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                spans?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[] | undefined;
                events?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[] | undefined;
                customTags?: string | undefined;
                isSampledOut?: boolean | undefined;
            } & {
                slsTags?: ({
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } & {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["payload"]["trace"]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } & { [K_2 in Exclude<keyof I["payload"]["trace"]["slsTags"], keyof SlsTags>]: never; }) | undefined;
                spans?: ({
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[] & ({
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                } & {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_3 in Exclude<keyof I["payload"]["trace"]["spans"][number]["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
                    endTimeUnixNano?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_4 in Exclude<keyof I["payload"]["trace"]["spans"][number]["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
                    tags?: ({
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } & {
                        aws?: ({
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } & {
                            lambda?: ({
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } & {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_5 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                                logsEndTimeUnix?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_6 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: ({
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    queueName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_7 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_8 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                                sns?: ({
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    topicName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_9 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_10 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                                http?: ({
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } & {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: (string[] & string[] & { [K_11 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                    requestHeaderNames?: (string[] & string[] & { [K_12 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } & { [K_13 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                                apiGateway?: ({
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } & {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: ({
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } & {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | (Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | Long) => Long;
                                            and: (other: string | number | Long) => Long;
                                            compare: (other: string | number | Long) => number;
                                            comp: (other: string | number | Long) => number;
                                            divide: (divisor: string | number | Long) => Long;
                                            div: (divisor: string | number | Long) => Long;
                                            equals: (other: string | number | Long) => boolean;
                                            eq: (other: string | number | Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | Long) => boolean;
                                            gt: (other: string | number | Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                                            gte: (other: string | number | Long) => boolean;
                                            ge: (other: string | number | Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            eqz: () => boolean;
                                            lessThan: (other: string | number | Long) => boolean;
                                            lt: (other: string | number | Long) => boolean;
                                            lessThanOrEqual: (other: string | number | Long) => boolean;
                                            lte: (other: string | number | Long) => boolean;
                                            le: (other: string | number | Long) => boolean;
                                            modulo: (other: string | number | Long) => Long;
                                            mod: (other: string | number | Long) => Long;
                                            rem: (other: string | number | Long) => Long;
                                            multiply: (multiplier: string | number | Long) => Long;
                                            mul: (multiplier: string | number | Long) => Long;
                                            negate: () => Long;
                                            neg: () => Long;
                                            not: () => Long;
                                            countLeadingZeros: () => number;
                                            clz: () => number;
                                            countTrailingZeros: () => number;
                                            ctz: () => number;
                                            notEquals: (other: string | number | Long) => boolean;
                                            neq: (other: string | number | Long) => boolean;
                                            ne: (other: string | number | Long) => boolean;
                                            or: (other: string | number | Long) => Long;
                                            shiftLeft: (numBits: number | Long) => Long;
                                            shl: (numBits: number | Long) => Long;
                                            shiftRight: (numBits: number | Long) => Long;
                                            shr: (numBits: number | Long) => Long;
                                            shiftRightUnsigned: (numBits: number | Long) => Long;
                                            shru: (numBits: number | Long) => Long;
                                            shr_u: (numBits: number | Long) => Long;
                                            rotateLeft: (numBits: number | Long) => Long;
                                            rotl: (numBits: number | Long) => Long;
                                            rotateRight: (numBits: number | Long) => Long;
                                            rotr: (numBits: number | Long) => Long;
                                            subtract: (subtrahend: string | number | Long) => Long;
                                            sub: (subtrahend: string | number | Long) => Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean | undefined) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => Long;
                                            toString: (radix?: number | undefined) => string;
                                            toUnsigned: () => Long;
                                            xor: (other: string | number | Long) => Long;
                                        } & { [K_14 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                        pathParameterNames?: (string[] & string[] & { [K_15 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                    } & { [K_16 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                                } & { [K_17 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                                httpRouter?: ({
                                    path?: string | undefined;
                                } & {
                                    path?: string | undefined;
                                } & { [K_18 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                                initialization?: ({
                                    initializationDuration?: number | undefined;
                                } & {
                                    initializationDuration?: number | undefined;
                                } & { [K_19 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                                invocation?: ({
                                    invocationDuration?: number | undefined;
                                } & {
                                    invocationDuration?: number | undefined;
                                } & { [K_20 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                                runtime?: ({
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } & {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } & { [K_21 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                            } & { [K_22 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                            sdk?: ({
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } & {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: ({
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } & {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: (string[] & string[] & { [K_23 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_24 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_25 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                    scannedCount?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_26 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                                } & { [K_27 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                                sqs?: ({
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    queueName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_28 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_29 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                                sns?: ({
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    topicName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_30 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_31 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                            } & { [K_32 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } & { [K_33 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_34 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_35 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_36 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                        https?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_37 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_38 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_39 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                        sdk?: ({
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } & {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } & { [K_40 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: ({
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } & {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } & { [K_41 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                        warning?: ({
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } & {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } & { [K_42 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                        notice?: ({
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } & {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } & { [K_43 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                    } & { [K_44 in Exclude<keyof I["payload"]["trace"]["spans"][number]["tags"], keyof Tags>]: never; }) | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_45 in Exclude<keyof I["payload"]["trace"]["spans"][number]["timestamp"], keyof Long>]: never; }) | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                } & { [K_46 in Exclude<keyof I["payload"]["trace"]["spans"][number], keyof Span>]: never; })[] & { [K_47 in Exclude<keyof I["payload"]["trace"]["spans"], keyof {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[]>]: never; }) | undefined;
                events?: ({
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[] & ({
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                } & {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_48 in Exclude<keyof I["payload"]["trace"]["events"][number]["timestampUnixNano"], keyof Long>]: never; }) | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: ({
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } & {
                        aws?: ({
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } & {
                            lambda?: ({
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } & {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_49 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                                logsEndTimeUnix?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_50 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: ({
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    queueName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_51 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_52 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                                sns?: ({
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    topicName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_53 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_54 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                                http?: ({
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } & {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: (string[] & string[] & { [K_55 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                    requestHeaderNames?: (string[] & string[] & { [K_56 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } & { [K_57 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                                apiGateway?: ({
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } & {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: ({
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } & {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | (Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | Long) => Long;
                                            and: (other: string | number | Long) => Long;
                                            compare: (other: string | number | Long) => number;
                                            comp: (other: string | number | Long) => number;
                                            divide: (divisor: string | number | Long) => Long;
                                            div: (divisor: string | number | Long) => Long;
                                            equals: (other: string | number | Long) => boolean;
                                            eq: (other: string | number | Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | Long) => boolean;
                                            gt: (other: string | number | Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                                            gte: (other: string | number | Long) => boolean;
                                            ge: (other: string | number | Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            eqz: () => boolean;
                                            lessThan: (other: string | number | Long) => boolean;
                                            lt: (other: string | number | Long) => boolean;
                                            lessThanOrEqual: (other: string | number | Long) => boolean;
                                            lte: (other: string | number | Long) => boolean;
                                            le: (other: string | number | Long) => boolean;
                                            modulo: (other: string | number | Long) => Long;
                                            mod: (other: string | number | Long) => Long;
                                            rem: (other: string | number | Long) => Long;
                                            multiply: (multiplier: string | number | Long) => Long;
                                            mul: (multiplier: string | number | Long) => Long;
                                            negate: () => Long;
                                            neg: () => Long;
                                            not: () => Long;
                                            countLeadingZeros: () => number;
                                            clz: () => number;
                                            countTrailingZeros: () => number;
                                            ctz: () => number;
                                            notEquals: (other: string | number | Long) => boolean;
                                            neq: (other: string | number | Long) => boolean;
                                            ne: (other: string | number | Long) => boolean;
                                            or: (other: string | number | Long) => Long;
                                            shiftLeft: (numBits: number | Long) => Long;
                                            shl: (numBits: number | Long) => Long;
                                            shiftRight: (numBits: number | Long) => Long;
                                            shr: (numBits: number | Long) => Long;
                                            shiftRightUnsigned: (numBits: number | Long) => Long;
                                            shru: (numBits: number | Long) => Long;
                                            shr_u: (numBits: number | Long) => Long;
                                            rotateLeft: (numBits: number | Long) => Long;
                                            rotl: (numBits: number | Long) => Long;
                                            rotateRight: (numBits: number | Long) => Long;
                                            rotr: (numBits: number | Long) => Long;
                                            subtract: (subtrahend: string | number | Long) => Long;
                                            sub: (subtrahend: string | number | Long) => Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean | undefined) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => Long;
                                            toString: (radix?: number | undefined) => string;
                                            toUnsigned: () => Long;
                                            xor: (other: string | number | Long) => Long;
                                        } & { [K_58 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                        pathParameterNames?: (string[] & string[] & { [K_59 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                    } & { [K_60 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                                } & { [K_61 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                                httpRouter?: ({
                                    path?: string | undefined;
                                } & {
                                    path?: string | undefined;
                                } & { [K_62 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                                initialization?: ({
                                    initializationDuration?: number | undefined;
                                } & {
                                    initializationDuration?: number | undefined;
                                } & { [K_63 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                                invocation?: ({
                                    invocationDuration?: number | undefined;
                                } & {
                                    invocationDuration?: number | undefined;
                                } & { [K_64 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                                runtime?: ({
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } & {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } & { [K_65 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                            } & { [K_66 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                            sdk?: ({
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } & {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: ({
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } & {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: (string[] & string[] & { [K_67 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_68 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_69 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                    scannedCount?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_70 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                                } & { [K_71 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                                sqs?: ({
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    queueName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_72 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_73 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                                sns?: ({
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    topicName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_74 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_75 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                            } & { [K_76 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } & { [K_77 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_78 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_79 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_80 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                        https?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_81 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_82 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_83 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                        sdk?: ({
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } & {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } & { [K_84 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: ({
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } & {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } & { [K_85 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                        warning?: ({
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } & {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } & { [K_86 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                        notice?: ({
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } & {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } & { [K_87 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                    } & { [K_88 in Exclude<keyof I["payload"]["trace"]["events"][number]["tags"], keyof Tags>]: never; }) | undefined;
                } & { [K_89 in Exclude<keyof I["payload"]["trace"]["events"][number], keyof Event>]: never; })[] & { [K_90 in Exclude<keyof I["payload"]["trace"]["events"], keyof {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[]>]: never; }) | undefined;
                customTags?: string | undefined;
                isSampledOut?: boolean | undefined;
            } & { [K_91 in Exclude<keyof I["payload"]["trace"], keyof TracePayload>]: never; }) | undefined;
            $case: "trace";
        } & { [K_92 in Exclude<keyof I["payload"], "$case" | "trace">]: never; }) | ({
            requestResponse?: {
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                requestId?: string | undefined;
                body?: string | undefined;
                origin?: RequestResponse_Origin | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                timestamp?: string | number | Long | undefined;
            } | undefined;
        } & {
            $case: "requestResponse";
        } & {
            requestResponse?: ({
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                requestId?: string | undefined;
                body?: string | undefined;
                origin?: RequestResponse_Origin | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                timestamp?: string | number | Long | undefined;
            } & {
                slsTags?: ({
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } & {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_93 in Exclude<keyof I["payload"]["requestResponse"]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } & { [K_94 in Exclude<keyof I["payload"]["requestResponse"]["slsTags"], keyof SlsTags>]: never; }) | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                requestId?: string | undefined;
                body?: string | undefined;
                origin?: RequestResponse_Origin | undefined;
                tags?: ({
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } & {
                    aws?: ({
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & {
                        lambda?: ({
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } & {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_95 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                            logsEndTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_96 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_97 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_98 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_99 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_100 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                            http?: ({
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: (string[] & string[] & { [K_101 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                requestHeaderNames?: (string[] & string[] & { [K_102 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & { [K_103 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                            apiGateway?: ({
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } & {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: ({
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } & {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_104 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                    pathParameterNames?: (string[] & string[] & { [K_105 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                } & { [K_106 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                            } & { [K_107 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                            httpRouter?: ({
                                path?: string | undefined;
                            } & {
                                path?: string | undefined;
                            } & { [K_108 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                            initialization?: ({
                                initializationDuration?: number | undefined;
                            } & {
                                initializationDuration?: number | undefined;
                            } & { [K_109 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                            invocation?: ({
                                invocationDuration?: number | undefined;
                            } & {
                                invocationDuration?: number | undefined;
                            } & { [K_110 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                            runtime?: ({
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & { [K_111 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                        } & { [K_112 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                        sdk?: ({
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } & {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: ({
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } & {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: (string[] & string[] & { [K_113 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_114 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_115 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                scannedCount?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_116 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                            } & { [K_117 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_118 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_119 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_120 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_121 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                        } & { [K_122 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & { [K_123 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_124 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_125 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_126 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                    https?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_127 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_128 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_129 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_130 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: ({
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & { [K_131 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                    warning?: ({
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & { [K_132 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                    notice?: ({
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & { [K_133 in Exclude<keyof I["payload"]["requestResponse"]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                } & { [K_134 in Exclude<keyof I["payload"]["requestResponse"]["tags"], keyof Tags>]: never; }) | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_135 in Exclude<keyof I["payload"]["requestResponse"]["timestamp"], keyof Long>]: never; }) | undefined;
            } & { [K_136 in Exclude<keyof I["payload"]["requestResponse"], keyof RequestResponse>]: never; }) | undefined;
            $case: "requestResponse";
        } & { [K_137 in Exclude<keyof I["payload"], "$case" | "requestResponse">]: never; }) | undefined;
    } & { [K_138 in Exclude<keyof I, keyof DevModePayload>]: never; }>(base?: I | undefined): DevModePayload;
    fromPartial<I_1 extends {
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        telemetry?: {
            initDurationMs?: number | undefined;
            runtimeDurationMs?: number | undefined;
            runtimeResponseLatencyMs?: number | undefined;
        } | undefined;
        payload?: ({
            trace?: {
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                spans?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[] | undefined;
                events?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[] | undefined;
                customTags?: string | undefined;
                isSampledOut?: boolean | undefined;
            } | undefined;
        } & {
            $case: "trace";
        }) | ({
            requestResponse?: {
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                requestId?: string | undefined;
                body?: string | undefined;
                origin?: RequestResponse_Origin | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                timestamp?: string | number | Long | undefined;
            } | undefined;
        } & {
            $case: "requestResponse";
        }) | undefined;
    } & {
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        telemetry?: ({
            initDurationMs?: number | undefined;
            runtimeDurationMs?: number | undefined;
            runtimeResponseLatencyMs?: number | undefined;
        } & {
            initDurationMs?: number | undefined;
            runtimeDurationMs?: number | undefined;
            runtimeResponseLatencyMs?: number | undefined;
        } & { [K_139 in Exclude<keyof I_1["telemetry"], keyof LambdaTelemetry>]: never; }) | undefined;
        payload?: ({
            trace?: {
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                spans?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[] | undefined;
                events?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[] | undefined;
                customTags?: string | undefined;
                isSampledOut?: boolean | undefined;
            } | undefined;
        } & {
            $case: "trace";
        } & {
            trace?: ({
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                spans?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[] | undefined;
                events?: {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[] | undefined;
                customTags?: string | undefined;
                isSampledOut?: boolean | undefined;
            } & {
                slsTags?: ({
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } & {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_140 in Exclude<keyof I_1["payload"]["trace"]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } & { [K_141 in Exclude<keyof I_1["payload"]["trace"]["slsTags"], keyof SlsTags>]: never; }) | undefined;
                spans?: ({
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[] & ({
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                } & {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_142 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
                    endTimeUnixNano?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_143 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
                    tags?: ({
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } & {
                        aws?: ({
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } & {
                            lambda?: ({
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } & {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_144 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                                logsEndTimeUnix?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_145 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: ({
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    queueName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_146 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_147 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                                sns?: ({
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    topicName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_148 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_149 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                                http?: ({
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } & {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: (string[] & string[] & { [K_150 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                    requestHeaderNames?: (string[] & string[] & { [K_151 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } & { [K_152 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                                apiGateway?: ({
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } & {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: ({
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } & {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | (Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | Long) => Long;
                                            and: (other: string | number | Long) => Long;
                                            compare: (other: string | number | Long) => number;
                                            comp: (other: string | number | Long) => number;
                                            divide: (divisor: string | number | Long) => Long;
                                            div: (divisor: string | number | Long) => Long;
                                            equals: (other: string | number | Long) => boolean;
                                            eq: (other: string | number | Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | Long) => boolean;
                                            gt: (other: string | number | Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                                            gte: (other: string | number | Long) => boolean;
                                            ge: (other: string | number | Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            eqz: () => boolean;
                                            lessThan: (other: string | number | Long) => boolean;
                                            lt: (other: string | number | Long) => boolean;
                                            lessThanOrEqual: (other: string | number | Long) => boolean;
                                            lte: (other: string | number | Long) => boolean;
                                            le: (other: string | number | Long) => boolean;
                                            modulo: (other: string | number | Long) => Long;
                                            mod: (other: string | number | Long) => Long;
                                            rem: (other: string | number | Long) => Long;
                                            multiply: (multiplier: string | number | Long) => Long;
                                            mul: (multiplier: string | number | Long) => Long;
                                            negate: () => Long;
                                            neg: () => Long;
                                            not: () => Long;
                                            countLeadingZeros: () => number;
                                            clz: () => number;
                                            countTrailingZeros: () => number;
                                            ctz: () => number;
                                            notEquals: (other: string | number | Long) => boolean;
                                            neq: (other: string | number | Long) => boolean;
                                            ne: (other: string | number | Long) => boolean;
                                            or: (other: string | number | Long) => Long;
                                            shiftLeft: (numBits: number | Long) => Long;
                                            shl: (numBits: number | Long) => Long;
                                            shiftRight: (numBits: number | Long) => Long;
                                            shr: (numBits: number | Long) => Long;
                                            shiftRightUnsigned: (numBits: number | Long) => Long;
                                            shru: (numBits: number | Long) => Long;
                                            shr_u: (numBits: number | Long) => Long;
                                            rotateLeft: (numBits: number | Long) => Long;
                                            rotl: (numBits: number | Long) => Long;
                                            rotateRight: (numBits: number | Long) => Long;
                                            rotr: (numBits: number | Long) => Long;
                                            subtract: (subtrahend: string | number | Long) => Long;
                                            sub: (subtrahend: string | number | Long) => Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean | undefined) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => Long;
                                            toString: (radix?: number | undefined) => string;
                                            toUnsigned: () => Long;
                                            xor: (other: string | number | Long) => Long;
                                        } & { [K_153 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                        pathParameterNames?: (string[] & string[] & { [K_154 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                    } & { [K_155 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                                } & { [K_156 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                                httpRouter?: ({
                                    path?: string | undefined;
                                } & {
                                    path?: string | undefined;
                                } & { [K_157 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                                initialization?: ({
                                    initializationDuration?: number | undefined;
                                } & {
                                    initializationDuration?: number | undefined;
                                } & { [K_158 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                                invocation?: ({
                                    invocationDuration?: number | undefined;
                                } & {
                                    invocationDuration?: number | undefined;
                                } & { [K_159 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                                runtime?: ({
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } & {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } & { [K_160 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                            } & { [K_161 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                            sdk?: ({
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } & {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: ({
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } & {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: (string[] & string[] & { [K_162 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_163 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_164 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                    scannedCount?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_165 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                                } & { [K_166 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                                sqs?: ({
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    queueName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_167 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_168 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                                sns?: ({
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    topicName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_169 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_170 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                            } & { [K_171 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } & { [K_172 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_173 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_174 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_175 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                        https?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_176 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_177 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_178 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                        sdk?: ({
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } & {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } & { [K_179 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: ({
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } & {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } & { [K_180 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                        warning?: ({
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } & {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } & { [K_181 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                        notice?: ({
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } & {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } & { [K_182 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                    } & { [K_183 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["tags"], keyof Tags>]: never; }) | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_184 in Exclude<keyof I_1["payload"]["trace"]["spans"][number]["timestamp"], keyof Long>]: never; }) | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                } & { [K_185 in Exclude<keyof I_1["payload"]["trace"]["spans"][number], keyof Span>]: never; })[] & { [K_186 in Exclude<keyof I_1["payload"]["trace"]["spans"], keyof {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    parentSpanId?: Uint8Array | undefined;
                    name?: string | undefined;
                    startTimeUnixNano?: string | number | Long | undefined;
                    endTimeUnixNano?: string | number | Long | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                    input?: string | undefined;
                    output?: string | undefined;
                    timestamp?: string | number | Long | undefined;
                    isHistorical?: boolean | undefined;
                    type?: string | undefined;
                    customTags?: string | undefined;
                }[]>]: never; }) | undefined;
                events?: ({
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[] & ({
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                } & {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_187 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["timestampUnixNano"], keyof Long>]: never; }) | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: ({
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } & {
                        aws?: ({
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } & {
                            lambda?: ({
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } & {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_188 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                                logsEndTimeUnix?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_189 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: ({
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    queueName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_190 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_191 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                                sns?: ({
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    topicName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_192 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_193 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                                http?: ({
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } & {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: (string[] & string[] & { [K_194 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                    requestHeaderNames?: (string[] & string[] & { [K_195 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } & { [K_196 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                                apiGateway?: ({
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } & {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: ({
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } & {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | (Long & {
                                            high: number;
                                            low: number;
                                            unsigned: boolean;
                                            add: (addend: string | number | Long) => Long;
                                            and: (other: string | number | Long) => Long;
                                            compare: (other: string | number | Long) => number;
                                            comp: (other: string | number | Long) => number;
                                            divide: (divisor: string | number | Long) => Long;
                                            div: (divisor: string | number | Long) => Long;
                                            equals: (other: string | number | Long) => boolean;
                                            eq: (other: string | number | Long) => boolean;
                                            getHighBits: () => number;
                                            getHighBitsUnsigned: () => number;
                                            getLowBits: () => number;
                                            getLowBitsUnsigned: () => number;
                                            getNumBitsAbs: () => number;
                                            greaterThan: (other: string | number | Long) => boolean;
                                            gt: (other: string | number | Long) => boolean;
                                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                                            gte: (other: string | number | Long) => boolean;
                                            ge: (other: string | number | Long) => boolean;
                                            isEven: () => boolean;
                                            isNegative: () => boolean;
                                            isOdd: () => boolean;
                                            isPositive: () => boolean;
                                            isZero: () => boolean;
                                            eqz: () => boolean;
                                            lessThan: (other: string | number | Long) => boolean;
                                            lt: (other: string | number | Long) => boolean;
                                            lessThanOrEqual: (other: string | number | Long) => boolean;
                                            lte: (other: string | number | Long) => boolean;
                                            le: (other: string | number | Long) => boolean;
                                            modulo: (other: string | number | Long) => Long;
                                            mod: (other: string | number | Long) => Long;
                                            rem: (other: string | number | Long) => Long;
                                            multiply: (multiplier: string | number | Long) => Long;
                                            mul: (multiplier: string | number | Long) => Long;
                                            negate: () => Long;
                                            neg: () => Long;
                                            not: () => Long;
                                            countLeadingZeros: () => number;
                                            clz: () => number;
                                            countTrailingZeros: () => number;
                                            ctz: () => number;
                                            notEquals: (other: string | number | Long) => boolean;
                                            neq: (other: string | number | Long) => boolean;
                                            ne: (other: string | number | Long) => boolean;
                                            or: (other: string | number | Long) => Long;
                                            shiftLeft: (numBits: number | Long) => Long;
                                            shl: (numBits: number | Long) => Long;
                                            shiftRight: (numBits: number | Long) => Long;
                                            shr: (numBits: number | Long) => Long;
                                            shiftRightUnsigned: (numBits: number | Long) => Long;
                                            shru: (numBits: number | Long) => Long;
                                            shr_u: (numBits: number | Long) => Long;
                                            rotateLeft: (numBits: number | Long) => Long;
                                            rotl: (numBits: number | Long) => Long;
                                            rotateRight: (numBits: number | Long) => Long;
                                            rotr: (numBits: number | Long) => Long;
                                            subtract: (subtrahend: string | number | Long) => Long;
                                            sub: (subtrahend: string | number | Long) => Long;
                                            toInt: () => number;
                                            toNumber: () => number;
                                            toBytes: (le?: boolean | undefined) => number[];
                                            toBytesLE: () => number[];
                                            toBytesBE: () => number[];
                                            toSigned: () => Long;
                                            toString: (radix?: number | undefined) => string;
                                            toUnsigned: () => Long;
                                            xor: (other: string | number | Long) => Long;
                                        } & { [K_197 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                        pathParameterNames?: (string[] & string[] & { [K_198 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                    } & { [K_199 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                                } & { [K_200 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                                httpRouter?: ({
                                    path?: string | undefined;
                                } & {
                                    path?: string | undefined;
                                } & { [K_201 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                                initialization?: ({
                                    initializationDuration?: number | undefined;
                                } & {
                                    initializationDuration?: number | undefined;
                                } & { [K_202 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                                invocation?: ({
                                    invocationDuration?: number | undefined;
                                } & {
                                    invocationDuration?: number | undefined;
                                } & { [K_203 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                                runtime?: ({
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } & {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } & { [K_204 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                            } & { [K_205 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                            sdk?: ({
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } & {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: ({
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } & {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: (string[] & string[] & { [K_206 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_207 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_208 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                    scannedCount?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_209 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                                } & { [K_210 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                                sqs?: ({
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    queueName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_211 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_212 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                                sns?: ({
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } & {
                                    topicName?: string | undefined;
                                    messageIds?: (string[] & string[] & { [K_213 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                                } & { [K_214 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                            } & { [K_215 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } & { [K_216 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_217 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_218 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_219 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                        https?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_220 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_221 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_222 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                        sdk?: ({
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } & {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } & { [K_223 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: ({
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } & {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } & { [K_224 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                        warning?: ({
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } & {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } & { [K_225 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                        notice?: ({
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } & {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } & { [K_226 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                    } & { [K_227 in Exclude<keyof I_1["payload"]["trace"]["events"][number]["tags"], keyof Tags>]: never; }) | undefined;
                } & { [K_228 in Exclude<keyof I_1["payload"]["trace"]["events"][number], keyof Event>]: never; })[] & { [K_229 in Exclude<keyof I_1["payload"]["trace"]["events"], keyof {
                    id?: Uint8Array | undefined;
                    traceId?: Uint8Array | undefined;
                    spanId?: Uint8Array | undefined;
                    timestampUnixNano?: string | number | Long | undefined;
                    eventName?: string | undefined;
                    customTags?: string | undefined;
                    customFingerprint?: string | undefined;
                    tags?: {
                        aws?: {
                            lambda?: {
                                arch?: string | undefined;
                                isColdstart?: boolean | undefined;
                                eventType?: string | undefined;
                                eventSource?: string | undefined;
                                logGroup?: string | undefined;
                                logStreamName?: string | undefined;
                                maxMemory?: number | undefined;
                                name?: string | undefined;
                                requestId?: string | undefined;
                                version?: string | undefined;
                                accountId?: string | undefined;
                                outcome?: AwsLambdaTags_Outcome | undefined;
                                errorExceptionMessage?: string | undefined;
                                errorExceptionStacktrace?: string | undefined;
                                duration?: number | undefined;
                                requestBody?: string | undefined;
                                responseBody?: string | undefined;
                                logsStartTimeUnix?: string | number | Long | undefined;
                                logsEndTimeUnix?: string | number | Long | undefined;
                                responseMode?: AwsLambdaTags_ResponseMode | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                http?: {
                                    method?: string | undefined;
                                    protocol?: string | undefined;
                                    host?: string | undefined;
                                    path?: string | undefined;
                                    queryParameterNames?: string[] | undefined;
                                    requestHeaderNames?: string[] | undefined;
                                    statusCode?: number | undefined;
                                    errorCode?: string | undefined;
                                } | undefined;
                                apiGateway?: {
                                    accountId?: string | undefined;
                                    apiId?: string | undefined;
                                    apiStage?: string | undefined;
                                    request?: {
                                        id?: string | undefined;
                                        timeEpoch?: string | number | Long | undefined;
                                        pathParameterNames?: string[] | undefined;
                                    } | undefined;
                                } | undefined;
                                httpRouter?: {
                                    path?: string | undefined;
                                } | undefined;
                                initialization?: {
                                    initializationDuration?: number | undefined;
                                } | undefined;
                                invocation?: {
                                    invocationDuration?: number | undefined;
                                } | undefined;
                                runtime?: {
                                    identifier?: string | undefined;
                                    version?: string | undefined;
                                    arn?: string | undefined;
                                } | undefined;
                            } | undefined;
                            sdk?: {
                                region?: string | undefined;
                                signatureVersion?: string | undefined;
                                service?: string | undefined;
                                operation?: string | undefined;
                                requestId?: string | undefined;
                                error?: string | undefined;
                                dynamodb?: {
                                    tableName?: string | undefined;
                                    projection?: string | undefined;
                                    scanForward?: boolean | undefined;
                                    attributesToGet?: string[] | undefined;
                                    consistentRead?: boolean | undefined;
                                    indexName?: string | undefined;
                                    limit?: number | undefined;
                                    select?: string | undefined;
                                    segment?: number | undefined;
                                    totalSegments?: string | number | Long | undefined;
                                    filter?: string | undefined;
                                    keyCondition?: string | undefined;
                                    exclusiveStartKey?: string | undefined;
                                    attributeValues?: string | undefined;
                                    count?: string | number | Long | undefined;
                                    scannedCount?: string | number | Long | undefined;
                                } | undefined;
                                sqs?: {
                                    queueName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                                sns?: {
                                    topicName?: string | undefined;
                                    messageIds?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            accountId?: string | undefined;
                            region?: string | undefined;
                            requestId?: string | undefined;
                            resourceName?: string | undefined;
                            sequenceId?: string | undefined;
                            logGroup?: string | undefined;
                            logStream?: string | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        https?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        sdk?: {
                            name?: string | undefined;
                            version?: string | undefined;
                            runtime?: string | undefined;
                        } | undefined;
                        environment?: string | undefined;
                        namespace?: string | undefined;
                        orgId?: string | undefined;
                        error?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: ErrorTags_ErrorType | undefined;
                        } | undefined;
                        warning?: {
                            message?: string | undefined;
                            stacktrace?: string | undefined;
                            type?: WarningTags_WarningType | undefined;
                        } | undefined;
                        notice?: {
                            message?: string | undefined;
                            type?: NoticeTags_NoticeType | undefined;
                        } | undefined;
                    } | undefined;
                }[]>]: never; }) | undefined;
                customTags?: string | undefined;
                isSampledOut?: boolean | undefined;
            } & { [K_230 in Exclude<keyof I_1["payload"]["trace"], keyof TracePayload>]: never; }) | undefined;
            $case: "trace";
        } & { [K_231 in Exclude<keyof I_1["payload"], "$case" | "trace">]: never; }) | ({
            requestResponse?: {
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                requestId?: string | undefined;
                body?: string | undefined;
                origin?: RequestResponse_Origin | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                timestamp?: string | number | Long | undefined;
            } | undefined;
        } & {
            $case: "requestResponse";
        } & {
            requestResponse?: ({
                slsTags?: {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                requestId?: string | undefined;
                body?: string | undefined;
                origin?: RequestResponse_Origin | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                timestamp?: string | number | Long | undefined;
            } & {
                slsTags?: ({
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } & {
                    orgId?: string | undefined;
                    platform?: string | undefined;
                    service?: string | undefined;
                    region?: string | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_232 in Exclude<keyof I_1["payload"]["requestResponse"]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                } & { [K_233 in Exclude<keyof I_1["payload"]["requestResponse"]["slsTags"], keyof SlsTags>]: never; }) | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                requestId?: string | undefined;
                body?: string | undefined;
                origin?: RequestResponse_Origin | undefined;
                tags?: ({
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } & {
                    aws?: ({
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & {
                        lambda?: ({
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } & {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_234 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                            logsEndTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_235 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_236 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_237 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_238 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_239 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                            http?: ({
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: (string[] & string[] & { [K_240 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                requestHeaderNames?: (string[] & string[] & { [K_241 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & { [K_242 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                            apiGateway?: ({
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } & {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: ({
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } & {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_243 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                    pathParameterNames?: (string[] & string[] & { [K_244 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                } & { [K_245 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                            } & { [K_246 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                            httpRouter?: ({
                                path?: string | undefined;
                            } & {
                                path?: string | undefined;
                            } & { [K_247 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                            initialization?: ({
                                initializationDuration?: number | undefined;
                            } & {
                                initializationDuration?: number | undefined;
                            } & { [K_248 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                            invocation?: ({
                                invocationDuration?: number | undefined;
                            } & {
                                invocationDuration?: number | undefined;
                            } & { [K_249 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                            runtime?: ({
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & { [K_250 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                        } & { [K_251 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                        sdk?: ({
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } & {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: ({
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } & {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: (string[] & string[] & { [K_252 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_253 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_254 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                scannedCount?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_255 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                            } & { [K_256 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_257 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_258 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_259 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_260 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                        } & { [K_261 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & { [K_262 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_263 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_264 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_265 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                    https?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_266 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_267 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_268 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_269 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: ({
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & { [K_270 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                    warning?: ({
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & { [K_271 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                    notice?: ({
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & { [K_272 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                } & { [K_273 in Exclude<keyof I_1["payload"]["requestResponse"]["tags"], keyof Tags>]: never; }) | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_274 in Exclude<keyof I_1["payload"]["requestResponse"]["timestamp"], keyof Long>]: never; }) | undefined;
            } & { [K_275 in Exclude<keyof I_1["payload"]["requestResponse"], keyof RequestResponse>]: never; }) | undefined;
            $case: "requestResponse";
        } & { [K_276 in Exclude<keyof I_1["payload"], "$case" | "requestResponse">]: never; }) | undefined;
    } & { [K_277 in Exclude<keyof I_1, keyof DevModePayload>]: never; }>(object: I_1): DevModePayload;
};
/**
 * DevMode Transport Payload that will be used to aggregate reqRes, traces, and logs
 * into a single payload that will be packaged and sent to our DevMode ingest.
 */
interface DevModeTransportPayload {
    /** The AWS Account ID where this payload originated from */
    accountId: string;
    /** The AWS Region where this payload originated from */
    region: string;
    /** The lambda request id where this payload originated from */
    requestId: string;
    /** The request/response data from the instrumented lambda function */
    requestResponse: RequestResponse[];
    /** The set of lambda traces that were generated via an internal extension */
    traces: TracePayload[];
    /** The logs generated via the telemetry API */
    logs: LogPayload[];
}
declare const DevModeTransportPayload: {
    encode(message: DevModeTransportPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevModeTransportPayload;
    fromJSON(object: any): DevModeTransportPayload;
    toJSON(message: DevModeTransportPayload): unknown;
    create<I extends {
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        requestResponse?: {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | Long | undefined;
        }[] | undefined;
        traces?: {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            spans?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] | undefined;
            events?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        }[] | undefined;
        logs?: {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            logEvents?: {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        requestResponse?: ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | Long | undefined;
        }[] & ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | Long | undefined;
        } & {
            slsTags?: ({
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K in Exclude<keyof I["requestResponse"][number]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & { [K_1 in Exclude<keyof I["requestResponse"][number]["slsTags"], keyof SlsTags>]: never; }) | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_2 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_3 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_4 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_5 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_6 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_7 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_8 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_9 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_10 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_11 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_12 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_13 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_14 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_15 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_16 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_17 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_18 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_19 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_20 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_21 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_22 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_23 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_24 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_25 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_26 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_27 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_28 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_29 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_30 in Exclude<keyof I["requestResponse"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_31 in Exclude<keyof I["requestResponse"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_32 in Exclude<keyof I["requestResponse"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_33 in Exclude<keyof I["requestResponse"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_34 in Exclude<keyof I["requestResponse"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_35 in Exclude<keyof I["requestResponse"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_36 in Exclude<keyof I["requestResponse"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_37 in Exclude<keyof I["requestResponse"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_38 in Exclude<keyof I["requestResponse"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_39 in Exclude<keyof I["requestResponse"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_40 in Exclude<keyof I["requestResponse"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_41 in Exclude<keyof I["requestResponse"][number]["tags"], keyof Tags>]: never; }) | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_42 in Exclude<keyof I["requestResponse"][number]["timestamp"], keyof Long>]: never; }) | undefined;
        } & { [K_43 in Exclude<keyof I["requestResponse"][number], keyof RequestResponse>]: never; })[] & { [K_44 in Exclude<keyof I["requestResponse"], keyof {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | Long | undefined;
        }[]>]: never; }) | undefined;
        traces?: ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            spans?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] | undefined;
            events?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        }[] & ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            spans?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] | undefined;
            events?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        } & {
            slsTags?: ({
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_45 in Exclude<keyof I["traces"][number]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & { [K_46 in Exclude<keyof I["traces"][number]["slsTags"], keyof SlsTags>]: never; }) | undefined;
            spans?: ({
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] & ({
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            } & {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_47 in Exclude<keyof I["traces"][number]["spans"][number]["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
                endTimeUnixNano?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_48 in Exclude<keyof I["traces"][number]["spans"][number]["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
                tags?: ({
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } & {
                    aws?: ({
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & {
                        lambda?: ({
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } & {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_49 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                            logsEndTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_50 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_51 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_52 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_53 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_54 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                            http?: ({
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: (string[] & string[] & { [K_55 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                requestHeaderNames?: (string[] & string[] & { [K_56 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & { [K_57 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                            apiGateway?: ({
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } & {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: ({
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } & {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_58 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                    pathParameterNames?: (string[] & string[] & { [K_59 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                } & { [K_60 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                            } & { [K_61 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                            httpRouter?: ({
                                path?: string | undefined;
                            } & {
                                path?: string | undefined;
                            } & { [K_62 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                            initialization?: ({
                                initializationDuration?: number | undefined;
                            } & {
                                initializationDuration?: number | undefined;
                            } & { [K_63 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                            invocation?: ({
                                invocationDuration?: number | undefined;
                            } & {
                                invocationDuration?: number | undefined;
                            } & { [K_64 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                            runtime?: ({
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & { [K_65 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                        } & { [K_66 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                        sdk?: ({
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } & {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: ({
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } & {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: (string[] & string[] & { [K_67 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_68 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_69 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                scannedCount?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_70 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                            } & { [K_71 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_72 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_73 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_74 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_75 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                        } & { [K_76 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & { [K_77 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_78 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_79 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_80 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                    https?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_81 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_82 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_83 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_84 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: ({
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & { [K_85 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                    warning?: ({
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & { [K_86 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                    notice?: ({
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & { [K_87 in Exclude<keyof I["traces"][number]["spans"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                } & { [K_88 in Exclude<keyof I["traces"][number]["spans"][number]["tags"], keyof Tags>]: never; }) | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_89 in Exclude<keyof I["traces"][number]["spans"][number]["timestamp"], keyof Long>]: never; }) | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            } & { [K_90 in Exclude<keyof I["traces"][number]["spans"][number], keyof Span>]: never; })[] & { [K_91 in Exclude<keyof I["traces"][number]["spans"], keyof {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[]>]: never; }) | undefined;
            events?: ({
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] & ({
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            } & {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_92 in Exclude<keyof I["traces"][number]["events"][number]["timestampUnixNano"], keyof Long>]: never; }) | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: ({
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } & {
                    aws?: ({
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & {
                        lambda?: ({
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } & {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_93 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                            logsEndTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_94 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_95 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_96 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_97 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_98 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                            http?: ({
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: (string[] & string[] & { [K_99 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                requestHeaderNames?: (string[] & string[] & { [K_100 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & { [K_101 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                            apiGateway?: ({
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } & {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: ({
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } & {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_102 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                    pathParameterNames?: (string[] & string[] & { [K_103 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                } & { [K_104 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                            } & { [K_105 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                            httpRouter?: ({
                                path?: string | undefined;
                            } & {
                                path?: string | undefined;
                            } & { [K_106 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                            initialization?: ({
                                initializationDuration?: number | undefined;
                            } & {
                                initializationDuration?: number | undefined;
                            } & { [K_107 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                            invocation?: ({
                                invocationDuration?: number | undefined;
                            } & {
                                invocationDuration?: number | undefined;
                            } & { [K_108 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                            runtime?: ({
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & { [K_109 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                        } & { [K_110 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                        sdk?: ({
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } & {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: ({
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } & {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: (string[] & string[] & { [K_111 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_112 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_113 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                scannedCount?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_114 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                            } & { [K_115 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_116 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_117 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_118 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_119 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                        } & { [K_120 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & { [K_121 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_122 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_123 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_124 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                    https?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_125 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_126 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_127 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_128 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: ({
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & { [K_129 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                    warning?: ({
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & { [K_130 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                    notice?: ({
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & { [K_131 in Exclude<keyof I["traces"][number]["events"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                } & { [K_132 in Exclude<keyof I["traces"][number]["events"][number]["tags"], keyof Tags>]: never; }) | undefined;
            } & { [K_133 in Exclude<keyof I["traces"][number]["events"][number], keyof Event>]: never; })[] & { [K_134 in Exclude<keyof I["traces"][number]["events"], keyof {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[]>]: never; }) | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        } & { [K_135 in Exclude<keyof I["traces"][number], keyof TracePayload>]: never; })[] & { [K_136 in Exclude<keyof I["traces"], keyof {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            spans?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] | undefined;
            events?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        }[]>]: never; }) | undefined;
        logs?: ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            logEvents?: {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] | undefined;
        }[] & ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            logEvents?: {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] | undefined;
        } & {
            slsTags?: ({
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_137 in Exclude<keyof I["logs"][number]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & { [K_138 in Exclude<keyof I["logs"][number]["slsTags"], keyof SlsTags>]: never; }) | undefined;
            logEvents?: ({
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] & ({
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            } & {
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_139 in Exclude<keyof I["logs"][number]["logEvents"][number]["timestamp"], keyof Long>]: never; }) | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_140 in Exclude<keyof I["logs"][number]["logEvents"][number]["severityNumber"], keyof Long>]: never; }) | undefined;
                tags?: ({
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } & {
                    aws?: ({
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & {
                        lambda?: ({
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } & {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_141 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                            logsEndTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_142 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_143 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_144 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_145 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_146 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                            http?: ({
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: (string[] & string[] & { [K_147 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                requestHeaderNames?: (string[] & string[] & { [K_148 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & { [K_149 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                            apiGateway?: ({
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } & {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: ({
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } & {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_150 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                    pathParameterNames?: (string[] & string[] & { [K_151 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                } & { [K_152 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                            } & { [K_153 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                            httpRouter?: ({
                                path?: string | undefined;
                            } & {
                                path?: string | undefined;
                            } & { [K_154 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                            initialization?: ({
                                initializationDuration?: number | undefined;
                            } & {
                                initializationDuration?: number | undefined;
                            } & { [K_155 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                            invocation?: ({
                                invocationDuration?: number | undefined;
                            } & {
                                invocationDuration?: number | undefined;
                            } & { [K_156 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                            runtime?: ({
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & { [K_157 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                        } & { [K_158 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                        sdk?: ({
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } & {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: ({
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } & {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: (string[] & string[] & { [K_159 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_160 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_161 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                scannedCount?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_162 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                            } & { [K_163 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_164 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_165 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_166 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_167 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                        } & { [K_168 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & { [K_169 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_170 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_171 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_172 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                    https?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_173 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_174 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_175 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_176 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: ({
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & { [K_177 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                    warning?: ({
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & { [K_178 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                    notice?: ({
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & { [K_179 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                } & { [K_180 in Exclude<keyof I["logs"][number]["logEvents"][number]["tags"], keyof Tags>]: never; }) | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            } & { [K_181 in Exclude<keyof I["logs"][number]["logEvents"][number], keyof LogEvent>]: never; })[] & { [K_182 in Exclude<keyof I["logs"][number]["logEvents"], keyof {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_183 in Exclude<keyof I["logs"][number], keyof LogPayload>]: never; })[] & { [K_184 in Exclude<keyof I["logs"], keyof {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            logEvents?: {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_185 in Exclude<keyof I, keyof DevModeTransportPayload>]: never; }>(base?: I | undefined): DevModeTransportPayload;
    fromPartial<I_1 extends {
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        requestResponse?: {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | Long | undefined;
        }[] | undefined;
        traces?: {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            spans?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] | undefined;
            events?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        }[] | undefined;
        logs?: {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            logEvents?: {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        accountId?: string | undefined;
        region?: string | undefined;
        requestId?: string | undefined;
        requestResponse?: ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | Long | undefined;
        }[] & ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | Long | undefined;
        } & {
            slsTags?: ({
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_186 in Exclude<keyof I_1["requestResponse"][number]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & { [K_187 in Exclude<keyof I_1["requestResponse"][number]["slsTags"], keyof SlsTags>]: never; }) | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: ({
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } & {
                aws?: ({
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & {
                    lambda?: ({
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } & {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_188 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                        logsEndTimeUnix?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_189 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_190 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_191 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_192 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_193 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                        http?: ({
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: (string[] & string[] & { [K_194 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                            requestHeaderNames?: (string[] & string[] & { [K_195 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } & { [K_196 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                        apiGateway?: ({
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } & {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: ({
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } & {
                                id?: string | undefined;
                                timeEpoch?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_197 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                pathParameterNames?: (string[] & string[] & { [K_198 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                            } & { [K_199 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                        } & { [K_200 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                        httpRouter?: ({
                            path?: string | undefined;
                        } & {
                            path?: string | undefined;
                        } & { [K_201 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                        initialization?: ({
                            initializationDuration?: number | undefined;
                        } & {
                            initializationDuration?: number | undefined;
                        } & { [K_202 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                        invocation?: ({
                            invocationDuration?: number | undefined;
                        } & {
                            invocationDuration?: number | undefined;
                        } & { [K_203 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                        runtime?: ({
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } & { [K_204 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                    } & { [K_205 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                    sdk?: ({
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } & {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: ({
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } & {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: (string[] & string[] & { [K_206 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_207 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_208 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                            scannedCount?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_209 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                        } & { [K_210 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                        sqs?: ({
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            queueName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_211 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_212 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                        sns?: ({
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } & {
                            topicName?: string | undefined;
                            messageIds?: (string[] & string[] & { [K_213 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                        } & { [K_214 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                    } & { [K_215 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } & { [K_216 in Exclude<keyof I_1["requestResponse"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                http?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_217 in Exclude<keyof I_1["requestResponse"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_218 in Exclude<keyof I_1["requestResponse"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_219 in Exclude<keyof I_1["requestResponse"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                https?: ({
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: (string[] & string[] & { [K_220 in Exclude<keyof I_1["requestResponse"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                    requestHeaderNames?: (string[] & string[] & { [K_221 in Exclude<keyof I_1["requestResponse"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } & { [K_222 in Exclude<keyof I_1["requestResponse"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_223 in Exclude<keyof I_1["requestResponse"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: ({
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } & { [K_224 in Exclude<keyof I_1["requestResponse"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                warning?: ({
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } & { [K_225 in Exclude<keyof I_1["requestResponse"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                notice?: ({
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } & { [K_226 in Exclude<keyof I_1["requestResponse"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
            } & { [K_227 in Exclude<keyof I_1["requestResponse"][number]["tags"], keyof Tags>]: never; }) | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_228 in Exclude<keyof I_1["requestResponse"][number]["timestamp"], keyof Long>]: never; }) | undefined;
        } & { [K_229 in Exclude<keyof I_1["requestResponse"][number], keyof RequestResponse>]: never; })[] & { [K_230 in Exclude<keyof I_1["requestResponse"], keyof {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            traceId?: Uint8Array | undefined;
            spanId?: Uint8Array | undefined;
            requestId?: string | undefined;
            body?: string | undefined;
            origin?: RequestResponse_Origin | undefined;
            tags?: {
                aws?: {
                    lambda?: {
                        arch?: string | undefined;
                        isColdstart?: boolean | undefined;
                        eventType?: string | undefined;
                        eventSource?: string | undefined;
                        logGroup?: string | undefined;
                        logStreamName?: string | undefined;
                        maxMemory?: number | undefined;
                        name?: string | undefined;
                        requestId?: string | undefined;
                        version?: string | undefined;
                        accountId?: string | undefined;
                        outcome?: AwsLambdaTags_Outcome | undefined;
                        errorExceptionMessage?: string | undefined;
                        errorExceptionStacktrace?: string | undefined;
                        duration?: number | undefined;
                        requestBody?: string | undefined;
                        responseBody?: string | undefined;
                        logsStartTimeUnix?: string | number | Long | undefined;
                        logsEndTimeUnix?: string | number | Long | undefined;
                        responseMode?: AwsLambdaTags_ResponseMode | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        http?: {
                            method?: string | undefined;
                            protocol?: string | undefined;
                            host?: string | undefined;
                            path?: string | undefined;
                            queryParameterNames?: string[] | undefined;
                            requestHeaderNames?: string[] | undefined;
                            statusCode?: number | undefined;
                            errorCode?: string | undefined;
                        } | undefined;
                        apiGateway?: {
                            accountId?: string | undefined;
                            apiId?: string | undefined;
                            apiStage?: string | undefined;
                            request?: {
                                id?: string | undefined;
                                timeEpoch?: string | number | Long | undefined;
                                pathParameterNames?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        httpRouter?: {
                            path?: string | undefined;
                        } | undefined;
                        initialization?: {
                            initializationDuration?: number | undefined;
                        } | undefined;
                        invocation?: {
                            invocationDuration?: number | undefined;
                        } | undefined;
                        runtime?: {
                            identifier?: string | undefined;
                            version?: string | undefined;
                            arn?: string | undefined;
                        } | undefined;
                    } | undefined;
                    sdk?: {
                        region?: string | undefined;
                        signatureVersion?: string | undefined;
                        service?: string | undefined;
                        operation?: string | undefined;
                        requestId?: string | undefined;
                        error?: string | undefined;
                        dynamodb?: {
                            tableName?: string | undefined;
                            projection?: string | undefined;
                            scanForward?: boolean | undefined;
                            attributesToGet?: string[] | undefined;
                            consistentRead?: boolean | undefined;
                            indexName?: string | undefined;
                            limit?: number | undefined;
                            select?: string | undefined;
                            segment?: number | undefined;
                            totalSegments?: string | number | Long | undefined;
                            filter?: string | undefined;
                            keyCondition?: string | undefined;
                            exclusiveStartKey?: string | undefined;
                            attributeValues?: string | undefined;
                            count?: string | number | Long | undefined;
                            scannedCount?: string | number | Long | undefined;
                        } | undefined;
                        sqs?: {
                            queueName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                        sns?: {
                            topicName?: string | undefined;
                            messageIds?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    accountId?: string | undefined;
                    region?: string | undefined;
                    requestId?: string | undefined;
                    resourceName?: string | undefined;
                    sequenceId?: string | undefined;
                    logGroup?: string | undefined;
                    logStream?: string | undefined;
                } | undefined;
                http?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                https?: {
                    method?: string | undefined;
                    protocol?: string | undefined;
                    host?: string | undefined;
                    path?: string | undefined;
                    queryParameterNames?: string[] | undefined;
                    requestHeaderNames?: string[] | undefined;
                    statusCode?: number | undefined;
                    errorCode?: string | undefined;
                } | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
                orgId?: string | undefined;
                error?: {
                    name?: string | undefined;
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: ErrorTags_ErrorType | undefined;
                } | undefined;
                warning?: {
                    message?: string | undefined;
                    stacktrace?: string | undefined;
                    type?: WarningTags_WarningType | undefined;
                } | undefined;
                notice?: {
                    message?: string | undefined;
                    type?: NoticeTags_NoticeType | undefined;
                } | undefined;
            } | undefined;
            isHistorical?: boolean | undefined;
            type?: string | undefined;
            timestamp?: string | number | Long | undefined;
        }[]>]: never; }) | undefined;
        traces?: ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            spans?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] | undefined;
            events?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        }[] & ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            spans?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] | undefined;
            events?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        } & {
            slsTags?: ({
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_231 in Exclude<keyof I_1["traces"][number]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & { [K_232 in Exclude<keyof I_1["traces"][number]["slsTags"], keyof SlsTags>]: never; }) | undefined;
            spans?: ({
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] & ({
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            } & {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_233 in Exclude<keyof I_1["traces"][number]["spans"][number]["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
                endTimeUnixNano?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_234 in Exclude<keyof I_1["traces"][number]["spans"][number]["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
                tags?: ({
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } & {
                    aws?: ({
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & {
                        lambda?: ({
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } & {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_235 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                            logsEndTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_236 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_237 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_238 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_239 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_240 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                            http?: ({
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: (string[] & string[] & { [K_241 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                requestHeaderNames?: (string[] & string[] & { [K_242 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & { [K_243 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                            apiGateway?: ({
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } & {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: ({
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } & {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_244 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                    pathParameterNames?: (string[] & string[] & { [K_245 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                } & { [K_246 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                            } & { [K_247 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                            httpRouter?: ({
                                path?: string | undefined;
                            } & {
                                path?: string | undefined;
                            } & { [K_248 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                            initialization?: ({
                                initializationDuration?: number | undefined;
                            } & {
                                initializationDuration?: number | undefined;
                            } & { [K_249 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                            invocation?: ({
                                invocationDuration?: number | undefined;
                            } & {
                                invocationDuration?: number | undefined;
                            } & { [K_250 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                            runtime?: ({
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & { [K_251 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                        } & { [K_252 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                        sdk?: ({
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } & {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: ({
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } & {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: (string[] & string[] & { [K_253 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_254 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_255 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                scannedCount?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_256 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                            } & { [K_257 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_258 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_259 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_260 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_261 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                        } & { [K_262 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & { [K_263 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_264 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_265 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_266 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                    https?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_267 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_268 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_269 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_270 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: ({
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & { [K_271 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                    warning?: ({
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & { [K_272 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                    notice?: ({
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & { [K_273 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                } & { [K_274 in Exclude<keyof I_1["traces"][number]["spans"][number]["tags"], keyof Tags>]: never; }) | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_275 in Exclude<keyof I_1["traces"][number]["spans"][number]["timestamp"], keyof Long>]: never; }) | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            } & { [K_276 in Exclude<keyof I_1["traces"][number]["spans"][number], keyof Span>]: never; })[] & { [K_277 in Exclude<keyof I_1["traces"][number]["spans"], keyof {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[]>]: never; }) | undefined;
            events?: ({
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] & ({
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            } & {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_278 in Exclude<keyof I_1["traces"][number]["events"][number]["timestampUnixNano"], keyof Long>]: never; }) | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: ({
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } & {
                    aws?: ({
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & {
                        lambda?: ({
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } & {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_279 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                            logsEndTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_280 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_281 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_282 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_283 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_284 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                            http?: ({
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: (string[] & string[] & { [K_285 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                requestHeaderNames?: (string[] & string[] & { [K_286 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & { [K_287 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                            apiGateway?: ({
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } & {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: ({
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } & {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_288 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                    pathParameterNames?: (string[] & string[] & { [K_289 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                } & { [K_290 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                            } & { [K_291 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                            httpRouter?: ({
                                path?: string | undefined;
                            } & {
                                path?: string | undefined;
                            } & { [K_292 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                            initialization?: ({
                                initializationDuration?: number | undefined;
                            } & {
                                initializationDuration?: number | undefined;
                            } & { [K_293 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                            invocation?: ({
                                invocationDuration?: number | undefined;
                            } & {
                                invocationDuration?: number | undefined;
                            } & { [K_294 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                            runtime?: ({
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & { [K_295 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                        } & { [K_296 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                        sdk?: ({
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } & {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: ({
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } & {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: (string[] & string[] & { [K_297 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_298 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_299 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                scannedCount?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_300 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                            } & { [K_301 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_302 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_303 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_304 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_305 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                        } & { [K_306 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & { [K_307 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_308 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_309 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_310 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                    https?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_311 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_312 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_313 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_314 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: ({
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & { [K_315 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                    warning?: ({
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & { [K_316 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                    notice?: ({
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & { [K_317 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                } & { [K_318 in Exclude<keyof I_1["traces"][number]["events"][number]["tags"], keyof Tags>]: never; }) | undefined;
            } & { [K_319 in Exclude<keyof I_1["traces"][number]["events"][number], keyof Event>]: never; })[] & { [K_320 in Exclude<keyof I_1["traces"][number]["events"], keyof {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[]>]: never; }) | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        } & { [K_321 in Exclude<keyof I_1["traces"][number], keyof TracePayload>]: never; })[] & { [K_322 in Exclude<keyof I_1["traces"], keyof {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            spans?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                parentSpanId?: Uint8Array | undefined;
                name?: string | undefined;
                startTimeUnixNano?: string | number | Long | undefined;
                endTimeUnixNano?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                input?: string | undefined;
                output?: string | undefined;
                timestamp?: string | number | Long | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
                customTags?: string | undefined;
            }[] | undefined;
            events?: {
                id?: Uint8Array | undefined;
                traceId?: Uint8Array | undefined;
                spanId?: Uint8Array | undefined;
                timestampUnixNano?: string | number | Long | undefined;
                eventName?: string | undefined;
                customTags?: string | undefined;
                customFingerprint?: string | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
            customTags?: string | undefined;
            isSampledOut?: boolean | undefined;
        }[]>]: never; }) | undefined;
        logs?: ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            logEvents?: {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] | undefined;
        }[] & ({
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            logEvents?: {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] | undefined;
        } & {
            slsTags?: ({
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: ({
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } & { [K_323 in Exclude<keyof I_1["logs"][number]["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } & { [K_324 in Exclude<keyof I_1["logs"][number]["slsTags"], keyof SlsTags>]: never; }) | undefined;
            logEvents?: ({
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] & ({
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            } & {
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_325 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["timestamp"], keyof Long>]: never; }) | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_326 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["severityNumber"], keyof Long>]: never; }) | undefined;
                tags?: ({
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } & {
                    aws?: ({
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & {
                        lambda?: ({
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } & {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_327 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["logsStartTimeUnix"], keyof Long>]: never; }) | undefined;
                            logsEndTimeUnix?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_328 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["logsEndTimeUnix"], keyof Long>]: never; }) | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_329 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_330 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["sqs"], keyof AwsSqsEventTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_331 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_332 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["sns"], keyof AwsSnsEventTags>]: never; }) | undefined;
                            http?: ({
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: (string[] & string[] & { [K_333 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                                requestHeaderNames?: (string[] & string[] & { [K_334 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } & { [K_335 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["http"], keyof HttpTags>]: never; }) | undefined;
                            apiGateway?: ({
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } & {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: ({
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } & {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | (Long & {
                                        high: number;
                                        low: number;
                                        unsigned: boolean;
                                        add: (addend: string | number | Long) => Long;
                                        and: (other: string | number | Long) => Long;
                                        compare: (other: string | number | Long) => number;
                                        comp: (other: string | number | Long) => number;
                                        divide: (divisor: string | number | Long) => Long;
                                        div: (divisor: string | number | Long) => Long;
                                        equals: (other: string | number | Long) => boolean;
                                        eq: (other: string | number | Long) => boolean;
                                        getHighBits: () => number;
                                        getHighBitsUnsigned: () => number;
                                        getLowBits: () => number;
                                        getLowBitsUnsigned: () => number;
                                        getNumBitsAbs: () => number;
                                        greaterThan: (other: string | number | Long) => boolean;
                                        gt: (other: string | number | Long) => boolean;
                                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                                        gte: (other: string | number | Long) => boolean;
                                        ge: (other: string | number | Long) => boolean;
                                        isEven: () => boolean;
                                        isNegative: () => boolean;
                                        isOdd: () => boolean;
                                        isPositive: () => boolean;
                                        isZero: () => boolean;
                                        eqz: () => boolean;
                                        lessThan: (other: string | number | Long) => boolean;
                                        lt: (other: string | number | Long) => boolean;
                                        lessThanOrEqual: (other: string | number | Long) => boolean;
                                        lte: (other: string | number | Long) => boolean;
                                        le: (other: string | number | Long) => boolean;
                                        modulo: (other: string | number | Long) => Long;
                                        mod: (other: string | number | Long) => Long;
                                        rem: (other: string | number | Long) => Long;
                                        multiply: (multiplier: string | number | Long) => Long;
                                        mul: (multiplier: string | number | Long) => Long;
                                        negate: () => Long;
                                        neg: () => Long;
                                        not: () => Long;
                                        countLeadingZeros: () => number;
                                        clz: () => number;
                                        countTrailingZeros: () => number;
                                        ctz: () => number;
                                        notEquals: (other: string | number | Long) => boolean;
                                        neq: (other: string | number | Long) => boolean;
                                        ne: (other: string | number | Long) => boolean;
                                        or: (other: string | number | Long) => Long;
                                        shiftLeft: (numBits: number | Long) => Long;
                                        shl: (numBits: number | Long) => Long;
                                        shiftRight: (numBits: number | Long) => Long;
                                        shr: (numBits: number | Long) => Long;
                                        shiftRightUnsigned: (numBits: number | Long) => Long;
                                        shru: (numBits: number | Long) => Long;
                                        shr_u: (numBits: number | Long) => Long;
                                        rotateLeft: (numBits: number | Long) => Long;
                                        rotl: (numBits: number | Long) => Long;
                                        rotateRight: (numBits: number | Long) => Long;
                                        rotr: (numBits: number | Long) => Long;
                                        subtract: (subtrahend: string | number | Long) => Long;
                                        sub: (subtrahend: string | number | Long) => Long;
                                        toInt: () => number;
                                        toNumber: () => number;
                                        toBytes: (le?: boolean | undefined) => number[];
                                        toBytesLE: () => number[];
                                        toBytesBE: () => number[];
                                        toSigned: () => Long;
                                        toString: (radix?: number | undefined) => string;
                                        toUnsigned: () => Long;
                                        xor: (other: string | number | Long) => Long;
                                    } & { [K_336 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["timeEpoch"], keyof Long>]: never; }) | undefined;
                                    pathParameterNames?: (string[] & string[] & { [K_337 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"]["pathParameterNames"], keyof string[]>]: never; }) | undefined;
                                } & { [K_338 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"]["request"], keyof AwsApiGatewayTags_AwsApiGatewayRequestTags>]: never; }) | undefined;
                            } & { [K_339 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["apiGateway"], keyof AwsApiGatewayTags>]: never; }) | undefined;
                            httpRouter?: ({
                                path?: string | undefined;
                            } & {
                                path?: string | undefined;
                            } & { [K_340 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["httpRouter"], "path">]: never; }) | undefined;
                            initialization?: ({
                                initializationDuration?: number | undefined;
                            } & {
                                initializationDuration?: number | undefined;
                            } & { [K_341 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["initialization"], "initializationDuration">]: never; }) | undefined;
                            invocation?: ({
                                invocationDuration?: number | undefined;
                            } & {
                                invocationDuration?: number | undefined;
                            } & { [K_342 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["invocation"], "invocationDuration">]: never; }) | undefined;
                            runtime?: ({
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } & { [K_343 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"]["runtime"], keyof AwsLambdaRuntimeTags>]: never; }) | undefined;
                        } & { [K_344 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["lambda"], keyof AwsLambdaTags>]: never; }) | undefined;
                        sdk?: ({
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } & {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: ({
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } & {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: (string[] & string[] & { [K_345 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["attributesToGet"], keyof string[]>]: never; }) | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_346 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["totalSegments"], keyof Long>]: never; }) | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_347 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["count"], keyof Long>]: never; }) | undefined;
                                scannedCount?: string | number | (Long & {
                                    high: number;
                                    low: number;
                                    unsigned: boolean;
                                    add: (addend: string | number | Long) => Long;
                                    and: (other: string | number | Long) => Long;
                                    compare: (other: string | number | Long) => number;
                                    comp: (other: string | number | Long) => number;
                                    divide: (divisor: string | number | Long) => Long;
                                    div: (divisor: string | number | Long) => Long;
                                    equals: (other: string | number | Long) => boolean;
                                    eq: (other: string | number | Long) => boolean;
                                    getHighBits: () => number;
                                    getHighBitsUnsigned: () => number;
                                    getLowBits: () => number;
                                    getLowBitsUnsigned: () => number;
                                    getNumBitsAbs: () => number;
                                    greaterThan: (other: string | number | Long) => boolean;
                                    gt: (other: string | number | Long) => boolean;
                                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                                    gte: (other: string | number | Long) => boolean;
                                    ge: (other: string | number | Long) => boolean;
                                    isEven: () => boolean;
                                    isNegative: () => boolean;
                                    isOdd: () => boolean;
                                    isPositive: () => boolean;
                                    isZero: () => boolean;
                                    eqz: () => boolean;
                                    lessThan: (other: string | number | Long) => boolean;
                                    lt: (other: string | number | Long) => boolean;
                                    lessThanOrEqual: (other: string | number | Long) => boolean;
                                    lte: (other: string | number | Long) => boolean;
                                    le: (other: string | number | Long) => boolean;
                                    modulo: (other: string | number | Long) => Long;
                                    mod: (other: string | number | Long) => Long;
                                    rem: (other: string | number | Long) => Long;
                                    multiply: (multiplier: string | number | Long) => Long;
                                    mul: (multiplier: string | number | Long) => Long;
                                    negate: () => Long;
                                    neg: () => Long;
                                    not: () => Long;
                                    countLeadingZeros: () => number;
                                    clz: () => number;
                                    countTrailingZeros: () => number;
                                    ctz: () => number;
                                    notEquals: (other: string | number | Long) => boolean;
                                    neq: (other: string | number | Long) => boolean;
                                    ne: (other: string | number | Long) => boolean;
                                    or: (other: string | number | Long) => Long;
                                    shiftLeft: (numBits: number | Long) => Long;
                                    shl: (numBits: number | Long) => Long;
                                    shiftRight: (numBits: number | Long) => Long;
                                    shr: (numBits: number | Long) => Long;
                                    shiftRightUnsigned: (numBits: number | Long) => Long;
                                    shru: (numBits: number | Long) => Long;
                                    shr_u: (numBits: number | Long) => Long;
                                    rotateLeft: (numBits: number | Long) => Long;
                                    rotl: (numBits: number | Long) => Long;
                                    rotateRight: (numBits: number | Long) => Long;
                                    rotr: (numBits: number | Long) => Long;
                                    subtract: (subtrahend: string | number | Long) => Long;
                                    sub: (subtrahend: string | number | Long) => Long;
                                    toInt: () => number;
                                    toNumber: () => number;
                                    toBytes: (le?: boolean | undefined) => number[];
                                    toBytesLE: () => number[];
                                    toBytesBE: () => number[];
                                    toSigned: () => Long;
                                    toString: (radix?: number | undefined) => string;
                                    toUnsigned: () => Long;
                                    xor: (other: string | number | Long) => Long;
                                } & { [K_348 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"]["scannedCount"], keyof Long>]: never; }) | undefined;
                            } & { [K_349 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["dynamodb"], keyof AwsSdkDynamodbTags>]: never; }) | undefined;
                            sqs?: ({
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                queueName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_350 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["sqs"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_351 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["sqs"], keyof AwsSdkSqsTags>]: never; }) | undefined;
                            sns?: ({
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } & {
                                topicName?: string | undefined;
                                messageIds?: (string[] & string[] & { [K_352 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["sns"]["messageIds"], keyof string[]>]: never; }) | undefined;
                            } & { [K_353 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"]["sns"], keyof AwsSdkSnsTags>]: never; }) | undefined;
                        } & { [K_354 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"]["sdk"], keyof AwsSdkTags>]: never; }) | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } & { [K_355 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["aws"], keyof AwsTags>]: never; }) | undefined;
                    http?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_356 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["http"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_357 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["http"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_358 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["http"], keyof HttpTags>]: never; }) | undefined;
                    https?: ({
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: (string[] & string[] & { [K_359 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["https"]["queryParameterNames"], keyof string[]>]: never; }) | undefined;
                        requestHeaderNames?: (string[] & string[] & { [K_360 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["https"]["requestHeaderNames"], keyof string[]>]: never; }) | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } & { [K_361 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["https"], keyof HttpTags>]: never; }) | undefined;
                    sdk?: ({
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } & { [K_362 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: ({
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } & { [K_363 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["error"], keyof ErrorTags>]: never; }) | undefined;
                    warning?: ({
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } & { [K_364 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["warning"], keyof WarningTags>]: never; }) | undefined;
                    notice?: ({
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } & { [K_365 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"]["notice"], keyof NoticeTags>]: never; }) | undefined;
                } & { [K_366 in Exclude<keyof I_1["logs"][number]["logEvents"][number]["tags"], keyof Tags>]: never; }) | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            } & { [K_367 in Exclude<keyof I_1["logs"][number]["logEvents"][number], keyof LogEvent>]: never; })[] & { [K_368 in Exclude<keyof I_1["logs"][number]["logEvents"], keyof {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_369 in Exclude<keyof I_1["logs"][number], keyof LogPayload>]: never; })[] & { [K_370 in Exclude<keyof I_1["logs"], keyof {
            slsTags?: {
                orgId?: string | undefined;
                platform?: string | undefined;
                service?: string | undefined;
                region?: string | undefined;
                sdk?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    runtime?: string | undefined;
                } | undefined;
                environment?: string | undefined;
                namespace?: string | undefined;
            } | undefined;
            logEvents?: {
                timestamp?: string | number | Long | undefined;
                traceId?: string | undefined;
                body?: string | undefined;
                severityText?: string | undefined;
                severityNumber?: string | number | Long | undefined;
                tags?: {
                    aws?: {
                        lambda?: {
                            arch?: string | undefined;
                            isColdstart?: boolean | undefined;
                            eventType?: string | undefined;
                            eventSource?: string | undefined;
                            logGroup?: string | undefined;
                            logStreamName?: string | undefined;
                            maxMemory?: number | undefined;
                            name?: string | undefined;
                            requestId?: string | undefined;
                            version?: string | undefined;
                            accountId?: string | undefined;
                            outcome?: AwsLambdaTags_Outcome | undefined;
                            errorExceptionMessage?: string | undefined;
                            errorExceptionStacktrace?: string | undefined;
                            duration?: number | undefined;
                            requestBody?: string | undefined;
                            responseBody?: string | undefined;
                            logsStartTimeUnix?: string | number | Long | undefined;
                            logsEndTimeUnix?: string | number | Long | undefined;
                            responseMode?: AwsLambdaTags_ResponseMode | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            http?: {
                                method?: string | undefined;
                                protocol?: string | undefined;
                                host?: string | undefined;
                                path?: string | undefined;
                                queryParameterNames?: string[] | undefined;
                                requestHeaderNames?: string[] | undefined;
                                statusCode?: number | undefined;
                                errorCode?: string | undefined;
                            } | undefined;
                            apiGateway?: {
                                accountId?: string | undefined;
                                apiId?: string | undefined;
                                apiStage?: string | undefined;
                                request?: {
                                    id?: string | undefined;
                                    timeEpoch?: string | number | Long | undefined;
                                    pathParameterNames?: string[] | undefined;
                                } | undefined;
                            } | undefined;
                            httpRouter?: {
                                path?: string | undefined;
                            } | undefined;
                            initialization?: {
                                initializationDuration?: number | undefined;
                            } | undefined;
                            invocation?: {
                                invocationDuration?: number | undefined;
                            } | undefined;
                            runtime?: {
                                identifier?: string | undefined;
                                version?: string | undefined;
                                arn?: string | undefined;
                            } | undefined;
                        } | undefined;
                        sdk?: {
                            region?: string | undefined;
                            signatureVersion?: string | undefined;
                            service?: string | undefined;
                            operation?: string | undefined;
                            requestId?: string | undefined;
                            error?: string | undefined;
                            dynamodb?: {
                                tableName?: string | undefined;
                                projection?: string | undefined;
                                scanForward?: boolean | undefined;
                                attributesToGet?: string[] | undefined;
                                consistentRead?: boolean | undefined;
                                indexName?: string | undefined;
                                limit?: number | undefined;
                                select?: string | undefined;
                                segment?: number | undefined;
                                totalSegments?: string | number | Long | undefined;
                                filter?: string | undefined;
                                keyCondition?: string | undefined;
                                exclusiveStartKey?: string | undefined;
                                attributeValues?: string | undefined;
                                count?: string | number | Long | undefined;
                                scannedCount?: string | number | Long | undefined;
                            } | undefined;
                            sqs?: {
                                queueName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                            sns?: {
                                topicName?: string | undefined;
                                messageIds?: string[] | undefined;
                            } | undefined;
                        } | undefined;
                        accountId?: string | undefined;
                        region?: string | undefined;
                        requestId?: string | undefined;
                        resourceName?: string | undefined;
                        sequenceId?: string | undefined;
                        logGroup?: string | undefined;
                        logStream?: string | undefined;
                    } | undefined;
                    http?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    https?: {
                        method?: string | undefined;
                        protocol?: string | undefined;
                        host?: string | undefined;
                        path?: string | undefined;
                        queryParameterNames?: string[] | undefined;
                        requestHeaderNames?: string[] | undefined;
                        statusCode?: number | undefined;
                        errorCode?: string | undefined;
                    } | undefined;
                    sdk?: {
                        name?: string | undefined;
                        version?: string | undefined;
                        runtime?: string | undefined;
                    } | undefined;
                    environment?: string | undefined;
                    namespace?: string | undefined;
                    orgId?: string | undefined;
                    error?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: ErrorTags_ErrorType | undefined;
                    } | undefined;
                    warning?: {
                        message?: string | undefined;
                        stacktrace?: string | undefined;
                        type?: WarningTags_WarningType | undefined;
                    } | undefined;
                    notice?: {
                        message?: string | undefined;
                        type?: NoticeTags_NoticeType | undefined;
                    } | undefined;
                } | undefined;
                isHistorical?: boolean | undefined;
                type?: string | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_371 in Exclude<keyof I_1, keyof DevModeTransportPayload>]: never; }>(object: I_1): DevModeTransportPayload;
};
/**
 * Lambda Telemetry API data. This data is only available for lambda functions that
 * have access to the telemetry API so it will not be included in all regions.
 */
interface LambdaTelemetry {
    /** Init duration in milliseconds as reported by the metrics on the platform.initReport event */
    initDurationMs?: number | undefined;
    /** Internal runtime duration in milliseconds as reported by the metrics on the platform.runtimeDone event */
    runtimeDurationMs?: number | undefined;
    /** Internal runtime duration in milliseconds as reported by the responseLatency span on the platform.runtimeDone event */
    runtimeResponseLatencyMs?: number | undefined;
}
declare const LambdaTelemetry: {
    encode(message: LambdaTelemetry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LambdaTelemetry;
    fromJSON(object: any): LambdaTelemetry;
    toJSON(message: LambdaTelemetry): unknown;
    create<I extends {
        initDurationMs?: number | undefined;
        runtimeDurationMs?: number | undefined;
        runtimeResponseLatencyMs?: number | undefined;
    } & {
        initDurationMs?: number | undefined;
        runtimeDurationMs?: number | undefined;
        runtimeResponseLatencyMs?: number | undefined;
    } & { [K in Exclude<keyof I, keyof LambdaTelemetry>]: never; }>(base?: I | undefined): LambdaTelemetry;
    fromPartial<I_1 extends {
        initDurationMs?: number | undefined;
        runtimeDurationMs?: number | undefined;
        runtimeResponseLatencyMs?: number | undefined;
    } & {
        initDurationMs?: number | undefined;
        runtimeDurationMs?: number | undefined;
        runtimeResponseLatencyMs?: number | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof LambdaTelemetry>]: never; }>(object: I_1): LambdaTelemetry;
};

/**
 * A MetricPayload is a message that will contain any number of
 * Metrics plus the global tags required by our Serverless Ingest Platform.
 */
interface MetricPayload {
    slsTags: SlsTags | undefined;
    /**
     * A list of Metrics to be ingested. Ingest does not impose a limit on the
     * number of Metrics in a single payload. It is the responsibility of
     * the metrics' producers to limit the size of payloads based on their
     * own requirements.
     */
    metrics: Metric[];
}
declare const MetricPayload: {
    encode(message: MetricPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MetricPayload;
    fromJSON(object: any): MetricPayload;
    toJSON(message: MetricPayload): unknown;
    create<I extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        metrics?: {
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: string | undefined;
            count?: string | number | Long | undefined;
            sum?: number | undefined;
            quantileValues?: {
                quantile?: number | undefined;
                value?: number | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K in Exclude<keyof I["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_1 in Exclude<keyof I["slsTags"], keyof SlsTags>]: never; }) | undefined;
        metrics?: ({
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: string | undefined;
            count?: string | number | Long | undefined;
            sum?: number | undefined;
            quantileValues?: {
                quantile?: number | undefined;
                value?: number | undefined;
            }[] | undefined;
        }[] & ({
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: string | undefined;
            count?: string | number | Long | undefined;
            sum?: number | undefined;
            quantileValues?: {
                quantile?: number | undefined;
                value?: number | undefined;
            }[] | undefined;
        } & {
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_2 in Exclude<keyof I["metrics"][number]["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
            endTimeUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_3 in Exclude<keyof I["metrics"][number]["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
            tags?: string | undefined;
            count?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_4 in Exclude<keyof I["metrics"][number]["count"], keyof Long>]: never; }) | undefined;
            sum?: number | undefined;
            quantileValues?: ({
                quantile?: number | undefined;
                value?: number | undefined;
            }[] & ({
                quantile?: number | undefined;
                value?: number | undefined;
            } & {
                quantile?: number | undefined;
                value?: number | undefined;
            } & { [K_5 in Exclude<keyof I["metrics"][number]["quantileValues"][number], keyof Metric_ValueAtQuantile>]: never; })[] & { [K_6 in Exclude<keyof I["metrics"][number]["quantileValues"], keyof {
                quantile?: number | undefined;
                value?: number | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["metrics"][number], keyof Metric>]: never; })[] & { [K_8 in Exclude<keyof I["metrics"], keyof {
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: string | undefined;
            count?: string | number | Long | undefined;
            sum?: number | undefined;
            quantileValues?: {
                quantile?: number | undefined;
                value?: number | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I, keyof MetricPayload>]: never; }>(base?: I | undefined): MetricPayload;
    fromPartial<I_1 extends {
        slsTags?: {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } | undefined;
        metrics?: {
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: string | undefined;
            count?: string | number | Long | undefined;
            sum?: number | undefined;
            quantileValues?: {
                quantile?: number | undefined;
                value?: number | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        slsTags?: ({
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & {
            orgId?: string | undefined;
            platform?: string | undefined;
            service?: string | undefined;
            region?: string | undefined;
            sdk?: ({
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
                runtime?: string | undefined;
            } & { [K_10 in Exclude<keyof I_1["slsTags"]["sdk"], keyof SdkTags>]: never; }) | undefined;
            environment?: string | undefined;
            namespace?: string | undefined;
        } & { [K_11 in Exclude<keyof I_1["slsTags"], keyof SlsTags>]: never; }) | undefined;
        metrics?: ({
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: string | undefined;
            count?: string | number | Long | undefined;
            sum?: number | undefined;
            quantileValues?: {
                quantile?: number | undefined;
                value?: number | undefined;
            }[] | undefined;
        }[] & ({
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: string | undefined;
            count?: string | number | Long | undefined;
            sum?: number | undefined;
            quantileValues?: {
                quantile?: number | undefined;
                value?: number | undefined;
            }[] | undefined;
        } & {
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_12 in Exclude<keyof I_1["metrics"][number]["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
            endTimeUnixNano?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_13 in Exclude<keyof I_1["metrics"][number]["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
            tags?: string | undefined;
            count?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_14 in Exclude<keyof I_1["metrics"][number]["count"], keyof Long>]: never; }) | undefined;
            sum?: number | undefined;
            quantileValues?: ({
                quantile?: number | undefined;
                value?: number | undefined;
            }[] & ({
                quantile?: number | undefined;
                value?: number | undefined;
            } & {
                quantile?: number | undefined;
                value?: number | undefined;
            } & { [K_15 in Exclude<keyof I_1["metrics"][number]["quantileValues"][number], keyof Metric_ValueAtQuantile>]: never; })[] & { [K_16 in Exclude<keyof I_1["metrics"][number]["quantileValues"], keyof {
                quantile?: number | undefined;
                value?: number | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_17 in Exclude<keyof I_1["metrics"][number], keyof Metric>]: never; })[] & { [K_18 in Exclude<keyof I_1["metrics"], keyof {
            id?: Uint8Array | undefined;
            name?: string | undefined;
            startTimeUnixNano?: string | number | Long | undefined;
            endTimeUnixNano?: string | number | Long | undefined;
            tags?: string | undefined;
            count?: string | number | Long | undefined;
            sum?: number | undefined;
            quantileValues?: {
                quantile?: number | undefined;
                value?: number | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_19 in Exclude<keyof I_1, keyof MetricPayload>]: never; }>(object: I_1): MetricPayload;
};
interface Metric {
    /**
     * A unique id for the metric measurement. If this is a Metric from,
     * The metric stream then it will be a randomly generated UUID at ingest time.
     */
    id: Uint8Array;
    /**
     * The name of the metric. If this is a Metric from the Metric stream,
     * it will be in the format amazonaws.com/<metric_namespace>/<metric_name>.
     * The name is what will be mapped into influx.
     */
    name: string;
    /**
     * The start time of the measure. If this is a Metric from the Metric stream,
     * it will be the Cloudwatch startTime property.
     */
    startTimeUnixNano: Long;
    /**
     * The end time of the measure. If this is a Metric from the Metric stream,
     * it will be the Cloudwatch endTime property.
     */
    endTimeUnixNano: Long;
    /**
     * Tags for the Metric. Any tags can be placed in this field, however,
     * ingest will only write allowlisted, low cardinality tags to Influx.
     */
    tags: string;
    /**
     * The number of datapoints for the Metric. If this is a Metric from the Metric stream,
     * it will be the SampleCount from Cloudwatch
     */
    count: Long;
    /** The sum of the datapoints for the Metric. */
    sum: number;
    /**
     * List of quantile values. If this is a Metric from the Metric stream,
     * it will by default have quantile 0.0 and 1.0 to represent the min and max values.
     * If defined during Metric's Stream setup it will have additional quantiles as well.
     */
    quantileValues: Metric_ValueAtQuantile[];
}
declare const Metric: {
    encode(message: Metric, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Metric;
    fromJSON(object: any): Metric;
    toJSON(message: Metric): unknown;
    create<I extends {
        id?: Uint8Array | undefined;
        name?: string | undefined;
        startTimeUnixNano?: string | number | Long | undefined;
        endTimeUnixNano?: string | number | Long | undefined;
        tags?: string | undefined;
        count?: string | number | Long | undefined;
        sum?: number | undefined;
        quantileValues?: {
            quantile?: number | undefined;
            value?: number | undefined;
        }[] | undefined;
    } & {
        id?: Uint8Array | undefined;
        name?: string | undefined;
        startTimeUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
        endTimeUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
        tags?: string | undefined;
        count?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I["count"], keyof Long>]: never; }) | undefined;
        sum?: number | undefined;
        quantileValues?: ({
            quantile?: number | undefined;
            value?: number | undefined;
        }[] & ({
            quantile?: number | undefined;
            value?: number | undefined;
        } & {
            quantile?: number | undefined;
            value?: number | undefined;
        } & { [K_3 in Exclude<keyof I["quantileValues"][number], keyof Metric_ValueAtQuantile>]: never; })[] & { [K_4 in Exclude<keyof I["quantileValues"], keyof {
            quantile?: number | undefined;
            value?: number | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, keyof Metric>]: never; }>(base?: I | undefined): Metric;
    fromPartial<I_1 extends {
        id?: Uint8Array | undefined;
        name?: string | undefined;
        startTimeUnixNano?: string | number | Long | undefined;
        endTimeUnixNano?: string | number | Long | undefined;
        tags?: string | undefined;
        count?: string | number | Long | undefined;
        sum?: number | undefined;
        quantileValues?: {
            quantile?: number | undefined;
            value?: number | undefined;
        }[] | undefined;
    } & {
        id?: Uint8Array | undefined;
        name?: string | undefined;
        startTimeUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_6 in Exclude<keyof I_1["startTimeUnixNano"], keyof Long>]: never; }) | undefined;
        endTimeUnixNano?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_7 in Exclude<keyof I_1["endTimeUnixNano"], keyof Long>]: never; }) | undefined;
        tags?: string | undefined;
        count?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_8 in Exclude<keyof I_1["count"], keyof Long>]: never; }) | undefined;
        sum?: number | undefined;
        quantileValues?: ({
            quantile?: number | undefined;
            value?: number | undefined;
        }[] & ({
            quantile?: number | undefined;
            value?: number | undefined;
        } & {
            quantile?: number | undefined;
            value?: number | undefined;
        } & { [K_9 in Exclude<keyof I_1["quantileValues"][number], keyof Metric_ValueAtQuantile>]: never; })[] & { [K_10 in Exclude<keyof I_1["quantileValues"], keyof {
            quantile?: number | undefined;
            value?: number | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_11 in Exclude<keyof I_1, keyof Metric>]: never; }>(object: I_1): Metric;
};
/**
 * A value at a given quantile of the distribution.
 * If a Metric has multiple samples, the Min and Max will be represented by,
 * 1. Quantile = 1.0, is the max value
 * 2. Quantile = 0.0, is the min value
 */
interface Metric_ValueAtQuantile {
    quantile: number;
    value: number;
}
declare const Metric_ValueAtQuantile: {
    encode(message: Metric_ValueAtQuantile, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Metric_ValueAtQuantile;
    fromJSON(object: any): Metric_ValueAtQuantile;
    toJSON(message: Metric_ValueAtQuantile): unknown;
    create<I extends {
        quantile?: number | undefined;
        value?: number | undefined;
    } & {
        quantile?: number | undefined;
        value?: number | undefined;
    } & { [K in Exclude<keyof I, keyof Metric_ValueAtQuantile>]: never; }>(base?: I | undefined): Metric_ValueAtQuantile;
    fromPartial<I_1 extends {
        quantile?: number | undefined;
        value?: number | undefined;
    } & {
        quantile?: number | undefined;
        value?: number | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof Metric_ValueAtQuantile>]: never; }>(object: I_1): Metric_ValueAtQuantile;
};

export { AwsApiGatewayTags, AwsApiGatewayTags_AwsApiGatewayRequestTags, AwsLambdaInitializationTags, AwsLambdaInvocationTags, AwsLambdaRuntimeTags, AwsLambdaTags, AwsLambdaTags_Outcome, AwsLambdaTags_ResponseMode, AwsSdkDynamodbTags, AwsSdkSnsTags, AwsSdkSqsTags, AwsSdkTags, AwsSnsEventTags, AwsSqsEventTags, AwsTags, DevModePayload, DevModeTransportPayload, ErrorTags, ErrorTags_ErrorType, Event, EventPayload, HttpRouterTags, HttpTags, LambdaTelemetry, LogEvent, LogPayload, Metric, MetricPayload, Metric_ValueAtQuantile, NoticeTags, NoticeTags_NoticeType, RequestResponse, RequestResponse_Origin, SdkTags, SlsTags, Span, Tags, TracePayload, WarningTags, WarningTags_WarningType, awsLambdaTags_OutcomeFromJSON, awsLambdaTags_OutcomeToJSON, awsLambdaTags_ResponseModeFromJSON, awsLambdaTags_ResponseModeToJSON, errorTags_ErrorTypeFromJSON, errorTags_ErrorTypeToJSON, noticeTags_NoticeTypeFromJSON, noticeTags_NoticeTypeToJSON, requestResponse_OriginFromJSON, requestResponse_OriginToJSON, warningTags_WarningTypeFromJSON, warningTags_WarningTypeToJSON };
