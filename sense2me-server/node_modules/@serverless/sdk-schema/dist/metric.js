'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Long = require('long');
var _m0 = require('protobufjs/minimal');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Long__default = /*#__PURE__*/_interopDefaultLegacy(Long);
var _m0__default = /*#__PURE__*/_interopDefaultLegacy(_m0);

/* eslint-disable */
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}

/* eslint-disable */
/**
 * A Lambda function invocation can have one of the following
 * outcomes upon completion.
 */
var AwsLambdaTags_Outcome;
(function (AwsLambdaTags_Outcome) {
    /** OUTCOME_UNSPECIFIED - No outcome was registered. Either information on the outcome was not disclosed (which should never be the case), or the function invocation has not been finalized yet */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_UNSPECIFIED"] = 0] = "OUTCOME_UNSPECIFIED";
    /** OUTCOME_SUCCESS - Function handler returned successfully */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_SUCCESS"] = 1] = "OUTCOME_SUCCESS";
    /** OUTCOME_ERROR_INITIALIZATION - Function crashed at initialization */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_ERROR_INITIALIZATION"] = 2] = "OUTCOME_ERROR_INITIALIZATION";
    /** OUTCOME_ERROR_UNHANDLED - Function crashed in an unhandled way at invocation (a result of either uncaught exception or unhandled rejection) */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_ERROR_UNHANDLED"] = 3] = "OUTCOME_ERROR_UNHANDLED";
    /** OUTCOME_ERROR_TIMEOUT - Function timed out */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_ERROR_TIMEOUT"] = 4] = "OUTCOME_ERROR_TIMEOUT";
    /** OUTCOME_ERROR_HANDLED - Function handler resolved with an error (either error was passed to lambda callback, or async handler resolved with error rejection) */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_ERROR_HANDLED"] = 5] = "OUTCOME_ERROR_HANDLED";
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AwsLambdaTags_Outcome || (AwsLambdaTags_Outcome = {}));
var AwsLambdaTags_ResponseMode;
(function (AwsLambdaTags_ResponseMode) {
    /** RESPONSE_MODE_UNSPECIFIED - Mode not confirmed */
    AwsLambdaTags_ResponseMode[AwsLambdaTags_ResponseMode["RESPONSE_MODE_UNSPECIFIED"] = 0] = "RESPONSE_MODE_UNSPECIFIED";
    /** RESPONSE_MODE_BUFFERED - Regular buffered response */
    AwsLambdaTags_ResponseMode[AwsLambdaTags_ResponseMode["RESPONSE_MODE_BUFFERED"] = 1] = "RESPONSE_MODE_BUFFERED";
    /** RESPONSE_MODE_RESPONSE_STREAM - Stream response */
    AwsLambdaTags_ResponseMode[AwsLambdaTags_ResponseMode["RESPONSE_MODE_RESPONSE_STREAM"] = 2] = "RESPONSE_MODE_RESPONSE_STREAM";
    AwsLambdaTags_ResponseMode[AwsLambdaTags_ResponseMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AwsLambdaTags_ResponseMode || (AwsLambdaTags_ResponseMode = {}));
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}

/* eslint-disable */
var ErrorTags_ErrorType;
(function (ErrorTags_ErrorType) {
    /** ERROR_TYPE_UNSPECIFIED - No ErrorType was provided. This should never be the case and if it is received ingest will ignore it. */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_UNSPECIFIED"] = 0] = "ERROR_TYPE_UNSPECIFIED";
    /** ERROR_TYPE_UNCAUGHT - An unexpected error that caused the application to fail */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_UNCAUGHT"] = 1] = "ERROR_TYPE_UNCAUGHT";
    /**
     * ERROR_TYPE_CAUGHT_USER - An error that was reported by user explictly via the Serverless SDK or console.error call
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_USER"] = 2] = "ERROR_TYPE_CAUGHT_USER";
    /**
     * ERROR_TYPE_CAUGHT_SDK_USER - An error that was reported by the Serverless SDK internally that reports user error
     * (misuage of the SDK)
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_SDK_USER"] = 3] = "ERROR_TYPE_CAUGHT_SDK_USER";
    /**
     * ERROR_TYPE_CAUGHT_SDK_INTERNAL - An error that was reported by the Serverless SDK internally that reports
     * internal SDK error
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_SDK_INTERNAL"] = 4] = "ERROR_TYPE_CAUGHT_SDK_INTERNAL";
    ErrorTags_ErrorType[ErrorTags_ErrorType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ErrorTags_ErrorType || (ErrorTags_ErrorType = {}));
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}

/* eslint-disable */
var NoticeTags_NoticeType;
(function (NoticeTags_NoticeType) {
    /** NOTICE_TYPE_UNSPECIFIED - Notice type not set */
    NoticeTags_NoticeType[NoticeTags_NoticeType["NOTICE_TYPE_UNSPECIFIED"] = 0] = "NOTICE_TYPE_UNSPECIFIED";
    /**
     * NOTICE_TYPE_SDK_INTERNAL - Signals SDK noteworthy event
     * Event that's not relevant to the user but can be important instruction for the Console
     * on how to process monitoring data of given case
     */
    NoticeTags_NoticeType[NoticeTags_NoticeType["NOTICE_TYPE_SDK_INTERNAL"] = 1] = "NOTICE_TYPE_SDK_INTERNAL";
    NoticeTags_NoticeType[NoticeTags_NoticeType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(NoticeTags_NoticeType || (NoticeTags_NoticeType = {}));
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}

/* eslint-disable */
var WarningTags_WarningType;
(function (WarningTags_WarningType) {
    /** WARNING_TYPE_UNSPECIFIED - Warning type not set */
    WarningTags_WarningType[WarningTags_WarningType["WARNING_TYPE_UNSPECIFIED"] = 0] = "WARNING_TYPE_UNSPECIFIED";
    /** WARNING_TYPE_USER - Warning explicitly reported by user */
    WarningTags_WarningType[WarningTags_WarningType["WARNING_TYPE_USER"] = 1] = "WARNING_TYPE_USER";
    /** WARNING_TYPE_SDK_USER - Warning reported internally by the SDK that signal potential misusage on user side */
    WarningTags_WarningType[WarningTags_WarningType["WARNING_TYPE_SDK_USER"] = 2] = "WARNING_TYPE_SDK_USER";
    /** WARNING_TYPE_SDK_INTERNAL - Warning reported internally by the SDK that signal non fatal SDK issue */
    WarningTags_WarningType[WarningTags_WarningType["WARNING_TYPE_SDK_INTERNAL"] = 3] = "WARNING_TYPE_SDK_INTERNAL";
    WarningTags_WarningType[WarningTags_WarningType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WarningTags_WarningType || (WarningTags_WarningType = {}));
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}

/* eslint-disable */
function createBaseSlsTags() {
    return {
        orgId: "",
        platform: undefined,
        service: "",
        region: undefined,
        sdk: undefined,
        environment: undefined,
        namespace: undefined,
    };
}
const SlsTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.platform !== undefined) {
            writer.uint32(18).string(message.platform);
        }
        if (message.service !== "") {
            writer.uint32(26).string(message.service);
        }
        if (message.region !== undefined) {
            writer.uint32(34).string(message.region);
        }
        if (message.sdk !== undefined) {
            SdkTags.encode(message.sdk, writer.uint32(42).fork()).ldelim();
        }
        if (message.environment !== undefined) {
            writer.uint32(130).string(message.environment);
        }
        if (message.namespace !== undefined) {
            writer.uint32(138).string(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSlsTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.service = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.region = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sdk = SdkTags.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.environment = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.namespace = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet$1(object.orgId) ? String(object.orgId) : "",
            platform: isSet$1(object.platform) ? String(object.platform) : undefined,
            service: isSet$1(object.service) ? String(object.service) : "",
            region: isSet$1(object.region) ? String(object.region) : undefined,
            sdk: isSet$1(object.sdk) ? SdkTags.fromJSON(object.sdk) : undefined,
            environment: isSet$1(object.environment) ? String(object.environment) : undefined,
            namespace: isSet$1(object.namespace) ? String(object.namespace) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.orgId !== undefined && (obj.orgId = message.orgId);
        message.platform !== undefined && (obj.platform = message.platform);
        message.service !== undefined && (obj.service = message.service);
        message.region !== undefined && (obj.region = message.region);
        message.sdk !== undefined && (obj.sdk = message.sdk ? SdkTags.toJSON(message.sdk) : undefined);
        message.environment !== undefined && (obj.environment = message.environment);
        message.namespace !== undefined && (obj.namespace = message.namespace);
        return obj;
    },
    create(base) {
        return SlsTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseSlsTags();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.platform = (_b = object.platform) !== null && _b !== void 0 ? _b : undefined;
        message.service = (_c = object.service) !== null && _c !== void 0 ? _c : "";
        message.region = (_d = object.region) !== null && _d !== void 0 ? _d : undefined;
        message.sdk = (object.sdk !== undefined && object.sdk !== null) ? SdkTags.fromPartial(object.sdk) : undefined;
        message.environment = (_e = object.environment) !== null && _e !== void 0 ? _e : undefined;
        message.namespace = (_f = object.namespace) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseSdkTags() {
    return { name: "", version: "", runtime: undefined };
}
const SdkTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.version !== "") {
            writer.uint32(18).string(message.version);
        }
        if (message.runtime !== undefined) {
            writer.uint32(26).string(message.runtime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSdkTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.runtime = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet$1(object.name) ? String(object.name) : "",
            version: isSet$1(object.version) ? String(object.version) : "",
            runtime: isSet$1(object.runtime) ? String(object.runtime) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.version !== undefined && (obj.version = message.version);
        message.runtime !== undefined && (obj.runtime = message.runtime);
        return obj;
    },
    create(base) {
        return SdkTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSdkTags();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : "";
        message.runtime = (_c = object.runtime) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet$1(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
const protobufPackage = "serverless.instrumentation.v1";
function createBaseMetricPayload() {
    return { slsTags: undefined, metrics: [] };
}
const MetricPayload = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.slsTags !== undefined) {
            SlsTags.encode(message.slsTags, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.metrics) {
            Metric.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetricPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.slsTags = SlsTags.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metrics.push(Metric.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slsTags: isSet(object.slsTags) ? SlsTags.fromJSON(object.slsTags) : undefined,
            metrics: Array.isArray(object === null || object === void 0 ? void 0 : object.metrics) ? object.metrics.map((e) => Metric.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.slsTags !== undefined && (obj.slsTags = message.slsTags ? SlsTags.toJSON(message.slsTags) : undefined);
        if (message.metrics) {
            obj.metrics = message.metrics.map((e) => e ? Metric.toJSON(e) : undefined);
        }
        else {
            obj.metrics = [];
        }
        return obj;
    },
    create(base) {
        return MetricPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMetricPayload();
        message.slsTags = (object.slsTags !== undefined && object.slsTags !== null)
            ? SlsTags.fromPartial(object.slsTags)
            : undefined;
        message.metrics = ((_a = object.metrics) === null || _a === void 0 ? void 0 : _a.map((e) => Metric.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMetric() {
    return {
        id: new Uint8Array(),
        name: "",
        startTimeUnixNano: Long__default["default"].UZERO,
        endTimeUnixNano: Long__default["default"].UZERO,
        tags: "",
        count: Long__default["default"].UZERO,
        sum: 0,
        quantileValues: [],
    };
}
const Metric = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.id.length !== 0) {
            writer.uint32(10).bytes(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (!message.startTimeUnixNano.isZero()) {
            writer.uint32(25).fixed64(message.startTimeUnixNano);
        }
        if (!message.endTimeUnixNano.isZero()) {
            writer.uint32(33).fixed64(message.endTimeUnixNano);
        }
        if (message.tags !== "") {
            writer.uint32(42).string(message.tags);
        }
        if (!message.count.isZero()) {
            writer.uint32(49).fixed64(message.count);
        }
        if (message.sum !== 0) {
            writer.uint32(57).double(message.sum);
        }
        for (const v of message.quantileValues) {
            Metric_ValueAtQuantile.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetric();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 25) {
                        break;
                    }
                    message.startTimeUnixNano = reader.fixed64();
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.endTimeUnixNano = reader.fixed64();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tags = reader.string();
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.count = reader.fixed64();
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.sum = reader.double();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.quantileValues.push(Metric_ValueAtQuantile.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(),
            name: isSet(object.name) ? String(object.name) : "",
            startTimeUnixNano: isSet(object.startTimeUnixNano) ? Long__default["default"].fromValue(object.startTimeUnixNano) : Long__default["default"].UZERO,
            endTimeUnixNano: isSet(object.endTimeUnixNano) ? Long__default["default"].fromValue(object.endTimeUnixNano) : Long__default["default"].UZERO,
            tags: isSet(object.tags) ? String(object.tags) : "",
            count: isSet(object.count) ? Long__default["default"].fromValue(object.count) : Long__default["default"].UZERO,
            sum: isSet(object.sum) ? Number(object.sum) : 0,
            quantileValues: Array.isArray(object === null || object === void 0 ? void 0 : object.quantileValues)
                ? object.quantileValues.map((e) => Metric_ValueAtQuantile.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = base64FromBytes(message.id !== undefined ? message.id : new Uint8Array()));
        message.name !== undefined && (obj.name = message.name);
        message.startTimeUnixNano !== undefined &&
            (obj.startTimeUnixNano = (message.startTimeUnixNano || Long__default["default"].UZERO).toString());
        message.endTimeUnixNano !== undefined && (obj.endTimeUnixNano = (message.endTimeUnixNano || Long__default["default"].UZERO).toString());
        message.tags !== undefined && (obj.tags = message.tags);
        message.count !== undefined && (obj.count = (message.count || Long__default["default"].UZERO).toString());
        message.sum !== undefined && (obj.sum = message.sum);
        if (message.quantileValues) {
            obj.quantileValues = message.quantileValues.map((e) => e ? Metric_ValueAtQuantile.toJSON(e) : undefined);
        }
        else {
            obj.quantileValues = [];
        }
        return obj;
    },
    create(base) {
        return Metric.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMetric();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.startTimeUnixNano = (object.startTimeUnixNano !== undefined && object.startTimeUnixNano !== null)
            ? Long__default["default"].fromValue(object.startTimeUnixNano)
            : Long__default["default"].UZERO;
        message.endTimeUnixNano = (object.endTimeUnixNano !== undefined && object.endTimeUnixNano !== null)
            ? Long__default["default"].fromValue(object.endTimeUnixNano)
            : Long__default["default"].UZERO;
        message.tags = (_c = object.tags) !== null && _c !== void 0 ? _c : "";
        message.count = (object.count !== undefined && object.count !== null) ? Long__default["default"].fromValue(object.count) : Long__default["default"].UZERO;
        message.sum = (_d = object.sum) !== null && _d !== void 0 ? _d : 0;
        message.quantileValues = ((_e = object.quantileValues) === null || _e === void 0 ? void 0 : _e.map((e) => Metric_ValueAtQuantile.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMetric_ValueAtQuantile() {
    return { quantile: 0, value: 0 };
}
const Metric_ValueAtQuantile = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.quantile !== 0) {
            writer.uint32(9).double(message.quantile);
        }
        if (message.value !== 0) {
            writer.uint32(17).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetric_ValueAtQuantile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 9) {
                        break;
                    }
                    message.quantile = reader.double();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            quantile: isSet(object.quantile) ? Number(object.quantile) : 0,
            value: isSet(object.value) ? Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.quantile !== undefined && (obj.quantile = message.quantile);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create(base) {
        return Metric_ValueAtQuantile.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMetric_ValueAtQuantile();
        message.quantile = (_a = object.quantile) !== null && _a !== void 0 ? _a : 0;
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}

exports.Metric = Metric;
exports.MetricPayload = MetricPayload;
exports.Metric_ValueAtQuantile = Metric_ValueAtQuantile;
exports.protobufPackage = protobufPackage;
//# sourceMappingURL=metric.js.map
