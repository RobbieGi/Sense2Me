'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Long = require('long');
var _m0 = require('protobufjs/minimal');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Long__default = /*#__PURE__*/_interopDefaultLegacy(Long);
var _m0__default = /*#__PURE__*/_interopDefaultLegacy(_m0);

/* eslint-disable */
const protobufPackage = "serverless.instrumentation.tags.v1";
function createBaseHttpTags() {
    return {
        method: "",
        protocol: "",
        host: "",
        path: "",
        queryParameterNames: [],
        requestHeaderNames: [],
        statusCode: undefined,
        errorCode: undefined,
    };
}
const HttpTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.method !== "") {
            writer.uint32(10).string(message.method);
        }
        if (message.protocol !== "") {
            writer.uint32(18).string(message.protocol);
        }
        if (message.host !== "") {
            writer.uint32(26).string(message.host);
        }
        if (message.path !== "") {
            writer.uint32(34).string(message.path);
        }
        for (const v of message.queryParameterNames) {
            writer.uint32(50).string(v);
        }
        for (const v of message.requestHeaderNames) {
            writer.uint32(66).string(v);
        }
        if (message.statusCode !== undefined) {
            writer.uint32(72).uint32(message.statusCode);
        }
        if (message.errorCode !== undefined) {
            writer.uint32(98).string(message.errorCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttpTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.method = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.protocol = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.queryParameterNames.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.requestHeaderNames.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.statusCode = reader.uint32();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.errorCode = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            method: isSet(object.method) ? String(object.method) : "",
            protocol: isSet(object.protocol) ? String(object.protocol) : "",
            host: isSet(object.host) ? String(object.host) : "",
            path: isSet(object.path) ? String(object.path) : "",
            queryParameterNames: Array.isArray(object === null || object === void 0 ? void 0 : object.queryParameterNames)
                ? object.queryParameterNames.map((e) => String(e))
                : [],
            requestHeaderNames: Array.isArray(object === null || object === void 0 ? void 0 : object.requestHeaderNames)
                ? object.requestHeaderNames.map((e) => String(e))
                : [],
            statusCode: isSet(object.statusCode) ? Number(object.statusCode) : undefined,
            errorCode: isSet(object.errorCode) ? String(object.errorCode) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.method !== undefined && (obj.method = message.method);
        message.protocol !== undefined && (obj.protocol = message.protocol);
        message.host !== undefined && (obj.host = message.host);
        message.path !== undefined && (obj.path = message.path);
        if (message.queryParameterNames) {
            obj.queryParameterNames = message.queryParameterNames.map((e) => e);
        }
        else {
            obj.queryParameterNames = [];
        }
        if (message.requestHeaderNames) {
            obj.requestHeaderNames = message.requestHeaderNames.map((e) => e);
        }
        else {
            obj.requestHeaderNames = [];
        }
        message.statusCode !== undefined && (obj.statusCode = Math.round(message.statusCode));
        message.errorCode !== undefined && (obj.errorCode = message.errorCode);
        return obj;
    },
    create(base) {
        return HttpTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseHttpTags();
        message.method = (_a = object.method) !== null && _a !== void 0 ? _a : "";
        message.protocol = (_b = object.protocol) !== null && _b !== void 0 ? _b : "";
        message.host = (_c = object.host) !== null && _c !== void 0 ? _c : "";
        message.path = (_d = object.path) !== null && _d !== void 0 ? _d : "";
        message.queryParameterNames = ((_e = object.queryParameterNames) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.requestHeaderNames = ((_f = object.requestHeaderNames) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.statusCode = (_g = object.statusCode) !== null && _g !== void 0 ? _g : undefined;
        message.errorCode = (_h = object.errorCode) !== null && _h !== void 0 ? _h : undefined;
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}

exports.HttpTags = HttpTags;
exports.protobufPackage = protobufPackage;
//# sourceMappingURL=common.js.map
