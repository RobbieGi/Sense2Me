'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Long = require('long');
var _m0 = require('protobufjs/minimal');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Long__default = /*#__PURE__*/_interopDefaultLegacy(Long);
var _m0__default = /*#__PURE__*/_interopDefaultLegacy(_m0);

/* eslint-disable */
const protobufPackage = "serverless.instrumentation.tags.v1";
exports.ErrorTags_ErrorType = void 0;
(function (ErrorTags_ErrorType) {
    /** ERROR_TYPE_UNSPECIFIED - No ErrorType was provided. This should never be the case and if it is received ingest will ignore it. */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_UNSPECIFIED"] = 0] = "ERROR_TYPE_UNSPECIFIED";
    /** ERROR_TYPE_UNCAUGHT - An unexpected error that caused the application to fail */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_UNCAUGHT"] = 1] = "ERROR_TYPE_UNCAUGHT";
    /**
     * ERROR_TYPE_CAUGHT_USER - An error that was reported by user explictly via the Serverless SDK or console.error call
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_USER"] = 2] = "ERROR_TYPE_CAUGHT_USER";
    /**
     * ERROR_TYPE_CAUGHT_SDK_USER - An error that was reported by the Serverless SDK internally that reports user error
     * (misuage of the SDK)
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_SDK_USER"] = 3] = "ERROR_TYPE_CAUGHT_SDK_USER";
    /**
     * ERROR_TYPE_CAUGHT_SDK_INTERNAL - An error that was reported by the Serverless SDK internally that reports
     * internal SDK error
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_SDK_INTERNAL"] = 4] = "ERROR_TYPE_CAUGHT_SDK_INTERNAL";
    ErrorTags_ErrorType[ErrorTags_ErrorType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(exports.ErrorTags_ErrorType || (exports.ErrorTags_ErrorType = {}));
function errorTags_ErrorTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ERROR_TYPE_UNSPECIFIED":
            return exports.ErrorTags_ErrorType.ERROR_TYPE_UNSPECIFIED;
        case 1:
        case "ERROR_TYPE_UNCAUGHT":
            return exports.ErrorTags_ErrorType.ERROR_TYPE_UNCAUGHT;
        case 2:
        case "ERROR_TYPE_CAUGHT_USER":
            return exports.ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_USER;
        case 3:
        case "ERROR_TYPE_CAUGHT_SDK_USER":
            return exports.ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_SDK_USER;
        case 4:
        case "ERROR_TYPE_CAUGHT_SDK_INTERNAL":
            return exports.ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_SDK_INTERNAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return exports.ErrorTags_ErrorType.UNRECOGNIZED;
    }
}
function errorTags_ErrorTypeToJSON(object) {
    switch (object) {
        case exports.ErrorTags_ErrorType.ERROR_TYPE_UNSPECIFIED:
            return "ERROR_TYPE_UNSPECIFIED";
        case exports.ErrorTags_ErrorType.ERROR_TYPE_UNCAUGHT:
            return "ERROR_TYPE_UNCAUGHT";
        case exports.ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_USER:
            return "ERROR_TYPE_CAUGHT_USER";
        case exports.ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_SDK_USER:
            return "ERROR_TYPE_CAUGHT_SDK_USER";
        case exports.ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_SDK_INTERNAL:
            return "ERROR_TYPE_CAUGHT_SDK_INTERNAL";
        case exports.ErrorTags_ErrorType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseErrorTags() {
    return { name: "", message: undefined, stacktrace: undefined, type: 0 };
}
const ErrorTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.message !== undefined) {
            writer.uint32(18).string(message.message);
        }
        if (message.stacktrace !== undefined) {
            writer.uint32(26).string(message.stacktrace);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseErrorTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.stacktrace = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            message: isSet(object.message) ? String(object.message) : undefined,
            stacktrace: isSet(object.stacktrace) ? String(object.stacktrace) : undefined,
            type: isSet(object.type) ? errorTags_ErrorTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.message !== undefined && (obj.message = message.message);
        message.stacktrace !== undefined && (obj.stacktrace = message.stacktrace);
        message.type !== undefined && (obj.type = errorTags_ErrorTypeToJSON(message.type));
        return obj;
    },
    create(base) {
        return ErrorTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseErrorTags();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        message.stacktrace = (_c = object.stacktrace) !== null && _c !== void 0 ? _c : undefined;
        message.type = (_d = object.type) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}

exports.ErrorTags = ErrorTags;
exports.errorTags_ErrorTypeFromJSON = errorTags_ErrorTypeFromJSON;
exports.errorTags_ErrorTypeToJSON = errorTags_ErrorTypeToJSON;
exports.protobufPackage = protobufPackage;
//# sourceMappingURL=error.js.map
