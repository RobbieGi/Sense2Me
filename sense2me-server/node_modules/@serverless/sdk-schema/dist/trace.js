'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Long = require('long');
var _m0 = require('protobufjs/minimal');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Long__default = /*#__PURE__*/_interopDefaultLegacy(Long);
var _m0__default = /*#__PURE__*/_interopDefaultLegacy(_m0);

/* eslint-disable */
function createBaseHttpTags() {
    return {
        method: "",
        protocol: "",
        host: "",
        path: "",
        queryParameterNames: [],
        requestHeaderNames: [],
        statusCode: undefined,
        errorCode: undefined,
    };
}
const HttpTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.method !== "") {
            writer.uint32(10).string(message.method);
        }
        if (message.protocol !== "") {
            writer.uint32(18).string(message.protocol);
        }
        if (message.host !== "") {
            writer.uint32(26).string(message.host);
        }
        if (message.path !== "") {
            writer.uint32(34).string(message.path);
        }
        for (const v of message.queryParameterNames) {
            writer.uint32(50).string(v);
        }
        for (const v of message.requestHeaderNames) {
            writer.uint32(66).string(v);
        }
        if (message.statusCode !== undefined) {
            writer.uint32(72).uint32(message.statusCode);
        }
        if (message.errorCode !== undefined) {
            writer.uint32(98).string(message.errorCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttpTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.method = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.protocol = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.queryParameterNames.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.requestHeaderNames.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.statusCode = reader.uint32();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.errorCode = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            method: isSet$7(object.method) ? String(object.method) : "",
            protocol: isSet$7(object.protocol) ? String(object.protocol) : "",
            host: isSet$7(object.host) ? String(object.host) : "",
            path: isSet$7(object.path) ? String(object.path) : "",
            queryParameterNames: Array.isArray(object === null || object === void 0 ? void 0 : object.queryParameterNames)
                ? object.queryParameterNames.map((e) => String(e))
                : [],
            requestHeaderNames: Array.isArray(object === null || object === void 0 ? void 0 : object.requestHeaderNames)
                ? object.requestHeaderNames.map((e) => String(e))
                : [],
            statusCode: isSet$7(object.statusCode) ? Number(object.statusCode) : undefined,
            errorCode: isSet$7(object.errorCode) ? String(object.errorCode) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.method !== undefined && (obj.method = message.method);
        message.protocol !== undefined && (obj.protocol = message.protocol);
        message.host !== undefined && (obj.host = message.host);
        message.path !== undefined && (obj.path = message.path);
        if (message.queryParameterNames) {
            obj.queryParameterNames = message.queryParameterNames.map((e) => e);
        }
        else {
            obj.queryParameterNames = [];
        }
        if (message.requestHeaderNames) {
            obj.requestHeaderNames = message.requestHeaderNames.map((e) => e);
        }
        else {
            obj.requestHeaderNames = [];
        }
        message.statusCode !== undefined && (obj.statusCode = Math.round(message.statusCode));
        message.errorCode !== undefined && (obj.errorCode = message.errorCode);
        return obj;
    },
    create(base) {
        return HttpTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseHttpTags();
        message.method = (_a = object.method) !== null && _a !== void 0 ? _a : "";
        message.protocol = (_b = object.protocol) !== null && _b !== void 0 ? _b : "";
        message.host = (_c = object.host) !== null && _c !== void 0 ? _c : "";
        message.path = (_d = object.path) !== null && _d !== void 0 ? _d : "";
        message.queryParameterNames = ((_e = object.queryParameterNames) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.requestHeaderNames = ((_f = object.requestHeaderNames) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.statusCode = (_g = object.statusCode) !== null && _g !== void 0 ? _g : undefined;
        message.errorCode = (_h = object.errorCode) !== null && _h !== void 0 ? _h : undefined;
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet$7(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
/**
 * A Lambda function invocation can have one of the following
 * outcomes upon completion.
 */
var AwsLambdaTags_Outcome;
(function (AwsLambdaTags_Outcome) {
    /** OUTCOME_UNSPECIFIED - No outcome was registered. Either information on the outcome was not disclosed (which should never be the case), or the function invocation has not been finalized yet */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_UNSPECIFIED"] = 0] = "OUTCOME_UNSPECIFIED";
    /** OUTCOME_SUCCESS - Function handler returned successfully */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_SUCCESS"] = 1] = "OUTCOME_SUCCESS";
    /** OUTCOME_ERROR_INITIALIZATION - Function crashed at initialization */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_ERROR_INITIALIZATION"] = 2] = "OUTCOME_ERROR_INITIALIZATION";
    /** OUTCOME_ERROR_UNHANDLED - Function crashed in an unhandled way at invocation (a result of either uncaught exception or unhandled rejection) */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_ERROR_UNHANDLED"] = 3] = "OUTCOME_ERROR_UNHANDLED";
    /** OUTCOME_ERROR_TIMEOUT - Function timed out */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_ERROR_TIMEOUT"] = 4] = "OUTCOME_ERROR_TIMEOUT";
    /** OUTCOME_ERROR_HANDLED - Function handler resolved with an error (either error was passed to lambda callback, or async handler resolved with error rejection) */
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["OUTCOME_ERROR_HANDLED"] = 5] = "OUTCOME_ERROR_HANDLED";
    AwsLambdaTags_Outcome[AwsLambdaTags_Outcome["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AwsLambdaTags_Outcome || (AwsLambdaTags_Outcome = {}));
function awsLambdaTags_OutcomeFromJSON(object) {
    switch (object) {
        case 0:
        case "OUTCOME_UNSPECIFIED":
            return AwsLambdaTags_Outcome.OUTCOME_UNSPECIFIED;
        case 1:
        case "OUTCOME_SUCCESS":
            return AwsLambdaTags_Outcome.OUTCOME_SUCCESS;
        case 2:
        case "OUTCOME_ERROR_INITIALIZATION":
            return AwsLambdaTags_Outcome.OUTCOME_ERROR_INITIALIZATION;
        case 3:
        case "OUTCOME_ERROR_UNHANDLED":
            return AwsLambdaTags_Outcome.OUTCOME_ERROR_UNHANDLED;
        case 4:
        case "OUTCOME_ERROR_TIMEOUT":
            return AwsLambdaTags_Outcome.OUTCOME_ERROR_TIMEOUT;
        case 5:
        case "OUTCOME_ERROR_HANDLED":
            return AwsLambdaTags_Outcome.OUTCOME_ERROR_HANDLED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AwsLambdaTags_Outcome.UNRECOGNIZED;
    }
}
function awsLambdaTags_OutcomeToJSON(object) {
    switch (object) {
        case AwsLambdaTags_Outcome.OUTCOME_UNSPECIFIED:
            return "OUTCOME_UNSPECIFIED";
        case AwsLambdaTags_Outcome.OUTCOME_SUCCESS:
            return "OUTCOME_SUCCESS";
        case AwsLambdaTags_Outcome.OUTCOME_ERROR_INITIALIZATION:
            return "OUTCOME_ERROR_INITIALIZATION";
        case AwsLambdaTags_Outcome.OUTCOME_ERROR_UNHANDLED:
            return "OUTCOME_ERROR_UNHANDLED";
        case AwsLambdaTags_Outcome.OUTCOME_ERROR_TIMEOUT:
            return "OUTCOME_ERROR_TIMEOUT";
        case AwsLambdaTags_Outcome.OUTCOME_ERROR_HANDLED:
            return "OUTCOME_ERROR_HANDLED";
        case AwsLambdaTags_Outcome.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var AwsLambdaTags_ResponseMode;
(function (AwsLambdaTags_ResponseMode) {
    /** RESPONSE_MODE_UNSPECIFIED - Mode not confirmed */
    AwsLambdaTags_ResponseMode[AwsLambdaTags_ResponseMode["RESPONSE_MODE_UNSPECIFIED"] = 0] = "RESPONSE_MODE_UNSPECIFIED";
    /** RESPONSE_MODE_BUFFERED - Regular buffered response */
    AwsLambdaTags_ResponseMode[AwsLambdaTags_ResponseMode["RESPONSE_MODE_BUFFERED"] = 1] = "RESPONSE_MODE_BUFFERED";
    /** RESPONSE_MODE_RESPONSE_STREAM - Stream response */
    AwsLambdaTags_ResponseMode[AwsLambdaTags_ResponseMode["RESPONSE_MODE_RESPONSE_STREAM"] = 2] = "RESPONSE_MODE_RESPONSE_STREAM";
    AwsLambdaTags_ResponseMode[AwsLambdaTags_ResponseMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AwsLambdaTags_ResponseMode || (AwsLambdaTags_ResponseMode = {}));
function awsLambdaTags_ResponseModeFromJSON(object) {
    switch (object) {
        case 0:
        case "RESPONSE_MODE_UNSPECIFIED":
            return AwsLambdaTags_ResponseMode.RESPONSE_MODE_UNSPECIFIED;
        case 1:
        case "RESPONSE_MODE_BUFFERED":
            return AwsLambdaTags_ResponseMode.RESPONSE_MODE_BUFFERED;
        case 2:
        case "RESPONSE_MODE_RESPONSE_STREAM":
            return AwsLambdaTags_ResponseMode.RESPONSE_MODE_RESPONSE_STREAM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AwsLambdaTags_ResponseMode.UNRECOGNIZED;
    }
}
function awsLambdaTags_ResponseModeToJSON(object) {
    switch (object) {
        case AwsLambdaTags_ResponseMode.RESPONSE_MODE_UNSPECIFIED:
            return "RESPONSE_MODE_UNSPECIFIED";
        case AwsLambdaTags_ResponseMode.RESPONSE_MODE_BUFFERED:
            return "RESPONSE_MODE_BUFFERED";
        case AwsLambdaTags_ResponseMode.RESPONSE_MODE_RESPONSE_STREAM:
            return "RESPONSE_MODE_RESPONSE_STREAM";
        case AwsLambdaTags_ResponseMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseAwsTags() {
    return {
        lambda: undefined,
        sdk: undefined,
        accountId: undefined,
        region: undefined,
        requestId: undefined,
        resourceName: undefined,
        sequenceId: undefined,
        logGroup: undefined,
        logStream: undefined,
    };
}
const AwsTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.lambda !== undefined) {
            AwsLambdaTags.encode(message.lambda, writer.uint32(802).fork()).ldelim();
        }
        if (message.sdk !== undefined) {
            AwsSdkTags.encode(message.sdk, writer.uint32(810).fork()).ldelim();
        }
        if (message.accountId !== undefined) {
            writer.uint32(818).string(message.accountId);
        }
        if (message.region !== undefined) {
            writer.uint32(826).string(message.region);
        }
        if (message.requestId !== undefined) {
            writer.uint32(834).string(message.requestId);
        }
        if (message.resourceName !== undefined) {
            writer.uint32(842).string(message.resourceName);
        }
        if (message.sequenceId !== undefined) {
            writer.uint32(26).string(message.sequenceId);
        }
        if (message.logGroup !== undefined) {
            writer.uint32(34).string(message.logGroup);
        }
        if (message.logStream !== undefined) {
            writer.uint32(42).string(message.logStream);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.lambda = AwsLambdaTags.decode(reader, reader.uint32());
                    continue;
                case 101:
                    if (tag !== 810) {
                        break;
                    }
                    message.sdk = AwsSdkTags.decode(reader, reader.uint32());
                    continue;
                case 102:
                    if (tag !== 818) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                case 103:
                    if (tag !== 826) {
                        break;
                    }
                    message.region = reader.string();
                    continue;
                case 104:
                    if (tag !== 834) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 105:
                    if (tag !== 842) {
                        break;
                    }
                    message.resourceName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sequenceId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.logGroup = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.logStream = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lambda: isSet$6(object.lambda) ? AwsLambdaTags.fromJSON(object.lambda) : undefined,
            sdk: isSet$6(object.sdk) ? AwsSdkTags.fromJSON(object.sdk) : undefined,
            accountId: isSet$6(object.accountId) ? String(object.accountId) : undefined,
            region: isSet$6(object.region) ? String(object.region) : undefined,
            requestId: isSet$6(object.requestId) ? String(object.requestId) : undefined,
            resourceName: isSet$6(object.resourceName) ? String(object.resourceName) : undefined,
            sequenceId: isSet$6(object.sequenceId) ? String(object.sequenceId) : undefined,
            logGroup: isSet$6(object.logGroup) ? String(object.logGroup) : undefined,
            logStream: isSet$6(object.logStream) ? String(object.logStream) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.lambda !== undefined && (obj.lambda = message.lambda ? AwsLambdaTags.toJSON(message.lambda) : undefined);
        message.sdk !== undefined && (obj.sdk = message.sdk ? AwsSdkTags.toJSON(message.sdk) : undefined);
        message.accountId !== undefined && (obj.accountId = message.accountId);
        message.region !== undefined && (obj.region = message.region);
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.resourceName !== undefined && (obj.resourceName = message.resourceName);
        message.sequenceId !== undefined && (obj.sequenceId = message.sequenceId);
        message.logGroup !== undefined && (obj.logGroup = message.logGroup);
        message.logStream !== undefined && (obj.logStream = message.logStream);
        return obj;
    },
    create(base) {
        return AwsTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseAwsTags();
        message.lambda = (object.lambda !== undefined && object.lambda !== null)
            ? AwsLambdaTags.fromPartial(object.lambda)
            : undefined;
        message.sdk = (object.sdk !== undefined && object.sdk !== null) ? AwsSdkTags.fromPartial(object.sdk) : undefined;
        message.accountId = (_a = object.accountId) !== null && _a !== void 0 ? _a : undefined;
        message.region = (_b = object.region) !== null && _b !== void 0 ? _b : undefined;
        message.requestId = (_c = object.requestId) !== null && _c !== void 0 ? _c : undefined;
        message.resourceName = (_d = object.resourceName) !== null && _d !== void 0 ? _d : undefined;
        message.sequenceId = (_e = object.sequenceId) !== null && _e !== void 0 ? _e : undefined;
        message.logGroup = (_f = object.logGroup) !== null && _f !== void 0 ? _f : undefined;
        message.logStream = (_g = object.logStream) !== null && _g !== void 0 ? _g : undefined;
        return message;
    },
};
function createBaseAwsApiGatewayTags() {
    return { accountId: "", apiId: "", apiStage: "", request: undefined };
}
const AwsApiGatewayTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.accountId !== "") {
            writer.uint32(10).string(message.accountId);
        }
        if (message.apiId !== "") {
            writer.uint32(18).string(message.apiId);
        }
        if (message.apiStage !== "") {
            writer.uint32(26).string(message.apiStage);
        }
        if (message.request !== undefined) {
            AwsApiGatewayTags_AwsApiGatewayRequestTags.encode(message.request, writer.uint32(122).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsApiGatewayTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.apiId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.apiStage = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.request = AwsApiGatewayTags_AwsApiGatewayRequestTags.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet$6(object.accountId) ? String(object.accountId) : "",
            apiId: isSet$6(object.apiId) ? String(object.apiId) : "",
            apiStage: isSet$6(object.apiStage) ? String(object.apiStage) : "",
            request: isSet$6(object.request) ? AwsApiGatewayTags_AwsApiGatewayRequestTags.fromJSON(object.request) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.accountId !== undefined && (obj.accountId = message.accountId);
        message.apiId !== undefined && (obj.apiId = message.apiId);
        message.apiStage !== undefined && (obj.apiStage = message.apiStage);
        message.request !== undefined &&
            (obj.request = message.request ? AwsApiGatewayTags_AwsApiGatewayRequestTags.toJSON(message.request) : undefined);
        return obj;
    },
    create(base) {
        return AwsApiGatewayTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAwsApiGatewayTags();
        message.accountId = (_a = object.accountId) !== null && _a !== void 0 ? _a : "";
        message.apiId = (_b = object.apiId) !== null && _b !== void 0 ? _b : "";
        message.apiStage = (_c = object.apiStage) !== null && _c !== void 0 ? _c : "";
        message.request = (object.request !== undefined && object.request !== null)
            ? AwsApiGatewayTags_AwsApiGatewayRequestTags.fromPartial(object.request)
            : undefined;
        return message;
    },
};
function createBaseAwsApiGatewayTags_AwsApiGatewayRequestTags() {
    return { id: "", timeEpoch: Long__default["default"].UZERO, pathParameterNames: [] };
}
const AwsApiGatewayTags_AwsApiGatewayRequestTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (!message.timeEpoch.isZero()) {
            writer.uint32(16).uint64(message.timeEpoch);
        }
        for (const v of message.pathParameterNames) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsApiGatewayTags_AwsApiGatewayRequestTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.timeEpoch = reader.uint64();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.pathParameterNames.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet$6(object.id) ? String(object.id) : "",
            timeEpoch: isSet$6(object.timeEpoch) ? Long__default["default"].fromValue(object.timeEpoch) : Long__default["default"].UZERO,
            pathParameterNames: Array.isArray(object === null || object === void 0 ? void 0 : object.pathParameterNames)
                ? object.pathParameterNames.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.timeEpoch !== undefined && (obj.timeEpoch = (message.timeEpoch || Long__default["default"].UZERO).toString());
        if (message.pathParameterNames) {
            obj.pathParameterNames = message.pathParameterNames.map((e) => e);
        }
        else {
            obj.pathParameterNames = [];
        }
        return obj;
    },
    create(base) {
        return AwsApiGatewayTags_AwsApiGatewayRequestTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAwsApiGatewayTags_AwsApiGatewayRequestTags();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.timeEpoch = (object.timeEpoch !== undefined && object.timeEpoch !== null)
            ? Long__default["default"].fromValue(object.timeEpoch)
            : Long__default["default"].UZERO;
        message.pathParameterNames = ((_b = object.pathParameterNames) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseAwsLambdaTags() {
    return {
        arch: "",
        isColdstart: false,
        eventType: undefined,
        eventSource: undefined,
        logGroup: undefined,
        logStreamName: undefined,
        maxMemory: undefined,
        name: "",
        requestId: "",
        version: "",
        accountId: undefined,
        outcome: 0,
        errorExceptionMessage: undefined,
        errorExceptionStacktrace: undefined,
        duration: undefined,
        requestBody: undefined,
        responseBody: undefined,
        logsStartTimeUnix: undefined,
        logsEndTimeUnix: undefined,
        responseMode: undefined,
        sqs: undefined,
        sns: undefined,
        http: undefined,
        apiGateway: undefined,
        httpRouter: undefined,
        initialization: undefined,
        invocation: undefined,
        runtime: undefined,
    };
}
const AwsLambdaTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.arch !== "") {
            writer.uint32(10).string(message.arch);
        }
        if (message.isColdstart === true) {
            writer.uint32(16).bool(message.isColdstart);
        }
        if (message.eventType !== undefined) {
            writer.uint32(26).string(message.eventType);
        }
        if (message.eventSource !== undefined) {
            writer.uint32(34).string(message.eventSource);
        }
        if (message.logGroup !== undefined) {
            writer.uint32(42).string(message.logGroup);
        }
        if (message.logStreamName !== undefined) {
            writer.uint32(50).string(message.logStreamName);
        }
        if (message.maxMemory !== undefined) {
            writer.uint32(56).uint32(message.maxMemory);
        }
        if (message.name !== "") {
            writer.uint32(66).string(message.name);
        }
        if (message.requestId !== "") {
            writer.uint32(74).string(message.requestId);
        }
        if (message.version !== "") {
            writer.uint32(90).string(message.version);
        }
        if (message.accountId !== undefined) {
            writer.uint32(98).string(message.accountId);
        }
        if (message.outcome !== 0) {
            writer.uint32(112).int32(message.outcome);
        }
        if (message.errorExceptionMessage !== undefined) {
            writer.uint32(122).string(message.errorExceptionMessage);
        }
        if (message.errorExceptionStacktrace !== undefined) {
            writer.uint32(130).string(message.errorExceptionStacktrace);
        }
        if (message.duration !== undefined) {
            writer.uint32(136).uint32(message.duration);
        }
        if (message.requestBody !== undefined) {
            writer.uint32(146).string(message.requestBody);
        }
        if (message.responseBody !== undefined) {
            writer.uint32(154).string(message.responseBody);
        }
        if (message.logsStartTimeUnix !== undefined) {
            writer.uint32(160).uint64(message.logsStartTimeUnix);
        }
        if (message.logsEndTimeUnix !== undefined) {
            writer.uint32(168).uint64(message.logsEndTimeUnix);
        }
        if (message.responseMode !== undefined) {
            writer.uint32(176).int32(message.responseMode);
        }
        if (message.sqs !== undefined) {
            AwsSqsEventTags.encode(message.sqs, writer.uint32(802).fork()).ldelim();
        }
        if (message.sns !== undefined) {
            AwsSnsEventTags.encode(message.sns, writer.uint32(810).fork()).ldelim();
        }
        if (message.http !== undefined) {
            HttpTags.encode(message.http, writer.uint32(818).fork()).ldelim();
        }
        if (message.apiGateway !== undefined) {
            AwsApiGatewayTags.encode(message.apiGateway, writer.uint32(826).fork()).ldelim();
        }
        if (message.httpRouter !== undefined) {
            HttpRouterTags.encode(message.httpRouter, writer.uint32(850).fork()).ldelim();
        }
        if (message.initialization !== undefined) {
            AwsLambdaInitializationTags.encode(message.initialization, writer.uint32(834).fork()).ldelim();
        }
        if (message.invocation !== undefined) {
            AwsLambdaInvocationTags.encode(message.invocation, writer.uint32(842).fork()).ldelim();
        }
        if (message.runtime !== undefined) {
            AwsLambdaRuntimeTags.encode(message.runtime, writer.uint32(858).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsLambdaTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.arch = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isColdstart = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.eventType = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.eventSource = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.logGroup = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.logStreamName = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.maxMemory = reader.uint32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.outcome = reader.int32();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.errorExceptionMessage = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.errorExceptionStacktrace = reader.string();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.duration = reader.uint32();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.requestBody = reader.string();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.responseBody = reader.string();
                    continue;
                case 20:
                    if (tag !== 160) {
                        break;
                    }
                    message.logsStartTimeUnix = reader.uint64();
                    continue;
                case 21:
                    if (tag !== 168) {
                        break;
                    }
                    message.logsEndTimeUnix = reader.uint64();
                    continue;
                case 22:
                    if (tag !== 176) {
                        break;
                    }
                    message.responseMode = reader.int32();
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.sqs = AwsSqsEventTags.decode(reader, reader.uint32());
                    continue;
                case 101:
                    if (tag !== 810) {
                        break;
                    }
                    message.sns = AwsSnsEventTags.decode(reader, reader.uint32());
                    continue;
                case 102:
                    if (tag !== 818) {
                        break;
                    }
                    message.http = HttpTags.decode(reader, reader.uint32());
                    continue;
                case 103:
                    if (tag !== 826) {
                        break;
                    }
                    message.apiGateway = AwsApiGatewayTags.decode(reader, reader.uint32());
                    continue;
                case 106:
                    if (tag !== 850) {
                        break;
                    }
                    message.httpRouter = HttpRouterTags.decode(reader, reader.uint32());
                    continue;
                case 104:
                    if (tag !== 834) {
                        break;
                    }
                    message.initialization = AwsLambdaInitializationTags.decode(reader, reader.uint32());
                    continue;
                case 105:
                    if (tag !== 842) {
                        break;
                    }
                    message.invocation = AwsLambdaInvocationTags.decode(reader, reader.uint32());
                    continue;
                case 107:
                    if (tag !== 858) {
                        break;
                    }
                    message.runtime = AwsLambdaRuntimeTags.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            arch: isSet$6(object.arch) ? String(object.arch) : "",
            isColdstart: isSet$6(object.isColdstart) ? Boolean(object.isColdstart) : false,
            eventType: isSet$6(object.eventType) ? String(object.eventType) : undefined,
            eventSource: isSet$6(object.eventSource) ? String(object.eventSource) : undefined,
            logGroup: isSet$6(object.logGroup) ? String(object.logGroup) : undefined,
            logStreamName: isSet$6(object.logStreamName) ? String(object.logStreamName) : undefined,
            maxMemory: isSet$6(object.maxMemory) ? Number(object.maxMemory) : undefined,
            name: isSet$6(object.name) ? String(object.name) : "",
            requestId: isSet$6(object.requestId) ? String(object.requestId) : "",
            version: isSet$6(object.version) ? String(object.version) : "",
            accountId: isSet$6(object.accountId) ? String(object.accountId) : undefined,
            outcome: isSet$6(object.outcome) ? awsLambdaTags_OutcomeFromJSON(object.outcome) : 0,
            errorExceptionMessage: isSet$6(object.errorExceptionMessage) ? String(object.errorExceptionMessage) : undefined,
            errorExceptionStacktrace: isSet$6(object.errorExceptionStacktrace)
                ? String(object.errorExceptionStacktrace)
                : undefined,
            duration: isSet$6(object.duration) ? Number(object.duration) : undefined,
            requestBody: isSet$6(object.requestBody) ? String(object.requestBody) : undefined,
            responseBody: isSet$6(object.responseBody) ? String(object.responseBody) : undefined,
            logsStartTimeUnix: isSet$6(object.logsStartTimeUnix) ? Long__default["default"].fromValue(object.logsStartTimeUnix) : undefined,
            logsEndTimeUnix: isSet$6(object.logsEndTimeUnix) ? Long__default["default"].fromValue(object.logsEndTimeUnix) : undefined,
            responseMode: isSet$6(object.responseMode) ? awsLambdaTags_ResponseModeFromJSON(object.responseMode) : undefined,
            sqs: isSet$6(object.sqs) ? AwsSqsEventTags.fromJSON(object.sqs) : undefined,
            sns: isSet$6(object.sns) ? AwsSnsEventTags.fromJSON(object.sns) : undefined,
            http: isSet$6(object.http) ? HttpTags.fromJSON(object.http) : undefined,
            apiGateway: isSet$6(object.apiGateway) ? AwsApiGatewayTags.fromJSON(object.apiGateway) : undefined,
            httpRouter: isSet$6(object.httpRouter) ? HttpRouterTags.fromJSON(object.httpRouter) : undefined,
            initialization: isSet$6(object.initialization)
                ? AwsLambdaInitializationTags.fromJSON(object.initialization)
                : undefined,
            invocation: isSet$6(object.invocation) ? AwsLambdaInvocationTags.fromJSON(object.invocation) : undefined,
            runtime: isSet$6(object.runtime) ? AwsLambdaRuntimeTags.fromJSON(object.runtime) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.arch !== undefined && (obj.arch = message.arch);
        message.isColdstart !== undefined && (obj.isColdstart = message.isColdstart);
        message.eventType !== undefined && (obj.eventType = message.eventType);
        message.eventSource !== undefined && (obj.eventSource = message.eventSource);
        message.logGroup !== undefined && (obj.logGroup = message.logGroup);
        message.logStreamName !== undefined && (obj.logStreamName = message.logStreamName);
        message.maxMemory !== undefined && (obj.maxMemory = Math.round(message.maxMemory));
        message.name !== undefined && (obj.name = message.name);
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.version !== undefined && (obj.version = message.version);
        message.accountId !== undefined && (obj.accountId = message.accountId);
        message.outcome !== undefined && (obj.outcome = awsLambdaTags_OutcomeToJSON(message.outcome));
        message.errorExceptionMessage !== undefined && (obj.errorExceptionMessage = message.errorExceptionMessage);
        message.errorExceptionStacktrace !== undefined && (obj.errorExceptionStacktrace = message.errorExceptionStacktrace);
        message.duration !== undefined && (obj.duration = Math.round(message.duration));
        message.requestBody !== undefined && (obj.requestBody = message.requestBody);
        message.responseBody !== undefined && (obj.responseBody = message.responseBody);
        message.logsStartTimeUnix !== undefined &&
            (obj.logsStartTimeUnix = (message.logsStartTimeUnix || undefined).toString());
        message.logsEndTimeUnix !== undefined && (obj.logsEndTimeUnix = (message.logsEndTimeUnix || undefined).toString());
        message.responseMode !== undefined && (obj.responseMode = message.responseMode !== undefined
            ? awsLambdaTags_ResponseModeToJSON(message.responseMode)
            : undefined);
        message.sqs !== undefined && (obj.sqs = message.sqs ? AwsSqsEventTags.toJSON(message.sqs) : undefined);
        message.sns !== undefined && (obj.sns = message.sns ? AwsSnsEventTags.toJSON(message.sns) : undefined);
        message.http !== undefined && (obj.http = message.http ? HttpTags.toJSON(message.http) : undefined);
        message.apiGateway !== undefined &&
            (obj.apiGateway = message.apiGateway ? AwsApiGatewayTags.toJSON(message.apiGateway) : undefined);
        message.httpRouter !== undefined &&
            (obj.httpRouter = message.httpRouter ? HttpRouterTags.toJSON(message.httpRouter) : undefined);
        message.initialization !== undefined && (obj.initialization = message.initialization
            ? AwsLambdaInitializationTags.toJSON(message.initialization)
            : undefined);
        message.invocation !== undefined &&
            (obj.invocation = message.invocation ? AwsLambdaInvocationTags.toJSON(message.invocation) : undefined);
        message.runtime !== undefined &&
            (obj.runtime = message.runtime ? AwsLambdaRuntimeTags.toJSON(message.runtime) : undefined);
        return obj;
    },
    create(base) {
        return AwsLambdaTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const message = createBaseAwsLambdaTags();
        message.arch = (_a = object.arch) !== null && _a !== void 0 ? _a : "";
        message.isColdstart = (_b = object.isColdstart) !== null && _b !== void 0 ? _b : false;
        message.eventType = (_c = object.eventType) !== null && _c !== void 0 ? _c : undefined;
        message.eventSource = (_d = object.eventSource) !== null && _d !== void 0 ? _d : undefined;
        message.logGroup = (_e = object.logGroup) !== null && _e !== void 0 ? _e : undefined;
        message.logStreamName = (_f = object.logStreamName) !== null && _f !== void 0 ? _f : undefined;
        message.maxMemory = (_g = object.maxMemory) !== null && _g !== void 0 ? _g : undefined;
        message.name = (_h = object.name) !== null && _h !== void 0 ? _h : "";
        message.requestId = (_j = object.requestId) !== null && _j !== void 0 ? _j : "";
        message.version = (_k = object.version) !== null && _k !== void 0 ? _k : "";
        message.accountId = (_l = object.accountId) !== null && _l !== void 0 ? _l : undefined;
        message.outcome = (_m = object.outcome) !== null && _m !== void 0 ? _m : 0;
        message.errorExceptionMessage = (_o = object.errorExceptionMessage) !== null && _o !== void 0 ? _o : undefined;
        message.errorExceptionStacktrace = (_p = object.errorExceptionStacktrace) !== null && _p !== void 0 ? _p : undefined;
        message.duration = (_q = object.duration) !== null && _q !== void 0 ? _q : undefined;
        message.requestBody = (_r = object.requestBody) !== null && _r !== void 0 ? _r : undefined;
        message.responseBody = (_s = object.responseBody) !== null && _s !== void 0 ? _s : undefined;
        message.logsStartTimeUnix = (object.logsStartTimeUnix !== undefined && object.logsStartTimeUnix !== null)
            ? Long__default["default"].fromValue(object.logsStartTimeUnix)
            : undefined;
        message.logsEndTimeUnix = (object.logsEndTimeUnix !== undefined && object.logsEndTimeUnix !== null)
            ? Long__default["default"].fromValue(object.logsEndTimeUnix)
            : undefined;
        message.responseMode = (_t = object.responseMode) !== null && _t !== void 0 ? _t : undefined;
        message.sqs = (object.sqs !== undefined && object.sqs !== null)
            ? AwsSqsEventTags.fromPartial(object.sqs)
            : undefined;
        message.sns = (object.sns !== undefined && object.sns !== null)
            ? AwsSnsEventTags.fromPartial(object.sns)
            : undefined;
        message.http = (object.http !== undefined && object.http !== null) ? HttpTags.fromPartial(object.http) : undefined;
        message.apiGateway = (object.apiGateway !== undefined && object.apiGateway !== null)
            ? AwsApiGatewayTags.fromPartial(object.apiGateway)
            : undefined;
        message.httpRouter = (object.httpRouter !== undefined && object.httpRouter !== null)
            ? HttpRouterTags.fromPartial(object.httpRouter)
            : undefined;
        message.initialization = (object.initialization !== undefined && object.initialization !== null)
            ? AwsLambdaInitializationTags.fromPartial(object.initialization)
            : undefined;
        message.invocation = (object.invocation !== undefined && object.invocation !== null)
            ? AwsLambdaInvocationTags.fromPartial(object.invocation)
            : undefined;
        message.runtime = (object.runtime !== undefined && object.runtime !== null)
            ? AwsLambdaRuntimeTags.fromPartial(object.runtime)
            : undefined;
        return message;
    },
};
function createBaseHttpRouterTags() {
    return { path: "" };
}
const HttpRouterTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttpRouterTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { path: isSet$6(object.path) ? String(object.path) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.path !== undefined && (obj.path = message.path);
        return obj;
    },
    create(base) {
        return HttpRouterTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseHttpRouterTags();
        message.path = (_a = object.path) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAwsSqsEventTags() {
    return { queueName: "", messageIds: [] };
}
const AwsSqsEventTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.queueName !== "") {
            writer.uint32(10).string(message.queueName);
        }
        for (const v of message.messageIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsSqsEventTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.queueName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.messageIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            queueName: isSet$6(object.queueName) ? String(object.queueName) : "",
            messageIds: Array.isArray(object === null || object === void 0 ? void 0 : object.messageIds) ? object.messageIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.queueName !== undefined && (obj.queueName = message.queueName);
        if (message.messageIds) {
            obj.messageIds = message.messageIds.map((e) => e);
        }
        else {
            obj.messageIds = [];
        }
        return obj;
    },
    create(base) {
        return AwsSqsEventTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAwsSqsEventTags();
        message.queueName = (_a = object.queueName) !== null && _a !== void 0 ? _a : "";
        message.messageIds = ((_b = object.messageIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseAwsSnsEventTags() {
    return { topicName: "", messageIds: [] };
}
const AwsSnsEventTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.topicName !== "") {
            writer.uint32(10).string(message.topicName);
        }
        for (const v of message.messageIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsSnsEventTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.topicName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.messageIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicName: isSet$6(object.topicName) ? String(object.topicName) : "",
            messageIds: Array.isArray(object === null || object === void 0 ? void 0 : object.messageIds) ? object.messageIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.topicName !== undefined && (obj.topicName = message.topicName);
        if (message.messageIds) {
            obj.messageIds = message.messageIds.map((e) => e);
        }
        else {
            obj.messageIds = [];
        }
        return obj;
    },
    create(base) {
        return AwsSnsEventTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAwsSnsEventTags();
        message.topicName = (_a = object.topicName) !== null && _a !== void 0 ? _a : "";
        message.messageIds = ((_b = object.messageIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseAwsLambdaRuntimeTags() {
    return { identifier: "", version: "", arn: "" };
}
const AwsLambdaRuntimeTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.identifier !== "") {
            writer.uint32(10).string(message.identifier);
        }
        if (message.version !== "") {
            writer.uint32(18).string(message.version);
        }
        if (message.arn !== "") {
            writer.uint32(26).string(message.arn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsLambdaRuntimeTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.identifier = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.arn = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            identifier: isSet$6(object.identifier) ? String(object.identifier) : "",
            version: isSet$6(object.version) ? String(object.version) : "",
            arn: isSet$6(object.arn) ? String(object.arn) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.identifier !== undefined && (obj.identifier = message.identifier);
        message.version !== undefined && (obj.version = message.version);
        message.arn !== undefined && (obj.arn = message.arn);
        return obj;
    },
    create(base) {
        return AwsLambdaRuntimeTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAwsLambdaRuntimeTags();
        message.identifier = (_a = object.identifier) !== null && _a !== void 0 ? _a : "";
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : "";
        message.arn = (_c = object.arn) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseAwsLambdaInitializationTags() {
    return { initializationDuration: 0 };
}
const AwsLambdaInitializationTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.initializationDuration !== 0) {
            writer.uint32(8).uint32(message.initializationDuration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsLambdaInitializationTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.initializationDuration = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { initializationDuration: isSet$6(object.initializationDuration) ? Number(object.initializationDuration) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.initializationDuration !== undefined &&
            (obj.initializationDuration = Math.round(message.initializationDuration));
        return obj;
    },
    create(base) {
        return AwsLambdaInitializationTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAwsLambdaInitializationTags();
        message.initializationDuration = (_a = object.initializationDuration) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseAwsLambdaInvocationTags() {
    return { invocationDuration: 0 };
}
const AwsLambdaInvocationTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.invocationDuration !== 0) {
            writer.uint32(8).uint32(message.invocationDuration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsLambdaInvocationTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.invocationDuration = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { invocationDuration: isSet$6(object.invocationDuration) ? Number(object.invocationDuration) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.invocationDuration !== undefined && (obj.invocationDuration = Math.round(message.invocationDuration));
        return obj;
    },
    create(base) {
        return AwsLambdaInvocationTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAwsLambdaInvocationTags();
        message.invocationDuration = (_a = object.invocationDuration) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseAwsSdkTags() {
    return {
        region: undefined,
        signatureVersion: undefined,
        service: "",
        operation: "",
        requestId: undefined,
        error: undefined,
        dynamodb: undefined,
        sqs: undefined,
        sns: undefined,
    };
}
const AwsSdkTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.region !== undefined) {
            writer.uint32(18).string(message.region);
        }
        if (message.signatureVersion !== undefined) {
            writer.uint32(26).string(message.signatureVersion);
        }
        if (message.service !== "") {
            writer.uint32(34).string(message.service);
        }
        if (message.operation !== "") {
            writer.uint32(42).string(message.operation);
        }
        if (message.requestId !== undefined) {
            writer.uint32(50).string(message.requestId);
        }
        if (message.error !== undefined) {
            writer.uint32(58).string(message.error);
        }
        if (message.dynamodb !== undefined) {
            AwsSdkDynamodbTags.encode(message.dynamodb, writer.uint32(802).fork()).ldelim();
        }
        if (message.sqs !== undefined) {
            AwsSdkSqsTags.encode(message.sqs, writer.uint32(810).fork()).ldelim();
        }
        if (message.sns !== undefined) {
            AwsSdkSnsTags.encode(message.sns, writer.uint32(818).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsSdkTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.region = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signatureVersion = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.service = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.operation = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.dynamodb = AwsSdkDynamodbTags.decode(reader, reader.uint32());
                    continue;
                case 101:
                    if (tag !== 810) {
                        break;
                    }
                    message.sqs = AwsSdkSqsTags.decode(reader, reader.uint32());
                    continue;
                case 102:
                    if (tag !== 818) {
                        break;
                    }
                    message.sns = AwsSdkSnsTags.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            region: isSet$6(object.region) ? String(object.region) : undefined,
            signatureVersion: isSet$6(object.signatureVersion) ? String(object.signatureVersion) : undefined,
            service: isSet$6(object.service) ? String(object.service) : "",
            operation: isSet$6(object.operation) ? String(object.operation) : "",
            requestId: isSet$6(object.requestId) ? String(object.requestId) : undefined,
            error: isSet$6(object.error) ? String(object.error) : undefined,
            dynamodb: isSet$6(object.dynamodb) ? AwsSdkDynamodbTags.fromJSON(object.dynamodb) : undefined,
            sqs: isSet$6(object.sqs) ? AwsSdkSqsTags.fromJSON(object.sqs) : undefined,
            sns: isSet$6(object.sns) ? AwsSdkSnsTags.fromJSON(object.sns) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.region !== undefined && (obj.region = message.region);
        message.signatureVersion !== undefined && (obj.signatureVersion = message.signatureVersion);
        message.service !== undefined && (obj.service = message.service);
        message.operation !== undefined && (obj.operation = message.operation);
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.error !== undefined && (obj.error = message.error);
        message.dynamodb !== undefined &&
            (obj.dynamodb = message.dynamodb ? AwsSdkDynamodbTags.toJSON(message.dynamodb) : undefined);
        message.sqs !== undefined && (obj.sqs = message.sqs ? AwsSdkSqsTags.toJSON(message.sqs) : undefined);
        message.sns !== undefined && (obj.sns = message.sns ? AwsSdkSnsTags.toJSON(message.sns) : undefined);
        return obj;
    },
    create(base) {
        return AwsSdkTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseAwsSdkTags();
        message.region = (_a = object.region) !== null && _a !== void 0 ? _a : undefined;
        message.signatureVersion = (_b = object.signatureVersion) !== null && _b !== void 0 ? _b : undefined;
        message.service = (_c = object.service) !== null && _c !== void 0 ? _c : "";
        message.operation = (_d = object.operation) !== null && _d !== void 0 ? _d : "";
        message.requestId = (_e = object.requestId) !== null && _e !== void 0 ? _e : undefined;
        message.error = (_f = object.error) !== null && _f !== void 0 ? _f : undefined;
        message.dynamodb = (object.dynamodb !== undefined && object.dynamodb !== null)
            ? AwsSdkDynamodbTags.fromPartial(object.dynamodb)
            : undefined;
        message.sqs = (object.sqs !== undefined && object.sqs !== null) ? AwsSdkSqsTags.fromPartial(object.sqs) : undefined;
        message.sns = (object.sns !== undefined && object.sns !== null) ? AwsSdkSnsTags.fromPartial(object.sns) : undefined;
        return message;
    },
};
function createBaseAwsSdkDynamodbTags() {
    return {
        tableName: undefined,
        projection: undefined,
        scanForward: undefined,
        attributesToGet: [],
        consistentRead: undefined,
        indexName: undefined,
        limit: undefined,
        select: undefined,
        segment: undefined,
        totalSegments: undefined,
        filter: undefined,
        keyCondition: undefined,
        exclusiveStartKey: undefined,
        attributeValues: undefined,
        count: undefined,
        scannedCount: undefined,
    };
}
const AwsSdkDynamodbTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.tableName !== undefined) {
            writer.uint32(10).string(message.tableName);
        }
        if (message.projection !== undefined) {
            writer.uint32(18).string(message.projection);
        }
        if (message.scanForward !== undefined) {
            writer.uint32(24).bool(message.scanForward);
        }
        for (const v of message.attributesToGet) {
            writer.uint32(34).string(v);
        }
        if (message.consistentRead !== undefined) {
            writer.uint32(40).bool(message.consistentRead);
        }
        if (message.indexName !== undefined) {
            writer.uint32(50).string(message.indexName);
        }
        if (message.limit !== undefined) {
            writer.uint32(56).uint32(message.limit);
        }
        if (message.select !== undefined) {
            writer.uint32(66).string(message.select);
        }
        if (message.segment !== undefined) {
            writer.uint32(72).uint32(message.segment);
        }
        if (message.totalSegments !== undefined) {
            writer.uint32(80).uint64(message.totalSegments);
        }
        if (message.filter !== undefined) {
            writer.uint32(90).string(message.filter);
        }
        if (message.keyCondition !== undefined) {
            writer.uint32(98).string(message.keyCondition);
        }
        if (message.exclusiveStartKey !== undefined) {
            writer.uint32(106).string(message.exclusiveStartKey);
        }
        if (message.attributeValues !== undefined) {
            writer.uint32(114).string(message.attributeValues);
        }
        if (message.count !== undefined) {
            writer.uint32(800).uint64(message.count);
        }
        if (message.scannedCount !== undefined) {
            writer.uint32(808).uint64(message.scannedCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsSdkDynamodbTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tableName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.projection = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.scanForward = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.attributesToGet.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.consistentRead = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.limit = reader.uint32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.select = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.segment = reader.uint32();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.totalSegments = reader.uint64();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.filter = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.keyCondition = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.exclusiveStartKey = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.attributeValues = reader.string();
                    continue;
                case 100:
                    if (tag !== 800) {
                        break;
                    }
                    message.count = reader.uint64();
                    continue;
                case 101:
                    if (tag !== 808) {
                        break;
                    }
                    message.scannedCount = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tableName: isSet$6(object.tableName) ? String(object.tableName) : undefined,
            projection: isSet$6(object.projection) ? String(object.projection) : undefined,
            scanForward: isSet$6(object.scanForward) ? Boolean(object.scanForward) : undefined,
            attributesToGet: Array.isArray(object === null || object === void 0 ? void 0 : object.attributesToGet) ? object.attributesToGet.map((e) => String(e)) : [],
            consistentRead: isSet$6(object.consistentRead) ? Boolean(object.consistentRead) : undefined,
            indexName: isSet$6(object.indexName) ? String(object.indexName) : undefined,
            limit: isSet$6(object.limit) ? Number(object.limit) : undefined,
            select: isSet$6(object.select) ? String(object.select) : undefined,
            segment: isSet$6(object.segment) ? Number(object.segment) : undefined,
            totalSegments: isSet$6(object.totalSegments) ? Long__default["default"].fromValue(object.totalSegments) : undefined,
            filter: isSet$6(object.filter) ? String(object.filter) : undefined,
            keyCondition: isSet$6(object.keyCondition) ? String(object.keyCondition) : undefined,
            exclusiveStartKey: isSet$6(object.exclusiveStartKey) ? String(object.exclusiveStartKey) : undefined,
            attributeValues: isSet$6(object.attributeValues) ? String(object.attributeValues) : undefined,
            count: isSet$6(object.count) ? Long__default["default"].fromValue(object.count) : undefined,
            scannedCount: isSet$6(object.scannedCount) ? Long__default["default"].fromValue(object.scannedCount) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.tableName !== undefined && (obj.tableName = message.tableName);
        message.projection !== undefined && (obj.projection = message.projection);
        message.scanForward !== undefined && (obj.scanForward = message.scanForward);
        if (message.attributesToGet) {
            obj.attributesToGet = message.attributesToGet.map((e) => e);
        }
        else {
            obj.attributesToGet = [];
        }
        message.consistentRead !== undefined && (obj.consistentRead = message.consistentRead);
        message.indexName !== undefined && (obj.indexName = message.indexName);
        message.limit !== undefined && (obj.limit = Math.round(message.limit));
        message.select !== undefined && (obj.select = message.select);
        message.segment !== undefined && (obj.segment = Math.round(message.segment));
        message.totalSegments !== undefined && (obj.totalSegments = (message.totalSegments || undefined).toString());
        message.filter !== undefined && (obj.filter = message.filter);
        message.keyCondition !== undefined && (obj.keyCondition = message.keyCondition);
        message.exclusiveStartKey !== undefined && (obj.exclusiveStartKey = message.exclusiveStartKey);
        message.attributeValues !== undefined && (obj.attributeValues = message.attributeValues);
        message.count !== undefined && (obj.count = (message.count || undefined).toString());
        message.scannedCount !== undefined && (obj.scannedCount = (message.scannedCount || undefined).toString());
        return obj;
    },
    create(base) {
        return AwsSdkDynamodbTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseAwsSdkDynamodbTags();
        message.tableName = (_a = object.tableName) !== null && _a !== void 0 ? _a : undefined;
        message.projection = (_b = object.projection) !== null && _b !== void 0 ? _b : undefined;
        message.scanForward = (_c = object.scanForward) !== null && _c !== void 0 ? _c : undefined;
        message.attributesToGet = ((_d = object.attributesToGet) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.consistentRead = (_e = object.consistentRead) !== null && _e !== void 0 ? _e : undefined;
        message.indexName = (_f = object.indexName) !== null && _f !== void 0 ? _f : undefined;
        message.limit = (_g = object.limit) !== null && _g !== void 0 ? _g : undefined;
        message.select = (_h = object.select) !== null && _h !== void 0 ? _h : undefined;
        message.segment = (_j = object.segment) !== null && _j !== void 0 ? _j : undefined;
        message.totalSegments = (object.totalSegments !== undefined && object.totalSegments !== null)
            ? Long__default["default"].fromValue(object.totalSegments)
            : undefined;
        message.filter = (_k = object.filter) !== null && _k !== void 0 ? _k : undefined;
        message.keyCondition = (_l = object.keyCondition) !== null && _l !== void 0 ? _l : undefined;
        message.exclusiveStartKey = (_m = object.exclusiveStartKey) !== null && _m !== void 0 ? _m : undefined;
        message.attributeValues = (_o = object.attributeValues) !== null && _o !== void 0 ? _o : undefined;
        message.count = (object.count !== undefined && object.count !== null) ? Long__default["default"].fromValue(object.count) : undefined;
        message.scannedCount = (object.scannedCount !== undefined && object.scannedCount !== null)
            ? Long__default["default"].fromValue(object.scannedCount)
            : undefined;
        return message;
    },
};
function createBaseAwsSdkSqsTags() {
    return { queueName: undefined, messageIds: [] };
}
const AwsSdkSqsTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.queueName !== undefined) {
            writer.uint32(10).string(message.queueName);
        }
        for (const v of message.messageIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsSdkSqsTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.queueName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.messageIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            queueName: isSet$6(object.queueName) ? String(object.queueName) : undefined,
            messageIds: Array.isArray(object === null || object === void 0 ? void 0 : object.messageIds) ? object.messageIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.queueName !== undefined && (obj.queueName = message.queueName);
        if (message.messageIds) {
            obj.messageIds = message.messageIds.map((e) => e);
        }
        else {
            obj.messageIds = [];
        }
        return obj;
    },
    create(base) {
        return AwsSdkSqsTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAwsSdkSqsTags();
        message.queueName = (_a = object.queueName) !== null && _a !== void 0 ? _a : undefined;
        message.messageIds = ((_b = object.messageIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseAwsSdkSnsTags() {
    return { topicName: undefined, messageIds: [] };
}
const AwsSdkSnsTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.topicName !== undefined) {
            writer.uint32(10).string(message.topicName);
        }
        for (const v of message.messageIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAwsSdkSnsTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.topicName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.messageIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicName: isSet$6(object.topicName) ? String(object.topicName) : undefined,
            messageIds: Array.isArray(object === null || object === void 0 ? void 0 : object.messageIds) ? object.messageIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.topicName !== undefined && (obj.topicName = message.topicName);
        if (message.messageIds) {
            obj.messageIds = message.messageIds.map((e) => e);
        }
        else {
            obj.messageIds = [];
        }
        return obj;
    },
    create(base) {
        return AwsSdkSnsTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAwsSdkSnsTags();
        message.topicName = (_a = object.topicName) !== null && _a !== void 0 ? _a : undefined;
        message.messageIds = ((_b = object.messageIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet$6(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
var ErrorTags_ErrorType;
(function (ErrorTags_ErrorType) {
    /** ERROR_TYPE_UNSPECIFIED - No ErrorType was provided. This should never be the case and if it is received ingest will ignore it. */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_UNSPECIFIED"] = 0] = "ERROR_TYPE_UNSPECIFIED";
    /** ERROR_TYPE_UNCAUGHT - An unexpected error that caused the application to fail */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_UNCAUGHT"] = 1] = "ERROR_TYPE_UNCAUGHT";
    /**
     * ERROR_TYPE_CAUGHT_USER - An error that was reported by user explictly via the Serverless SDK or console.error call
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_USER"] = 2] = "ERROR_TYPE_CAUGHT_USER";
    /**
     * ERROR_TYPE_CAUGHT_SDK_USER - An error that was reported by the Serverless SDK internally that reports user error
     * (misuage of the SDK)
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_SDK_USER"] = 3] = "ERROR_TYPE_CAUGHT_SDK_USER";
    /**
     * ERROR_TYPE_CAUGHT_SDK_INTERNAL - An error that was reported by the Serverless SDK internally that reports
     * internal SDK error
     * Error doesn't explicitly fail the application.
     * Multiple errors of this type can be reported during a single application run
     */
    ErrorTags_ErrorType[ErrorTags_ErrorType["ERROR_TYPE_CAUGHT_SDK_INTERNAL"] = 4] = "ERROR_TYPE_CAUGHT_SDK_INTERNAL";
    ErrorTags_ErrorType[ErrorTags_ErrorType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ErrorTags_ErrorType || (ErrorTags_ErrorType = {}));
function errorTags_ErrorTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ERROR_TYPE_UNSPECIFIED":
            return ErrorTags_ErrorType.ERROR_TYPE_UNSPECIFIED;
        case 1:
        case "ERROR_TYPE_UNCAUGHT":
            return ErrorTags_ErrorType.ERROR_TYPE_UNCAUGHT;
        case 2:
        case "ERROR_TYPE_CAUGHT_USER":
            return ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_USER;
        case 3:
        case "ERROR_TYPE_CAUGHT_SDK_USER":
            return ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_SDK_USER;
        case 4:
        case "ERROR_TYPE_CAUGHT_SDK_INTERNAL":
            return ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_SDK_INTERNAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ErrorTags_ErrorType.UNRECOGNIZED;
    }
}
function errorTags_ErrorTypeToJSON(object) {
    switch (object) {
        case ErrorTags_ErrorType.ERROR_TYPE_UNSPECIFIED:
            return "ERROR_TYPE_UNSPECIFIED";
        case ErrorTags_ErrorType.ERROR_TYPE_UNCAUGHT:
            return "ERROR_TYPE_UNCAUGHT";
        case ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_USER:
            return "ERROR_TYPE_CAUGHT_USER";
        case ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_SDK_USER:
            return "ERROR_TYPE_CAUGHT_SDK_USER";
        case ErrorTags_ErrorType.ERROR_TYPE_CAUGHT_SDK_INTERNAL:
            return "ERROR_TYPE_CAUGHT_SDK_INTERNAL";
        case ErrorTags_ErrorType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseErrorTags() {
    return { name: "", message: undefined, stacktrace: undefined, type: 0 };
}
const ErrorTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.message !== undefined) {
            writer.uint32(18).string(message.message);
        }
        if (message.stacktrace !== undefined) {
            writer.uint32(26).string(message.stacktrace);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseErrorTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.stacktrace = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet$5(object.name) ? String(object.name) : "",
            message: isSet$5(object.message) ? String(object.message) : undefined,
            stacktrace: isSet$5(object.stacktrace) ? String(object.stacktrace) : undefined,
            type: isSet$5(object.type) ? errorTags_ErrorTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.message !== undefined && (obj.message = message.message);
        message.stacktrace !== undefined && (obj.stacktrace = message.stacktrace);
        message.type !== undefined && (obj.type = errorTags_ErrorTypeToJSON(message.type));
        return obj;
    },
    create(base) {
        return ErrorTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseErrorTags();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        message.stacktrace = (_c = object.stacktrace) !== null && _c !== void 0 ? _c : undefined;
        message.type = (_d = object.type) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet$5(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
var NoticeTags_NoticeType;
(function (NoticeTags_NoticeType) {
    /** NOTICE_TYPE_UNSPECIFIED - Notice type not set */
    NoticeTags_NoticeType[NoticeTags_NoticeType["NOTICE_TYPE_UNSPECIFIED"] = 0] = "NOTICE_TYPE_UNSPECIFIED";
    /**
     * NOTICE_TYPE_SDK_INTERNAL - Signals SDK noteworthy event
     * Event that's not relevant to the user but can be important instruction for the Console
     * on how to process monitoring data of given case
     */
    NoticeTags_NoticeType[NoticeTags_NoticeType["NOTICE_TYPE_SDK_INTERNAL"] = 1] = "NOTICE_TYPE_SDK_INTERNAL";
    NoticeTags_NoticeType[NoticeTags_NoticeType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(NoticeTags_NoticeType || (NoticeTags_NoticeType = {}));
function noticeTags_NoticeTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "NOTICE_TYPE_UNSPECIFIED":
            return NoticeTags_NoticeType.NOTICE_TYPE_UNSPECIFIED;
        case 1:
        case "NOTICE_TYPE_SDK_INTERNAL":
            return NoticeTags_NoticeType.NOTICE_TYPE_SDK_INTERNAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return NoticeTags_NoticeType.UNRECOGNIZED;
    }
}
function noticeTags_NoticeTypeToJSON(object) {
    switch (object) {
        case NoticeTags_NoticeType.NOTICE_TYPE_UNSPECIFIED:
            return "NOTICE_TYPE_UNSPECIFIED";
        case NoticeTags_NoticeType.NOTICE_TYPE_SDK_INTERNAL:
            return "NOTICE_TYPE_SDK_INTERNAL";
        case NoticeTags_NoticeType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseNoticeTags() {
    return { message: "", type: undefined };
}
const NoticeTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.type !== undefined) {
            writer.uint32(16).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNoticeTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet$4(object.message) ? String(object.message) : "",
            type: isSet$4(object.type) ? noticeTags_NoticeTypeFromJSON(object.type) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        message.type !== undefined &&
            (obj.type = message.type !== undefined ? noticeTags_NoticeTypeToJSON(message.type) : undefined);
        return obj;
    },
    create(base) {
        return NoticeTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseNoticeTags();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet$4(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
var WarningTags_WarningType;
(function (WarningTags_WarningType) {
    /** WARNING_TYPE_UNSPECIFIED - Warning type not set */
    WarningTags_WarningType[WarningTags_WarningType["WARNING_TYPE_UNSPECIFIED"] = 0] = "WARNING_TYPE_UNSPECIFIED";
    /** WARNING_TYPE_USER - Warning explicitly reported by user */
    WarningTags_WarningType[WarningTags_WarningType["WARNING_TYPE_USER"] = 1] = "WARNING_TYPE_USER";
    /** WARNING_TYPE_SDK_USER - Warning reported internally by the SDK that signal potential misusage on user side */
    WarningTags_WarningType[WarningTags_WarningType["WARNING_TYPE_SDK_USER"] = 2] = "WARNING_TYPE_SDK_USER";
    /** WARNING_TYPE_SDK_INTERNAL - Warning reported internally by the SDK that signal non fatal SDK issue */
    WarningTags_WarningType[WarningTags_WarningType["WARNING_TYPE_SDK_INTERNAL"] = 3] = "WARNING_TYPE_SDK_INTERNAL";
    WarningTags_WarningType[WarningTags_WarningType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WarningTags_WarningType || (WarningTags_WarningType = {}));
function warningTags_WarningTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "WARNING_TYPE_UNSPECIFIED":
            return WarningTags_WarningType.WARNING_TYPE_UNSPECIFIED;
        case 1:
        case "WARNING_TYPE_USER":
            return WarningTags_WarningType.WARNING_TYPE_USER;
        case 2:
        case "WARNING_TYPE_SDK_USER":
            return WarningTags_WarningType.WARNING_TYPE_SDK_USER;
        case 3:
        case "WARNING_TYPE_SDK_INTERNAL":
            return WarningTags_WarningType.WARNING_TYPE_SDK_INTERNAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return WarningTags_WarningType.UNRECOGNIZED;
    }
}
function warningTags_WarningTypeToJSON(object) {
    switch (object) {
        case WarningTags_WarningType.WARNING_TYPE_UNSPECIFIED:
            return "WARNING_TYPE_UNSPECIFIED";
        case WarningTags_WarningType.WARNING_TYPE_USER:
            return "WARNING_TYPE_USER";
        case WarningTags_WarningType.WARNING_TYPE_SDK_USER:
            return "WARNING_TYPE_SDK_USER";
        case WarningTags_WarningType.WARNING_TYPE_SDK_INTERNAL:
            return "WARNING_TYPE_SDK_INTERNAL";
        case WarningTags_WarningType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseWarningTags() {
    return { message: "", stacktrace: undefined, type: undefined };
}
const WarningTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.stacktrace !== undefined) {
            writer.uint32(26).string(message.stacktrace);
        }
        if (message.type !== undefined) {
            writer.uint32(16).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWarningTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.stacktrace = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet$3(object.message) ? String(object.message) : "",
            stacktrace: isSet$3(object.stacktrace) ? String(object.stacktrace) : undefined,
            type: isSet$3(object.type) ? warningTags_WarningTypeFromJSON(object.type) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        message.stacktrace !== undefined && (obj.stacktrace = message.stacktrace);
        message.type !== undefined &&
            (obj.type = message.type !== undefined ? warningTags_WarningTypeToJSON(message.type) : undefined);
        return obj;
    },
    create(base) {
        return WarningTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseWarningTags();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        message.stacktrace = (_b = object.stacktrace) !== null && _b !== void 0 ? _b : undefined;
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet$3(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
function createBaseTags() {
    return {
        aws: undefined,
        http: undefined,
        https: undefined,
        sdk: undefined,
        environment: undefined,
        namespace: undefined,
        orgId: undefined,
        error: undefined,
        warning: undefined,
        notice: undefined,
    };
}
const Tags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.aws !== undefined) {
            AwsTags.encode(message.aws, writer.uint32(802).fork()).ldelim();
        }
        if (message.http !== undefined) {
            HttpTags.encode(message.http, writer.uint32(850).fork()).ldelim();
        }
        if (message.https !== undefined) {
            HttpTags.encode(message.https, writer.uint32(858).fork()).ldelim();
        }
        if (message.sdk !== undefined) {
            SdkTags.encode(message.sdk, writer.uint32(898).fork()).ldelim();
        }
        if (message.environment !== undefined) {
            writer.uint32(874).string(message.environment);
        }
        if (message.namespace !== undefined) {
            writer.uint32(882).string(message.namespace);
        }
        if (message.orgId !== undefined) {
            writer.uint32(890).string(message.orgId);
        }
        if (message.error !== undefined) {
            ErrorTags.encode(message.error, writer.uint32(906).fork()).ldelim();
        }
        if (message.warning !== undefined) {
            WarningTags.encode(message.warning, writer.uint32(914).fork()).ldelim();
        }
        if (message.notice !== undefined) {
            NoticeTags.encode(message.notice, writer.uint32(922).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.aws = AwsTags.decode(reader, reader.uint32());
                    continue;
                case 106:
                    if (tag !== 850) {
                        break;
                    }
                    message.http = HttpTags.decode(reader, reader.uint32());
                    continue;
                case 107:
                    if (tag !== 858) {
                        break;
                    }
                    message.https = HttpTags.decode(reader, reader.uint32());
                    continue;
                case 112:
                    if (tag !== 898) {
                        break;
                    }
                    message.sdk = SdkTags.decode(reader, reader.uint32());
                    continue;
                case 109:
                    if (tag !== 874) {
                        break;
                    }
                    message.environment = reader.string();
                    continue;
                case 110:
                    if (tag !== 882) {
                        break;
                    }
                    message.namespace = reader.string();
                    continue;
                case 111:
                    if (tag !== 890) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 113:
                    if (tag !== 906) {
                        break;
                    }
                    message.error = ErrorTags.decode(reader, reader.uint32());
                    continue;
                case 114:
                    if (tag !== 914) {
                        break;
                    }
                    message.warning = WarningTags.decode(reader, reader.uint32());
                    continue;
                case 115:
                    if (tag !== 922) {
                        break;
                    }
                    message.notice = NoticeTags.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            aws: isSet$2(object.aws) ? AwsTags.fromJSON(object.aws) : undefined,
            http: isSet$2(object.http) ? HttpTags.fromJSON(object.http) : undefined,
            https: isSet$2(object.https) ? HttpTags.fromJSON(object.https) : undefined,
            sdk: isSet$2(object.sdk) ? SdkTags.fromJSON(object.sdk) : undefined,
            environment: isSet$2(object.environment) ? String(object.environment) : undefined,
            namespace: isSet$2(object.namespace) ? String(object.namespace) : undefined,
            orgId: isSet$2(object.orgId) ? String(object.orgId) : undefined,
            error: isSet$2(object.error) ? ErrorTags.fromJSON(object.error) : undefined,
            warning: isSet$2(object.warning) ? WarningTags.fromJSON(object.warning) : undefined,
            notice: isSet$2(object.notice) ? NoticeTags.fromJSON(object.notice) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.aws !== undefined && (obj.aws = message.aws ? AwsTags.toJSON(message.aws) : undefined);
        message.http !== undefined && (obj.http = message.http ? HttpTags.toJSON(message.http) : undefined);
        message.https !== undefined && (obj.https = message.https ? HttpTags.toJSON(message.https) : undefined);
        message.sdk !== undefined && (obj.sdk = message.sdk ? SdkTags.toJSON(message.sdk) : undefined);
        message.environment !== undefined && (obj.environment = message.environment);
        message.namespace !== undefined && (obj.namespace = message.namespace);
        message.orgId !== undefined && (obj.orgId = message.orgId);
        message.error !== undefined && (obj.error = message.error ? ErrorTags.toJSON(message.error) : undefined);
        message.warning !== undefined && (obj.warning = message.warning ? WarningTags.toJSON(message.warning) : undefined);
        message.notice !== undefined && (obj.notice = message.notice ? NoticeTags.toJSON(message.notice) : undefined);
        return obj;
    },
    create(base) {
        return Tags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTags();
        message.aws = (object.aws !== undefined && object.aws !== null) ? AwsTags.fromPartial(object.aws) : undefined;
        message.http = (object.http !== undefined && object.http !== null) ? HttpTags.fromPartial(object.http) : undefined;
        message.https = (object.https !== undefined && object.https !== null)
            ? HttpTags.fromPartial(object.https)
            : undefined;
        message.sdk = (object.sdk !== undefined && object.sdk !== null) ? SdkTags.fromPartial(object.sdk) : undefined;
        message.environment = (_a = object.environment) !== null && _a !== void 0 ? _a : undefined;
        message.namespace = (_b = object.namespace) !== null && _b !== void 0 ? _b : undefined;
        message.orgId = (_c = object.orgId) !== null && _c !== void 0 ? _c : undefined;
        message.error = (object.error !== undefined && object.error !== null)
            ? ErrorTags.fromPartial(object.error)
            : undefined;
        message.warning = (object.warning !== undefined && object.warning !== null)
            ? WarningTags.fromPartial(object.warning)
            : undefined;
        message.notice = (object.notice !== undefined && object.notice !== null)
            ? NoticeTags.fromPartial(object.notice)
            : undefined;
        return message;
    },
};
function createBaseSlsTags() {
    return {
        orgId: "",
        platform: undefined,
        service: "",
        region: undefined,
        sdk: undefined,
        environment: undefined,
        namespace: undefined,
    };
}
const SlsTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.platform !== undefined) {
            writer.uint32(18).string(message.platform);
        }
        if (message.service !== "") {
            writer.uint32(26).string(message.service);
        }
        if (message.region !== undefined) {
            writer.uint32(34).string(message.region);
        }
        if (message.sdk !== undefined) {
            SdkTags.encode(message.sdk, writer.uint32(42).fork()).ldelim();
        }
        if (message.environment !== undefined) {
            writer.uint32(130).string(message.environment);
        }
        if (message.namespace !== undefined) {
            writer.uint32(138).string(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSlsTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.service = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.region = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sdk = SdkTags.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.environment = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.namespace = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet$2(object.orgId) ? String(object.orgId) : "",
            platform: isSet$2(object.platform) ? String(object.platform) : undefined,
            service: isSet$2(object.service) ? String(object.service) : "",
            region: isSet$2(object.region) ? String(object.region) : undefined,
            sdk: isSet$2(object.sdk) ? SdkTags.fromJSON(object.sdk) : undefined,
            environment: isSet$2(object.environment) ? String(object.environment) : undefined,
            namespace: isSet$2(object.namespace) ? String(object.namespace) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.orgId !== undefined && (obj.orgId = message.orgId);
        message.platform !== undefined && (obj.platform = message.platform);
        message.service !== undefined && (obj.service = message.service);
        message.region !== undefined && (obj.region = message.region);
        message.sdk !== undefined && (obj.sdk = message.sdk ? SdkTags.toJSON(message.sdk) : undefined);
        message.environment !== undefined && (obj.environment = message.environment);
        message.namespace !== undefined && (obj.namespace = message.namespace);
        return obj;
    },
    create(base) {
        return SlsTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseSlsTags();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.platform = (_b = object.platform) !== null && _b !== void 0 ? _b : undefined;
        message.service = (_c = object.service) !== null && _c !== void 0 ? _c : "";
        message.region = (_d = object.region) !== null && _d !== void 0 ? _d : undefined;
        message.sdk = (object.sdk !== undefined && object.sdk !== null) ? SdkTags.fromPartial(object.sdk) : undefined;
        message.environment = (_e = object.environment) !== null && _e !== void 0 ? _e : undefined;
        message.namespace = (_f = object.namespace) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseSdkTags() {
    return { name: "", version: "", runtime: undefined };
}
const SdkTags = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.version !== "") {
            writer.uint32(18).string(message.version);
        }
        if (message.runtime !== undefined) {
            writer.uint32(26).string(message.runtime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSdkTags();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.runtime = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet$2(object.name) ? String(object.name) : "",
            version: isSet$2(object.version) ? String(object.version) : "",
            runtime: isSet$2(object.runtime) ? String(object.runtime) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.version !== undefined && (obj.version = message.version);
        message.runtime !== undefined && (obj.runtime = message.runtime);
        return obj;
    },
    create(base) {
        return SdkTags.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSdkTags();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : "";
        message.runtime = (_c = object.runtime) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet$2(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
function createBaseEvent() {
    return {
        id: new Uint8Array(),
        traceId: new Uint8Array(),
        spanId: undefined,
        timestampUnixNano: Long__default["default"].UZERO,
        eventName: "",
        customTags: undefined,
        customFingerprint: undefined,
        tags: undefined,
    };
}
const Event = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.id.length !== 0) {
            writer.uint32(10).bytes(message.id);
        }
        if (message.traceId.length !== 0) {
            writer.uint32(18).bytes(message.traceId);
        }
        if (message.spanId !== undefined) {
            writer.uint32(26).bytes(message.spanId);
        }
        if (!message.timestampUnixNano.isZero()) {
            writer.uint32(33).fixed64(message.timestampUnixNano);
        }
        if (message.eventName !== "") {
            writer.uint32(42).string(message.eventName);
        }
        if (message.customTags !== undefined) {
            writer.uint32(50).string(message.customTags);
        }
        if (message.customFingerprint !== undefined) {
            writer.uint32(58).string(message.customFingerprint);
        }
        if (message.tags !== undefined) {
            Tags.encode(message.tags, writer.uint32(122).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.traceId = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.spanId = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.timestampUnixNano = reader.fixed64();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.eventName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.customTags = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.customFingerprint = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.tags = Tags.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet$1(object.id) ? bytesFromBase64$1(object.id) : new Uint8Array(),
            traceId: isSet$1(object.traceId) ? bytesFromBase64$1(object.traceId) : new Uint8Array(),
            spanId: isSet$1(object.spanId) ? bytesFromBase64$1(object.spanId) : undefined,
            timestampUnixNano: isSet$1(object.timestampUnixNano) ? Long__default["default"].fromValue(object.timestampUnixNano) : Long__default["default"].UZERO,
            eventName: isSet$1(object.eventName) ? String(object.eventName) : "",
            customTags: isSet$1(object.customTags) ? String(object.customTags) : undefined,
            customFingerprint: isSet$1(object.customFingerprint) ? String(object.customFingerprint) : undefined,
            tags: isSet$1(object.tags) ? Tags.fromJSON(object.tags) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = base64FromBytes$1(message.id !== undefined ? message.id : new Uint8Array()));
        message.traceId !== undefined &&
            (obj.traceId = base64FromBytes$1(message.traceId !== undefined ? message.traceId : new Uint8Array()));
        message.spanId !== undefined &&
            (obj.spanId = message.spanId !== undefined ? base64FromBytes$1(message.spanId) : undefined);
        message.timestampUnixNano !== undefined &&
            (obj.timestampUnixNano = (message.timestampUnixNano || Long__default["default"].UZERO).toString());
        message.eventName !== undefined && (obj.eventName = message.eventName);
        message.customTags !== undefined && (obj.customTags = message.customTags);
        message.customFingerprint !== undefined && (obj.customFingerprint = message.customFingerprint);
        message.tags !== undefined && (obj.tags = message.tags ? Tags.toJSON(message.tags) : undefined);
        return obj;
    },
    create(base) {
        return Event.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.traceId = (_b = object.traceId) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.spanId = (_c = object.spanId) !== null && _c !== void 0 ? _c : undefined;
        message.timestampUnixNano = (object.timestampUnixNano !== undefined && object.timestampUnixNano !== null)
            ? Long__default["default"].fromValue(object.timestampUnixNano)
            : Long__default["default"].UZERO;
        message.eventName = (_d = object.eventName) !== null && _d !== void 0 ? _d : "";
        message.customTags = (_e = object.customTags) !== null && _e !== void 0 ? _e : undefined;
        message.customFingerprint = (_f = object.customFingerprint) !== null && _f !== void 0 ? _f : undefined;
        message.tags = (object.tags !== undefined && object.tags !== null) ? Tags.fromPartial(object.tags) : undefined;
        return message;
    },
};
var tsProtoGlobalThis$1 = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64$1(b64) {
    if (tsProtoGlobalThis$1.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis$1.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis$1.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes$1(arr) {
    if (tsProtoGlobalThis$1.Buffer) {
        return tsProtoGlobalThis$1.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis$1.btoa(bin.join(""));
    }
}
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet$1(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
const protobufPackage = "serverless.instrumentation.v1";
function createBaseTracePayload() {
    return { slsTags: undefined, spans: [], events: [], customTags: undefined, isSampledOut: undefined };
}
const TracePayload = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.slsTags !== undefined) {
            SlsTags.encode(message.slsTags, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.spans) {
            Span.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.events) {
            Event.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.customTags !== undefined) {
            writer.uint32(42).string(message.customTags);
        }
        if (message.isSampledOut !== undefined) {
            writer.uint32(48).bool(message.isSampledOut);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTracePayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.slsTags = SlsTags.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.spans.push(Span.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.events.push(Event.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.customTags = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.isSampledOut = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slsTags: isSet(object.slsTags) ? SlsTags.fromJSON(object.slsTags) : undefined,
            spans: Array.isArray(object === null || object === void 0 ? void 0 : object.spans) ? object.spans.map((e) => Span.fromJSON(e)) : [],
            events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map((e) => Event.fromJSON(e)) : [],
            customTags: isSet(object.customTags) ? String(object.customTags) : undefined,
            isSampledOut: isSet(object.isSampledOut) ? Boolean(object.isSampledOut) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.slsTags !== undefined && (obj.slsTags = message.slsTags ? SlsTags.toJSON(message.slsTags) : undefined);
        if (message.spans) {
            obj.spans = message.spans.map((e) => e ? Span.toJSON(e) : undefined);
        }
        else {
            obj.spans = [];
        }
        if (message.events) {
            obj.events = message.events.map((e) => e ? Event.toJSON(e) : undefined);
        }
        else {
            obj.events = [];
        }
        message.customTags !== undefined && (obj.customTags = message.customTags);
        message.isSampledOut !== undefined && (obj.isSampledOut = message.isSampledOut);
        return obj;
    },
    create(base) {
        return TracePayload.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTracePayload();
        message.slsTags = (object.slsTags !== undefined && object.slsTags !== null)
            ? SlsTags.fromPartial(object.slsTags)
            : undefined;
        message.spans = ((_a = object.spans) === null || _a === void 0 ? void 0 : _a.map((e) => Span.fromPartial(e))) || [];
        message.events = ((_b = object.events) === null || _b === void 0 ? void 0 : _b.map((e) => Event.fromPartial(e))) || [];
        message.customTags = (_c = object.customTags) !== null && _c !== void 0 ? _c : undefined;
        message.isSampledOut = (_d = object.isSampledOut) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseSpan() {
    return {
        id: new Uint8Array(),
        traceId: new Uint8Array(),
        parentSpanId: undefined,
        name: "",
        startTimeUnixNano: Long__default["default"].UZERO,
        endTimeUnixNano: Long__default["default"].UZERO,
        tags: undefined,
        input: undefined,
        output: undefined,
        timestamp: undefined,
        isHistorical: undefined,
        type: undefined,
        customTags: undefined,
    };
}
const Span = {
    encode(message, writer = _m0__default["default"].Writer.create()) {
        if (message.id.length !== 0) {
            writer.uint32(10).bytes(message.id);
        }
        if (message.traceId.length !== 0) {
            writer.uint32(18).bytes(message.traceId);
        }
        if (message.parentSpanId !== undefined) {
            writer.uint32(26).bytes(message.parentSpanId);
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (!message.startTimeUnixNano.isZero()) {
            writer.uint32(41).fixed64(message.startTimeUnixNano);
        }
        if (!message.endTimeUnixNano.isZero()) {
            writer.uint32(49).fixed64(message.endTimeUnixNano);
        }
        if (message.tags !== undefined) {
            Tags.encode(message.tags, writer.uint32(58).fork()).ldelim();
        }
        if (message.input !== undefined) {
            writer.uint32(66).string(message.input);
        }
        if (message.output !== undefined) {
            writer.uint32(74).string(message.output);
        }
        if (message.timestamp !== undefined) {
            writer.uint32(81).fixed64(message.timestamp);
        }
        if (message.isHistorical !== undefined) {
            writer.uint32(88).bool(message.isHistorical);
        }
        if (message.type !== undefined) {
            writer.uint32(98).string(message.type);
        }
        if (message.customTags !== undefined) {
            writer.uint32(106).string(message.customTags);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0__default["default"].Reader ? input : _m0__default["default"].Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpan();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.traceId = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.parentSpanId = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.startTimeUnixNano = reader.fixed64();
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.endTimeUnixNano = reader.fixed64();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.tags = Tags.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.output = reader.string();
                    continue;
                case 10:
                    if (tag !== 81) {
                        break;
                    }
                    message.timestamp = reader.fixed64();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.isHistorical = reader.bool();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.customTags = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(),
            traceId: isSet(object.traceId) ? bytesFromBase64(object.traceId) : new Uint8Array(),
            parentSpanId: isSet(object.parentSpanId) ? bytesFromBase64(object.parentSpanId) : undefined,
            name: isSet(object.name) ? String(object.name) : "",
            startTimeUnixNano: isSet(object.startTimeUnixNano) ? Long__default["default"].fromValue(object.startTimeUnixNano) : Long__default["default"].UZERO,
            endTimeUnixNano: isSet(object.endTimeUnixNano) ? Long__default["default"].fromValue(object.endTimeUnixNano) : Long__default["default"].UZERO,
            tags: isSet(object.tags) ? Tags.fromJSON(object.tags) : undefined,
            input: isSet(object.input) ? String(object.input) : undefined,
            output: isSet(object.output) ? String(object.output) : undefined,
            timestamp: isSet(object.timestamp) ? Long__default["default"].fromValue(object.timestamp) : undefined,
            isHistorical: isSet(object.isHistorical) ? Boolean(object.isHistorical) : undefined,
            type: isSet(object.type) ? String(object.type) : undefined,
            customTags: isSet(object.customTags) ? String(object.customTags) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = base64FromBytes(message.id !== undefined ? message.id : new Uint8Array()));
        message.traceId !== undefined &&
            (obj.traceId = base64FromBytes(message.traceId !== undefined ? message.traceId : new Uint8Array()));
        message.parentSpanId !== undefined &&
            (obj.parentSpanId = message.parentSpanId !== undefined ? base64FromBytes(message.parentSpanId) : undefined);
        message.name !== undefined && (obj.name = message.name);
        message.startTimeUnixNano !== undefined &&
            (obj.startTimeUnixNano = (message.startTimeUnixNano || Long__default["default"].UZERO).toString());
        message.endTimeUnixNano !== undefined && (obj.endTimeUnixNano = (message.endTimeUnixNano || Long__default["default"].UZERO).toString());
        message.tags !== undefined && (obj.tags = message.tags ? Tags.toJSON(message.tags) : undefined);
        message.input !== undefined && (obj.input = message.input);
        message.output !== undefined && (obj.output = message.output);
        message.timestamp !== undefined && (obj.timestamp = (message.timestamp || undefined).toString());
        message.isHistorical !== undefined && (obj.isHistorical = message.isHistorical);
        message.type !== undefined && (obj.type = message.type);
        message.customTags !== undefined && (obj.customTags = message.customTags);
        return obj;
    },
    create(base) {
        return Span.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseSpan();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.traceId = (_b = object.traceId) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.parentSpanId = (_c = object.parentSpanId) !== null && _c !== void 0 ? _c : undefined;
        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : "";
        message.startTimeUnixNano = (object.startTimeUnixNano !== undefined && object.startTimeUnixNano !== null)
            ? Long__default["default"].fromValue(object.startTimeUnixNano)
            : Long__default["default"].UZERO;
        message.endTimeUnixNano = (object.endTimeUnixNano !== undefined && object.endTimeUnixNano !== null)
            ? Long__default["default"].fromValue(object.endTimeUnixNano)
            : Long__default["default"].UZERO;
        message.tags = (object.tags !== undefined && object.tags !== null) ? Tags.fromPartial(object.tags) : undefined;
        message.input = (_e = object.input) !== null && _e !== void 0 ? _e : undefined;
        message.output = (_f = object.output) !== null && _f !== void 0 ? _f : undefined;
        message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
            ? Long__default["default"].fromValue(object.timestamp)
            : undefined;
        message.isHistorical = (_g = object.isHistorical) !== null && _g !== void 0 ? _g : undefined;
        message.type = (_h = object.type) !== null && _h !== void 0 ? _h : undefined;
        message.customTags = (_j = object.customTags) !== null && _j !== void 0 ? _j : undefined;
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (_m0__default["default"].util.Long !== Long__default["default"]) {
    _m0__default["default"].util.Long = Long__default["default"];
    _m0__default["default"].configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}

exports.Span = Span;
exports.TracePayload = TracePayload;
exports.protobufPackage = protobufPackage;
//# sourceMappingURL=trace.js.map
